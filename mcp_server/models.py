# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:42:46+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel, conint, constr


class Balances(BaseModel):
    available_balance: int = Field(
        ...,
        description="The Account's available balance, representing the current balance less any open Pending Transactions on the Account.",
    )
    current_balance: int = Field(
        ...,
        description="The Account's current balance, representing the sum of all posted Transactions on the Account.",
    )


class Currency(Enum):
    CAD = 'CAD'
    CHF = 'CHF'
    EUR = 'EUR'
    GBP = 'GBP'
    JPY = 'JPY'
    USD = 'USD'


class Status(Enum):
    open = 'open'
    closed = 'closed'


class Type(Enum):
    account = 'account'


class Account(BaseModel):
    balances: Balances = Field(
        ...,
        description="The Account's balances in the minor unit of its currency. For dollars, for example, these values will represent cents.",
        title='Balances',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account was created.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Account currency.',
    )
    entity_id: str = Field(
        ..., description='The identifier for the Entity the Account belongs to.'
    )
    id: str = Field(..., description='The Account identifier.')
    informational_entity_id: str = Field(
        ...,
        description='The identifier of an Entity that, while not owning the Account, is associated with its activity.',
    )
    interest_accrued: str = Field(
        ...,
        description='The interest accrued but not yet paid, expressed as a string containing a floating-point value.',
    )
    interest_accrued_at: date = Field(
        ...,
        description='The latest [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which interest was accrued.',
    )
    name: str = Field(..., description='The name you choose for the Account.')
    status: Status = Field(..., description='The status of the Account.')
    type: Type = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `account`.",
    )


class AccountList(BaseModel):
    data: List[Account] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Status1(Enum):
    active = 'active'
    disabled = 'disabled'
    canceled = 'canceled'


class Type1(Enum):
    account_number = 'account_number'


class AccountNumber(BaseModel):
    account_id: str = Field(
        ...,
        description='The identifier for the account this Account Number belongs to.',
    )
    account_number: str = Field(..., description='The account number.')
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Number was created.',
    )
    id: str = Field(..., description='The Account Number identifier.')
    name: str = Field(..., description='The name you choose for the Account Number.')
    routing_number: str = Field(
        ...,
        description="The American Bankers' Association (ABA) Routing Transit Number (RTN).",
    )
    status: Status1 = Field(
        ..., description='This indicates if payments can be made to the Account Number.'
    )
    type: Type1 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `account_number`.",
    )


class AccountNumberList(BaseModel):
    data: List[AccountNumber] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Type2(Enum):
    account_statement = 'account_statement'


class AccountStatement(BaseModel):
    account_id: str = Field(
        ...,
        description='The identifier for the Account this Account Statement belongs to.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Account Statement was created.',
    )
    ending_balance: int = Field(
        ..., description="The Account's balance at the start of its statement period."
    )
    file_id: str = Field(
        ..., description='The identifier of the File containing a PDF of the statement.'
    )
    id: str = Field(..., description='The Account Statement identifier.')
    starting_balance: int = Field(
        ..., description="The Account's balance at the start of its statement period."
    )
    statement_period_end: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the end of the period the Account Statement covers.',
    )
    statement_period_start: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time representing the start of the period the Account Statement covers.',
    )
    type: Type2 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `account_statement`.",
    )


class AccountStatementList(BaseModel):
    data: List[AccountStatement] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Approval(BaseModel):
    approved_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.',
    )


class Cancellation(BaseModel):
    canceled_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Transfer was canceled.',
    )


class Network(Enum):
    account = 'account'


class Status2(Enum):
    pending_submission = 'pending_submission'
    pending_approval = 'pending_approval'
    canceled = 'canceled'
    requires_attention = 'requires_attention'
    flagged_by_operator = 'flagged_by_operator'
    complete = 'complete'


class Type3(Enum):
    account_transfer = 'account_transfer'


class AccountTransfer(BaseModel):
    account_id: str = Field(
        ..., description='The Account to which the transfer belongs.'
    )
    amount: int = Field(
        ...,
        description='The transfer amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    approval: Approval = Field(
        ...,
        description='If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.',
        examples=[{'approved_at': '2020-01-31T23:59:59Z'}],
        title='Transfer Approval',
    )
    cancellation: Cancellation = Field(
        ...,
        description='If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.',
        examples=[{'canceled_at': '2020-01-31T23:59:59Z'}],
        title='Transfer Cancellation',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    description: str = Field(
        ..., description='The description that will show on the transactions.'
    )
    destination_account_id: str = Field(
        ..., description="The destination account's identifier."
    )
    destination_transaction_id: str = Field(
        ..., description='The ID for the transaction receiving the transfer.'
    )
    id: str = Field(..., description="The account transfer's identifier.")
    network: Network = Field(..., description="The transfer's network.")
    status: Status2 = Field(..., description='The lifecycle status of the transfer.')
    template_id: str = Field(
        ...,
        description="If the transfer was created from a template, this will be the template's ID.",
    )
    transaction_id: str = Field(
        ..., description='The ID for the transaction funding the transfer.'
    )
    type: Type3 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `account_transfer`.",
    )


class AccountTransferList(BaseModel):
    data: List[AccountTransfer] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class CreditDebitIndicator(Enum):
    credit = 'credit'
    debit = 'debit'


class PrenotificationReturn(BaseModel):
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Prenotification was returned.',
    )
    return_reason_code: str = Field(
        ..., description='Why the Prenotification was returned.'
    )


class Status3(Enum):
    pending_submitting = 'pending_submitting'
    requires_attention = 'requires_attention'
    returned = 'returned'
    submitted = 'submitted'


class Type4(Enum):
    ach_prenotification = 'ach_prenotification'


class AchPrenotification(BaseModel):
    account_number: str = Field(..., description='The destination account number.')
    addendum: str = Field(..., description='Additional information for the recipient.')
    company_descriptive_date: str = Field(
        ..., description='The description of the date of the notification.'
    )
    company_discretionary_data: str = Field(
        ..., description='Optional data associated with the notification.'
    )
    company_entry_description: str = Field(
        ..., description='The description of the notification.'
    )
    company_name: str = Field(
        ..., description='The name by which you know the company.'
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the prenotification was created.',
    )
    credit_debit_indicator: CreditDebitIndicator = Field(
        ..., description='If the notification is for a future credit or debit.'
    )
    effective_date: datetime = Field(
        ...,
        description='The effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    id: str = Field(..., description="The ACH Prenotification's identifier.")
    prenotification_return: PrenotificationReturn = Field(
        ...,
        description='If your prenotification is returned, this will contain details of the return.',
        examples=[
            {
                'created_at': '2020-01-31T23:59:59Z',
                'return_reason_code': 'corporate_customer_advised_not_authorized',
            }
        ],
        title='ACH Prenotification Return',
    )
    routing_number: str = Field(
        ...,
        description="The American Bankers' Association (ABA) Routing Transit Number (RTN).",
    )
    status: Status3 = Field(
        ..., description='The lifecycle status of the ACH Prenotification.'
    )
    type: Type4 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `ach_prenotification`.",
    )


class AchPrenotificationList(BaseModel):
    data: List[AchPrenotification] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Funding(Enum):
    checking = 'checking'
    savings = 'savings'


class Network1(Enum):
    ach = 'ach'


class NotificationOfChange(BaseModel):
    change_code: str = Field(..., description='The type of change that occurred.')
    corrected_data: str = Field(..., description='The corrected data.')
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the notification occurred.',
    )


class ReturnReasonCode(Enum):
    insufficient_fund = 'insufficient_fund'
    no_account = 'no_account'
    account_closed = 'account_closed'
    invalid_account_number_structure = 'invalid_account_number_structure'
    account_frozen_entry_returned_per_ofac_instruction = (
        'account_frozen_entry_returned_per_ofac_instruction'
    )
    credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver'
    unauthorized_debit_to_consumer_account_using_corporate_sec_code = (
        'unauthorized_debit_to_consumer_account_using_corporate_sec_code'
    )
    corporate_customer_advised_not_authorized = (
        'corporate_customer_advised_not_authorized'
    )
    payment_stopped = 'payment_stopped'
    non_transaction_account = 'non_transaction_account'
    uncollected_funds = 'uncollected_funds'
    routing_number_check_digit_error = 'routing_number_check_digit_error'
    customer_advised_unauthorized_improper_ineligible_or_incomplete = (
        'customer_advised_unauthorized_improper_ineligible_or_incomplete'
    )
    amount_field_error = 'amount_field_error'
    authorization_revoked_by_customer = 'authorization_revoked_by_customer'
    invalid_ach_routing_number = 'invalid_ach_routing_number'
    file_record_edit_criteria = 'file_record_edit_criteria'
    enr_invalid_individual_name = 'enr_invalid_individual_name'
    returned_per_odfi_request = 'returned_per_odfi_request'
    addenda_error = 'addenda_error'
    limited_participation_dfi = 'limited_participation_dfi'
    incorrectly_coded_outbound_international_payment = (
        'incorrectly_coded_outbound_international_payment'
    )
    other = 'other'


class Return(BaseModel):
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.',
    )
    return_reason_code: ReturnReasonCode = Field(
        ..., description='Why the ACH Transfer was returned.'
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the Tranasaction associated with this return.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the ACH Transfer associated with this return.',
    )


class StandardEntryClassCode(Enum):
    corporate_credit_or_debit = 'corporate_credit_or_debit'
    prearranged_payments_and_deposit = 'prearranged_payments_and_deposit'
    internet_initiated = 'internet_initiated'


class Status4(Enum):
    pending_approval = 'pending_approval'
    canceled = 'canceled'
    pending_submission = 'pending_submission'
    submitted = 'submitted'
    returned = 'returned'
    requires_attention = 'requires_attention'
    rejected = 'rejected'


class Submission(BaseModel):
    submitted_at: datetime = Field(
        ..., description='When the ACH transfer was sent to FedACH.'
    )
    trace_number: str = Field(..., description='The trace number for the submission.')


class Type5(Enum):
    ach_transfer = 'ach_transfer'


class AchTransfer(BaseModel):
    account_id: str = Field(
        ..., description='The Account to which the transfer belongs.'
    )
    account_number: str = Field(..., description='The destination account number.')
    addendum: str = Field(
        ..., description='Additional information that will be sent to the recipient.'
    )
    amount: int = Field(
        ...,
        description='The transfer amount in USD cents. A positive amount indicates a credit transfer pushing funds to the receiving account. A negative amount indicates a debit transfer pulling funds from the receiving account.',
    )
    approval: Approval = Field(
        ...,
        description='If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.',
        examples=[{'approved_at': '2020-01-31T23:59:59Z'}],
        title='Transfer Approval',
    )
    cancellation: Cancellation = Field(
        ...,
        description='If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.',
        examples=[{'canceled_at': '2020-01-31T23:59:59Z'}],
        title='Transfer Cancellation',
    )
    company_descriptive_date: str = Field(
        ..., description='The description of the date of the transfer.'
    )
    company_discretionary_data: str = Field(
        ..., description='The data you chose to associate with the transfer.'
    )
    company_entry_description: str = Field(
        ...,
        description='The description of the transfer you set to be shown to the recipient.',
    )
    company_name: str = Field(
        ..., description='The name by which the recipient knows you.'
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For ACH transfers this is always equal to `usd`.",
    )
    external_account_id: str = Field(
        ...,
        description='The identifier of the External Account the transfer was made to, if any.',
    )
    funding: Funding = Field(
        ..., description='The type of the account to which the transfer will be sent.'
    )
    id: str = Field(..., description="The ACH transfer's identifier.")
    individual_id: str = Field(
        ..., description='Your identifer for the transfer recipient.'
    )
    individual_name: str = Field(
        ...,
        description="The name of the transfer recipient. This value is information and not verified by the recipient's bank.",
    )
    network: Network1 = Field(..., description="The transfer's network.")
    notification_of_change: NotificationOfChange = Field(
        ...,
        description='If the receiving bank accepts the transfer but notifies that future transfers should use different details, this will contain those details.',
        examples=[
            {
                'change_code': 'incorrect_transaction_code',
                'corrected_data': '32',
                'created_at': '2020-01-31T23:59:59Z',
            }
        ],
        title='ACH Notification of Change',
    )
    return_: Return = Field(
        ...,
        alias='return',
        description='If your transfer is returned, this will contain details of the return.',
        examples=[
            {
                'created_at': '2020-01-31T23:59:59Z',
                'return_reason_code': 'insufficient_fund',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'transfer_id': 'ach_transfer_uoxatyh3lt5evrsdvo7q',
            }
        ],
        title='ACH Transfer Return',
    )
    routing_number: str = Field(
        ...,
        description="The American Bankers' Association (ABA) Routing Transit Number (RTN).",
    )
    standard_entry_class_code: StandardEntryClassCode = Field(
        ..., description='The Standard Entry Class (SEC) code to use for the transfer.'
    )
    statement_descriptor: str = Field(
        ...,
        description="The descriptor that will show on the recipient's bank statement.",
    )
    status: Status4 = Field(..., description='The lifecycle status of the transfer.')
    submission: Submission = Field(
        ...,
        description='After the transfer is submitted to FedACH, this will contain supplemental details.',
        examples=[
            {'submitted_at': '2020-01-31T23:59:59Z', 'trace_number': '058349238292834'}
        ],
        title='ACH Transfer Submission',
    )
    template_id: str = Field(
        ...,
        description="If the transfer was created from a template, this will be the template's ID.",
    )
    transaction_id: str = Field(
        ..., description='The ID for the transaction funding the transfer.'
    )
    type: Type5 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `ach_transfer`.",
    )


class AchTransferList(BaseModel):
    data: List[AchTransfer] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Decision(Enum):
    approve = 'approve'
    decline = 'decline'


class CardAuthorization(BaseModel):
    decision: Decision = Field(
        ...,
        description='Whether the card authorization should be approved or declined.',
    )


class Result(Enum):
    success = 'success'
    failure = 'failure'


class DigitalWalletAuthentication(BaseModel):
    result: Result = Field(
        ...,
        description='Whether your application was able to deliver the one-time passcode.',
    )


class Approval2(BaseModel):
    card_profile_id: str = Field(
        ...,
        description='The identifier of the Card Profile to assign to the Digital Wallet token.',
    )
    email: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='An email address that can be used to verify the cardholder via one-time passcode.',
    )
    phone: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='A phone number that can be used to verify the cardholder via one-time passcode over SMS.',
    )


class Decline(BaseModel):
    reason: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='Why the tokenization attempt was declined. This is for logging purposes only and is not displayed to the end-user.',
    )


class DigitalWalletToken(BaseModel):
    approval: Optional[Approval2] = Field(
        None,
        description='If your application approves the provisioning attempt, this contains metadata about the digital wallet token that will be generated.',
    )
    decline: Optional[Decline] = Field(
        None,
        description='If your application declines the provisioning attempt, this contains details about the decline.',
    )


class ActionARealTimeDecisionParameters(BaseModel):
    card_authorization: Optional[CardAuthorization] = Field(
        None,
        description='If the Real-Time Decision relates to a card authorization attempt, this object contains your response to the authorization.',
    )
    digital_wallet_authentication: Optional[DigitalWalletAuthentication] = Field(
        None,
        description='If the Real-Time Decision relates to a digital wallet authentication attempt, this object contains your response to the authentication.',
    )
    digital_wallet_token: Optional[DigitalWalletToken] = Field(
        None,
        description='If the Real-Time Decision relates to a digital wallet token provisioning attempt, this object contains your response to the attempt.',
    )


class BillingAddress(BaseModel):
    city: str = Field(..., description='The city of the billing address.')
    line1: str = Field(..., description='The first line of the billing address.')
    line2: str = Field(..., description='The second line of the billing address.')
    postal_code: str = Field(..., description='The postal code of the billing address.')
    state: str = Field(..., description='The US state of the billing address.')


class DigitalWallet(BaseModel):
    card_profile_id: str = Field(
        ...,
        description='The card profile assigned to this digital card. Card profiles may also be assigned at the program level.',
    )
    email: str = Field(
        ...,
        description='An email address that can be used to verify the cardholder via one-time passcode over email.',
    )
    phone: str = Field(
        ...,
        description='A phone number that can be used to verify the cardholder via one-time passcode over SMS.',
    )


class Status5(Enum):
    active = 'active'
    disabled = 'disabled'
    canceled = 'canceled'


class Type6(Enum):
    card = 'card'


class Card(BaseModel):
    account_id: str = Field(
        ..., description='The identifier for the account this card belongs to.'
    )
    billing_address: BillingAddress = Field(
        ...,
        description="The Card's billing address.",
        examples=[
            {
                'city': 'New York',
                'line1': '33 Liberty Street',
                'line2': None,
                'postal_code': '10045',
                'state': 'NY',
            }
        ],
        title='Billing Address',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.',
    )
    description: str = Field(
        ..., description="The card's description for display purposes."
    )
    digital_wallet: DigitalWallet = Field(
        ...,
        description='The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.',
        title='Digital Wallet',
    )
    expiration_month: int = Field(
        ..., description='The month the card expires in M format (e.g., August is 8).'
    )
    expiration_year: int = Field(
        ..., description='The year the card expires in YYYY format (e.g., 2025).'
    )
    id: str = Field(..., description='The card identifier.')
    last4: str = Field(
        ..., description="The last 4 digits of the Card's Primary Account Number."
    )
    status: Status5 = Field(
        ..., description='This indicates if payments can be made with the card.'
    )
    type: Type6 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card`.",
    )


class Type7(Enum):
    card_details = 'card_details'


class CardDetails(BaseModel):
    card_id: str = Field(
        ...,
        description='The identifier for the Card for which sensitive details have been returned.',
    )
    expiration_month: int = Field(
        ..., description='The month the card expires in M format (e.g., August is 8).'
    )
    expiration_year: int = Field(
        ..., description='The year the card expires in YYYY format (e.g., 2025).'
    )
    primary_account_number: str = Field(..., description='The card number.')
    type: Type7 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_details`.",
    )
    verification_code: str = Field(
        ...,
        description="The three-digit verification code for the card. It's also known as the Card Verification Code (CVC), the Card Verification Value (CVV), or the Card Identification (CID).",
    )


class Acceptance(BaseModel):
    accepted_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.',
    )
    card_dispute_id: str = Field(
        ..., description='The identifier of the Card Dispute that was accepted.'
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the Transaction that was created to return the disputed funds to your account.',
    )


class Rejection(BaseModel):
    card_dispute_id: str = Field(
        ..., description='The identifier of the Card Dispute that was rejected.'
    )
    explanation: str = Field(..., description='Why the Card Dispute was rejected.')
    rejected_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was rejected.',
    )


class Status6(Enum):
    pending_reviewing = 'pending_reviewing'
    accepted = 'accepted'
    rejected = 'rejected'


class Type8(Enum):
    card_dispute = 'card_dispute'


class CardDispute(BaseModel):
    acceptance: Acceptance = Field(
        ...,
        description="If the Card Dispute's status is `accepted`, this will contain details of the successful dispute.",
        examples=[
            {
                'accepted_at': '2020-01-31T23:59:59Z',
                'card_dispute_id': 'card_dispute_h9sc95nbl1cgltpp7men',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Card Dispute Acceptance',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.',
    )
    disputed_transaction_id: str = Field(
        ..., description='The identifier of the Transaction that was disputed.'
    )
    explanation: str = Field(
        ..., description='Why you disputed the Transaction in question.'
    )
    id: str = Field(..., description='The Card Dispute identifier.')
    rejection: Rejection = Field(
        ...,
        description="If the Card Dispute's status is `rejected`, this will contain details of the unsuccessful dispute.",
        examples=[
            {
                'card_dispute_id': 'card_dispute_h9sc95nbl1cgltpp7men',
                'explanation': 'Acquirer provided evidence that the transaction was authorized.',
                'rejected_at': '2020-01-31T23:59:59Z',
            }
        ],
        title='Card Dispute Rejection',
    )
    status: Status6 = Field(
        ..., description='The results of the Dispute investigation.'
    )
    type: Type8 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_dispute`.",
    )


class CardDisputeList(BaseModel):
    data: List[CardDispute] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class CardList(BaseModel):
    data: List[Card] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class TextColor(BaseModel):
    blue: int = Field(
        ..., description='The value of the blue channel in the RGB color.'
    )
    green: int = Field(
        ..., description='The value of the green channel in the RGB color.'
    )
    red: int = Field(..., description='The value of the red channel in the RGB color.')


class DigitalWallets(BaseModel):
    app_icon_file_id: str = Field(
        ..., description="The identifier of the File containing the card's icon image."
    )
    background_image_file_id: str = Field(
        ..., description="The identifier of the File containing the card's front image."
    )
    card_description: str = Field(
        ..., description='A user-facing description for the card itself.'
    )
    contact_email: str = Field(
        ...,
        description='An email address the user can contact to receive support for their card.',
    )
    contact_phone: str = Field(
        ...,
        description='A phone number the user can contact to receive support for their card.',
    )
    contact_website: str = Field(
        ...,
        description='A website the user can visit to view and receive support for their card.',
    )
    issuer_name: str = Field(
        ..., description='A user-facing description for whoever is issuing the card.'
    )
    text_color: TextColor = Field(
        ...,
        description="The Card's text color, specified as an RGB triple.",
        title='Text Color',
    )


class Status7(Enum):
    pending = 'pending'
    rejected = 'rejected'
    active = 'active'
    archived = 'archived'


class Type9(Enum):
    card_profile = 'card_profile'


class CardProfile(BaseModel):
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was created.',
    )
    description: str = Field(
        ..., description='A description you can use to identify the Card Profile.'
    )
    digital_wallets: DigitalWallets = Field(
        ...,
        description='How Cards should appear in digital wallets such as Apple Pay. Different wallets will use these values to render card artwork appropriately for their app.',
        title='Digital Wallets',
    )
    id: str = Field(..., description='The Card Profile identifier.')
    status: Status7 = Field(..., description='The status of the Card Profile.')
    type: Type9 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_profile`.",
    )


class CardProfileList(BaseModel):
    data: List[CardProfile] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class DepositAcceptance(BaseModel):
    account_number: str = Field(
        ..., description='The account number printed on the check.'
    )
    amount: int = Field(
        ...,
        description="The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    auxiliary_on_us: str = Field(
        ...,
        description='An additional line of metadata printed on the check. This typically includes the check number for business checks.',
    )
    check_deposit_id: str = Field(
        ..., description='The ID of the Check Deposit that was accepted.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    routing_number: str = Field(
        ..., description='The routing number printed on the check.'
    )
    serial_number: str = Field(
        ...,
        description='The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.',
    )


class Reason(Enum):
    incomplete_image = 'incomplete_image'
    duplicate = 'duplicate'
    poor_image_quality = 'poor_image_quality'
    incorrect_amount = 'incorrect_amount'
    incorrect_recipient = 'incorrect_recipient'
    not_eligible_for_mobile_deposit = 'not_eligible_for_mobile_deposit'
    unknown = 'unknown'


class DepositRejection(BaseModel):
    amount: int = Field(
        ...,
        description="The rejected amount in the minor unit of check's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
    )
    reason: Reason = Field(..., description='Why the check deposit was rejected.')
    rejected_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was rejected.',
    )


class ReturnReason(Enum):
    ach_conversion_not_supported = 'ach_conversion_not_supported'
    closed_account = 'closed_account'
    duplicate_submission = 'duplicate_submission'
    insufficient_funds = 'insufficient_funds'
    no_account = 'no_account'
    not_authorized = 'not_authorized'
    stale_dated = 'stale_dated'
    stop_payment = 'stop_payment'
    unknown_reason = 'unknown_reason'
    unmatched_details = 'unmatched_details'
    unreadable_image = 'unreadable_image'


class DepositReturn(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    check_deposit_id: str = Field(
        ..., description='The identifier of the Check Deposit that was returned.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    return_reason: ReturnReason = Field(..., description='')
    returned_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.',
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the transaction that reversed the original check deposit transaction.',
    )


class Status8(Enum):
    pending = 'pending'
    submitted = 'submitted'
    rejected = 'rejected'
    returned = 'returned'


class Type10(Enum):
    check_deposit = 'check_deposit'


class CheckDeposit(BaseModel):
    account_id: str = Field(
        ..., description='The Account the check was deposited into.'
    )
    amount: int = Field(
        ...,
        description='The deposited amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    back_image_file_id: str = Field(
        ...,
        description='The ID for the File containing the image of the back of the check.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the deposit.',
    )
    deposit_acceptance: DepositAcceptance = Field(
        ...,
        description='If your deposit is successfully parsed and accepted by Increase, this will contain details of the parsed check.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'auxiliary_on_us': '101',
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'routing_number': '101050001',
                'serial_number': None,
            }
        ],
        title='Check Deposit Acceptance',
    )
    deposit_rejection: DepositRejection = Field(
        ...,
        description='If your deposit is rejected by Increase, this will contain details as to why it was rejected.',
        examples=[
            {
                'amount': 1750,
                'currency': 'USD',
                'reason': 'incomplete_image',
                'rejected_at': '2020-01-31T23:59:59Z',
            }
        ],
        title='Check Deposit Rejection',
    )
    deposit_return: DepositReturn = Field(
        ...,
        description='If your deposit is returned, this will contain details as to why it was returned.',
        examples=[
            {
                'amount': 100,
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'return_reason': 'insufficient_funds',
                'returned_at': '2020-01-31T23:59:59Z',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Check Deposit Return',
    )
    front_image_file_id: str = Field(
        ...,
        description='The ID for the File containing the image of the front of the check.',
    )
    id: str = Field(..., description="The deposit's identifier.")
    status: Status8 = Field(..., description='The status of the Check Deposit.')
    transaction_id: str = Field(
        ..., description='The ID for the Transaction created by the deposit.'
    )
    type: Type10 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `check_deposit`.",
    )


class CheckDepositList(BaseModel):
    data: List[CheckDeposit] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Type11(Enum):
    check_transfer_deposit = 'check_transfer_deposit'


class Deposit(BaseModel):
    back_image_file_id: str = Field(
        ...,
        description='The ID for the File containing the image of the rear of the check.',
    )
    front_image_file_id: str = Field(
        ...,
        description='The ID for the File containing the image of the front of the check.',
    )
    type: Type11 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `check_transfer_deposit`.",
    )


class ReturnAddress(BaseModel):
    city: str = Field(..., description='The city of the address.')
    line1: str = Field(..., description='The first line of the address.')
    line2: str = Field(..., description='The second line of the address.')
    name: str = Field(..., description='The name of the address.')
    state: str = Field(..., description='The US state of the address.')
    zip: str = Field(..., description='The postal code of the address.')


class Status9(Enum):
    pending_approval = 'pending_approval'
    pending_submission = 'pending_submission'
    submitting = 'submitting'
    submitted = 'submitted'
    pending_mailing = 'pending_mailing'
    mailed = 'mailed'
    canceled = 'canceled'
    deposited = 'deposited'
    stopped = 'stopped'
    returned = 'returned'
    rejected = 'rejected'
    requires_attention = 'requires_attention'


class Type12(Enum):
    check_transfer_stop_payment_request = 'check_transfer_stop_payment_request'


class StopPaymentRequest(BaseModel):
    requested_at: datetime = Field(
        ..., description='The time the stop-payment was requested.'
    )
    transaction_id: str = Field(
        ..., description='The transaction ID of the corresponding credit transaction.'
    )
    transfer_id: str = Field(
        ..., description='The ID of the check transfer that was stopped.'
    )
    type: Type12 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.",
    )


class Submission1(BaseModel):
    check_number: str = Field(..., description='The identitying number of the check.')


class Type13(Enum):
    check_transfer = 'check_transfer'


class CheckTransfer(BaseModel):
    account_id: str = Field(
        ...,
        description='The identifier of the Account from which funds will be transferred.',
    )
    address_city: str = Field(..., description="The city of the check's destination.")
    address_line1: str = Field(
        ..., description="The street address of the check's destination."
    )
    address_line2: str = Field(
        ..., description="The second line of the address of the check's destination."
    )
    address_state: str = Field(..., description="The state of the check's destination.")
    address_zip: str = Field(
        ..., description="The postal code of the check's destination."
    )
    amount: int = Field(..., description='The transfer amount in USD cents.')
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
    )
    deposit: Deposit = Field(
        ...,
        description='After a check transfer is deposited, this will contain supplemental details.',
        examples=[
            {
                'back_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
                'front_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
                'type': 'check_transfer_deposit',
            }
        ],
        title='Check Transfer Deposit',
    )
    id: str = Field(..., description="The Check transfer's identifier.")
    mailed_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was mailed.',
    )
    message: str = Field(
        ...,
        description='The descriptor that will be printed on the memo field on the check.',
    )
    note: str = Field(
        ...,
        description='The descriptor that will be printed on the letter included with the check.',
    )
    recipient_name: str = Field(
        ..., description='The name that will be printed on the check.'
    )
    return_address: ReturnAddress = Field(
        ...,
        description='The return address to be printed on the check.',
        title='Return Address',
    )
    status: Status9 = Field(..., description='The lifecycle status of the transfer.')
    stop_payment_request: StopPaymentRequest = Field(
        ...,
        description='After a stop-payment is requested on the check, this will contain supplemental details.',
        examples=[
            {
                'requested_at': '2020-01-31T23:59:59Z',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
                'type': 'check_transfer_stop_payment_request',
            }
        ],
        title='Check Transfer Stop Payment Request',
    )
    submission: Submission1 = Field(
        ...,
        description='After the transfer is submitted, this will contain supplemental details.',
        examples=[{'check_number': '130670'}],
        title='Check Transfer Submission',
    )
    submitted_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check was submitted.',
    )
    template_id: str = Field(
        ...,
        description="If the transfer was created from a template, this will be the template's ID.",
    )
    transaction_id: str = Field(
        ..., description='The ID for the transaction caused by the transfer.'
    )
    type: Type13 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `check_transfer`.",
    )


class CheckTransferList(BaseModel):
    data: List[CheckTransfer] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class CreateACardDisputeParameters(BaseModel):
    disputed_transaction_id: str = Field(
        ...,
        description='The Transaction you wish to dispute. This Transaction must have a `source_type` of `card_settlement`.',
    )
    explanation: constr(min_length=1, max_length=200) = Field(
        ..., description='Why you are disputing this Transaction.'
    )


class BillingAddress1(BaseModel):
    city: constr(min_length=1, max_length=200) = Field(
        ..., description='The city of the billing address.'
    )
    line1: constr(min_length=1, max_length=200) = Field(
        ..., description='The first line of the billing address.'
    )
    line2: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The second line of the billing address.'
    )
    postal_code: constr(min_length=1, max_length=200) = Field(
        ..., description='The postal code of the billing address.'
    )
    state: constr(min_length=1, max_length=200) = Field(
        ..., description='The US state of the billing address.'
    )


class DigitalWallet1(BaseModel):
    card_profile_id: Optional[str] = Field(
        None,
        description='The card profile assigned to this digital card. Card profiles may also be assigned at the program level.',
    )
    email: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='An email address that can be used to verify the cardholder via one-time passcode over email.',
    )
    phone: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='A phone number that can be used to verify the cardholder via one-time passcode over SMS.',
    )


class CreateACardParameters(BaseModel):
    account_id: str = Field(..., description='The Account the card should belong to.')
    billing_address: Optional[BillingAddress1] = Field(
        None, description="The card's billing address."
    )
    description: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The description you choose to give the card.'
    )
    digital_wallet: Optional[DigitalWallet1] = Field(
        None,
        description='The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.',
    )


class TextColor1(BaseModel):
    blue: conint(ge=0, le=255) = Field(
        ..., description='The value of the blue channel in the RGB color.'
    )
    green: conint(ge=0, le=255) = Field(
        ..., description='The value of the green channel in the RGB color.'
    )
    red: conint(ge=0, le=255) = Field(
        ..., description='The value of the red channel in the RGB color.'
    )


class DigitalWallets1(BaseModel):
    app_icon_file_id: str = Field(
        ..., description="The identifier of the File containing the card's icon image."
    )
    background_image_file_id: str = Field(
        ..., description="The identifier of the File containing the card's front image."
    )
    card_description: constr(min_length=1, max_length=32) = Field(
        ..., description='A user-facing description for the card itself.'
    )
    contact_email: Optional[constr(min_length=1, max_length=32)] = Field(
        None,
        description='An email address the user can contact to receive support for their card.',
    )
    contact_phone: Optional[constr(min_length=1, max_length=32)] = Field(
        None,
        description='A phone number the user can contact to receive support for their card.',
    )
    contact_website: Optional[str] = Field(
        None,
        description='A website the user can visit to view and receive support for their card.',
    )
    issuer_name: constr(min_length=1, max_length=32) = Field(
        ..., description='A user-facing description for whoever is issuing the card.'
    )
    text_color: Optional[TextColor1] = Field(
        None,
        description="The Card's text color, specified as an RGB triple. The default is white.",
    )


class CreateACardProfileParameters(BaseModel):
    description: constr(min_length=1, max_length=200) = Field(
        ..., description='A description you can use to identify the Card Profile.'
    )
    digital_wallets: DigitalWallets1 = Field(
        ...,
        description='How Cards should appear in digital wallets such as Apple Pay. Different wallets will use these values to render card artwork appropriately for their app.',
    )


class CreateACheckDepositParameters(BaseModel):
    account_id: str = Field(
        ..., description='The identifier for the Account to deposit the check in.'
    )
    amount: conint(ge=0) = Field(
        ...,
        description='The deposit amount in the minor unit of the account currency. For dollars, for example, this is cents.',
    )
    back_image_file_id: str = Field(
        ..., description="The File containing the check's back image."
    )
    currency: constr(min_length=1, max_length=200) = Field(
        ..., description='The currency to use for the deposit.'
    )
    front_image_file_id: str = Field(
        ..., description="The File containing the check's front image."
    )


class ReturnAddress1(BaseModel):
    city: constr(min_length=1, max_length=200) = Field(
        ..., description='The city of the return address.'
    )
    line1: constr(min_length=1, max_length=200) = Field(
        ..., description='The first line of the return address.'
    )
    line2: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The second line of the return address.'
    )
    name: constr(min_length=1, max_length=200) = Field(
        ..., description='The name of the return address.'
    )
    state: constr(min_length=1, max_length=200) = Field(
        ..., description='The US state of the return address.'
    )
    zip: constr(min_length=1, max_length=200) = Field(
        ..., description='The postal code of the return address.'
    )


class CreateACheckTransferParameters(BaseModel):
    account_id: str = Field(
        ..., description='The identifier for the account that will send the transfer.'
    )
    address_city: constr(min_length=1, max_length=250) = Field(
        ..., description="The city of the check's destination."
    )
    address_line1: constr(min_length=1, max_length=250) = Field(
        ..., description="The street address of the check's destination."
    )
    address_line2: Optional[constr(min_length=1, max_length=250)] = Field(
        None, description="The second line of the address of the check's destination."
    )
    address_state: constr(min_length=1, max_length=200) = Field(
        ..., description="The state of the check's destination."
    )
    address_zip: constr(min_length=1, max_length=250) = Field(
        ..., description="The postal code of the check's destination."
    )
    amount: conint(ge=1) = Field(..., description='The transfer amount in cents.')
    message: constr(min_length=1, max_length=73) = Field(
        ...,
        description='The descriptor that will be printed on the memo field on the check.',
    )
    note: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The descriptor that will be printed on the letter included with the check.',
    )
    recipient_name: constr(min_length=1, max_length=250) = Field(
        ..., description='The name that will be printed on the check.'
    )
    require_approval: Optional[bool] = Field(
        None,
        description='Whether the transfer requires explicit approval via the dashboard or API.',
    )
    return_address: Optional[ReturnAddress1] = Field(
        None,
        description='The return address to be printed on the check. If omitted this will default to the address of the Entity of the Account used to make the Check Transfer.',
    )


class Purpose(Enum):
    check_image_front = 'check_image_front'
    check_image_back = 'check_image_back'
    form_ss_4 = 'form_ss_4'
    identity_document = 'identity_document'
    other = 'other'
    trust_formation_document = 'trust_formation_document'
    digital_wallet_artwork = 'digital_wallet_artwork'
    digital_wallet_app_icon = 'digital_wallet_app_icon'
    entity_supplemental_document = 'entity_supplemental_document'


class CreateAFileParameters(BaseModel):
    description: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The description you choose to give the File.'
    )
    file: bytes = Field(
        ...,
        description='The file contents. This should follow the specifications of [RFC 7578](https://datatracker.ietf.org/doc/html/rfc7578) which defines file transfers for the multipart/form-data protocol.',
    )
    purpose: Purpose = Field(
        ..., description="What the File will be used for in Increase's systems."
    )


class Interval(Enum):
    transaction = 'transaction'
    day = 'day'
    week = 'week'
    month = 'month'
    year = 'year'
    all_time = 'all_time'


class Metric(Enum):
    count = 'count'
    volume = 'volume'


class CreateALimitParameters(BaseModel):
    interval: Optional[Interval] = Field(
        None,
        description='The interval for the metric. Required if `metric` is `count` or `volume`.',
    )
    metric: Metric = Field(..., description='The metric for the limit.')
    model_id: constr(min_length=1, max_length=200) = Field(
        ...,
        description='The identifier of the Account or Account Number you wish to associate the limit with.',
    )
    value: conint(ge=0) = Field(..., description='The value to test the limit against.')


class CreateASupplementalDocumentForAnEntityParameters(BaseModel):
    file_id: str = Field(
        ..., description='The identifier of the File containing the document.'
    )


class CreateAWireDrawdownRequestParameters(BaseModel):
    account_number_id: str = Field(
        ..., description='The Account Number to which the recipient should send funds.'
    )
    amount: conint(ge=1) = Field(
        ..., description='The amount requested from the recipient, in cents.'
    )
    message_to_recipient: constr(min_length=1, max_length=140) = Field(
        ..., description='A message the recipient will see as part of the request.'
    )
    recipient_account_number: constr(min_length=1, max_length=200) = Field(
        ..., description="The drawdown request's recipient's account number."
    )
    recipient_address_line1: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="Line 1 of the drawdown request's recipient's address."
    )
    recipient_address_line2: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="Line 2 of the drawdown request's recipient's address."
    )
    recipient_address_line3: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="Line 3 of the drawdown request's recipient's address."
    )
    recipient_name: constr(min_length=1, max_length=35) = Field(
        ..., description="The drawdown request's recipient's name."
    )
    recipient_routing_number: constr(min_length=1, max_length=200) = Field(
        ..., description="The drawdown request's recipient's routing number."
    )


class CreateAWireTransferParameters(BaseModel):
    account_id: str = Field(
        ..., description='The identifier for the account that will send the transfer.'
    )
    account_number: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The account number for the destination account.'
    )
    amount: conint(ge=1) = Field(..., description='The transfer amount in cents.')
    beneficiary_address_line1: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description="The beneficiary's address line 1."
    )
    beneficiary_address_line2: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description="The beneficiary's address line 2."
    )
    beneficiary_address_line3: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description="The beneficiary's address line 3."
    )
    beneficiary_name: constr(min_length=1, max_length=200) = Field(
        ..., description="The beneficiary's name."
    )
    external_account_id: Optional[str] = Field(
        None,
        description='The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number` and `routing_number` must be absent.',
    )
    message_to_recipient: constr(min_length=1, max_length=200) = Field(
        ..., description="The message that will show on the recipient's bank statement."
    )
    require_approval: Optional[bool] = Field(
        None,
        description='Whether the transfer requires explicit approval via the dashboard or API.',
    )
    routing_number: Optional[constr(min_length=9, max_length=9)] = Field(
        None,
        description="The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.",
    )


class CreateAnAccountNumberParameters(BaseModel):
    account_id: str = Field(
        ..., description='The Account the Account Number should belong to.'
    )
    name: constr(min_length=1, max_length=200) = Field(
        ..., description='The name you choose for the Account Number.'
    )


class CreateAnAccountParameters(BaseModel):
    entity_id: Optional[str] = Field(
        None, description='The identifier for the Entity that will own the Account.'
    )
    informational_entity_id: Optional[str] = Field(
        None,
        description='The identifier of an Entity that, while not owning the Account, is associated with its activity. Its relationship to your group must be `informational`.',
    )
    name: constr(min_length=1, max_length=200) = Field(
        ..., description='The name you choose for the Account.'
    )


class CreateAnAccountTransferParameters(BaseModel):
    account_id: str = Field(
        ..., description='The identifier for the account that will send the transfer.'
    )
    amount: conint(ge=1) = Field(
        ...,
        description='The transfer amount in the minor unit of the account currency. For dollars, for example, this is cents.',
    )
    description: constr(min_length=1, max_length=200) = Field(
        ..., description='The description you choose to give the transfer.'
    )
    destination_account_id: str = Field(
        ...,
        description='The identifier for the account that will receive the transfer.',
    )
    require_approval: Optional[bool] = Field(
        None,
        description='Whether the transfer requires explicit approval via the dashboard or API.',
    )


class CreateAnAchPrenotificationParameters(BaseModel):
    account_number: constr(min_length=1, max_length=200) = Field(
        ..., description='The account number for the destination account.'
    )
    addendum: Optional[constr(min_length=1, max_length=80)] = Field(
        None, description='Additional information that will be sent to the recipient.'
    )
    company_descriptive_date: Optional[constr(min_length=1, max_length=6)] = Field(
        None, description='The description of the date of the transfer.'
    )
    company_discretionary_data: Optional[constr(min_length=1, max_length=20)] = Field(
        None, description='The data you choose to associate with the transfer.'
    )
    company_entry_description: Optional[constr(min_length=1, max_length=10)] = Field(
        None,
        description='The description of the transfer you wish to be shown to the recipient.',
    )
    company_name: Optional[constr(min_length=1, max_length=16)] = Field(
        None, description='The name by which the recipient knows you.'
    )
    credit_debit_indicator: Optional[CreditDebitIndicator] = Field(
        None, description='Whether the Prenotification is for a future debit or credit.'
    )
    effective_date: Optional[date] = Field(
        None,
        description='The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    individual_id: Optional[constr(min_length=1, max_length=22)] = Field(
        None, description='Your identifer for the transfer recipient.'
    )
    individual_name: Optional[constr(min_length=1, max_length=22)] = Field(
        None,
        description="The name of the transfer recipient. This value is information and not verified by the recipient's bank.",
    )
    routing_number: constr(min_length=9, max_length=9) = Field(
        ...,
        description="The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.",
    )
    standard_entry_class_code: Optional[StandardEntryClassCode] = Field(
        None,
        description='The Standard Entry Class (SEC) code to use for the ACH Prenotification.',
    )


class Reason1(Enum):
    authorization_revoked_by_customer = 'authorization_revoked_by_customer'
    payment_stopped = 'payment_stopped'
    customer_advised_unauthorized_improper_ineligible_or_incomplete = (
        'customer_advised_unauthorized_improper_ineligible_or_incomplete'
    )
    representative_payee_deceased_or_unable_to_continue_in_that_capacity = (
        'representative_payee_deceased_or_unable_to_continue_in_that_capacity'
    )
    beneficiary_or_account_holder_deceased = 'beneficiary_or_account_holder_deceased'
    credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver'
    duplicate_entry = 'duplicate_entry'
    corporate_customer_advised_not_authorized = (
        'corporate_customer_advised_not_authorized'
    )


class CreateAnAchReturnParameters(BaseModel):
    reason: Reason1 = Field(
        ...,
        description='The reason why this transfer will be returned. The most usual return codes are `payment_stopped` for debits and `credit_entry_refused_by_receiver` for credits.',
    )
    transaction_id: str = Field(
        ...,
        description='The transaction identifier of the Inbound ACH Transfer to return to the originating financial institution.',
    )


class CreateAnAchTransferParameters(BaseModel):
    account_id: str = Field(
        ...,
        description='The Increase identifier for the account that will send the transfer.',
    )
    account_number: Optional[constr(min_length=1, max_length=17)] = Field(
        None, description='The account number for the destination account.'
    )
    addendum: Optional[constr(min_length=1, max_length=80)] = Field(
        None,
        description='Additional information that will be sent to the recipient. This is included in the transfer data sent to the receiving bank.',
    )
    amount: int = Field(
        ...,
        description='The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.',
    )
    company_descriptive_date: Optional[constr(min_length=1, max_length=6)] = Field(
        None,
        description='The description of the date of the transfer, usually in the format `YYYYMMDD`. This is included in the transfer data sent to the receiving bank.',
    )
    company_discretionary_data: Optional[constr(min_length=1, max_length=20)] = Field(
        None,
        description='The data you choose to associate with the transfer. This is included in the transfer data sent to the receiving bank.',
    )
    company_entry_description: Optional[constr(min_length=1, max_length=10)] = Field(
        None,
        description='A description of the transfer. This is included in the transfer data sent to the receiving bank.',
    )
    company_name: Optional[constr(min_length=1, max_length=16)] = Field(
        None,
        description='The name by which the recipient knows you. This is included in the transfer data sent to the receiving bank.',
    )
    effective_date: Optional[date] = Field(
        None,
        description='The transfer effective date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.',
    )
    external_account_id: Optional[str] = Field(
        None,
        description='The ID of an External Account to initiate a transfer to. If this parameter is provided, `account_number`, `routing_number`, and `funding` must be absent.',
    )
    funding: Optional[Funding] = Field(
        None, description='The type of the account to which the transfer will be sent.'
    )
    individual_id: Optional[constr(min_length=1, max_length=15)] = Field(
        None, description='Your identifer for the transfer recipient.'
    )
    individual_name: Optional[constr(min_length=1, max_length=22)] = Field(
        None,
        description="The name of the transfer recipient. This value is informational and not verified by the recipient's bank.",
    )
    require_approval: Optional[bool] = Field(
        None,
        description='Whether the transfer requires explicit approval via the dashboard or API.',
    )
    routing_number: Optional[constr(min_length=9, max_length=9)] = Field(
        None,
        description="The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.",
    )
    standard_entry_class_code: Optional[StandardEntryClassCode] = Field(
        None, description='The Standard Entry Class (SEC) code to use for the transfer.'
    )
    statement_descriptor: constr(min_length=1, max_length=200) = Field(
        ...,
        description='A description you choose to give the transfer. This will be saved with the transfer details, displayed in the dashboard, and returned by the API. If `individual_name` and `company_name` are not explicitly set by this API, the `statement_descriptor` will be sent in those fields to the receiving bank to help the customer recognize the transfer. You are highly encouraged to pass `individual_name` and `company_name` instead of relying on this fallback.',
    )


class Address(BaseModel):
    city: constr(min_length=1, max_length=200) = Field(
        ..., description='The city of the address.'
    )
    line1: constr(min_length=1, max_length=200) = Field(
        ...,
        description='The first line of the address. This is usually the street number and street.',
    )
    line2: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The second line of the address. This might be the floor or room number.',
    )
    state: constr(min_length=1, max_length=200) = Field(
        ...,
        description='The two-letter United States Postal Service (USPS) abbreviation for the state of the address.',
    )
    zip: constr(min_length=1, max_length=200) = Field(
        ..., description='The ZIP code of the address.'
    )


class DriversLicense(BaseModel):
    expiration_date: date = Field(
        ..., description="The driver's license's expiration date in YYYY-MM-DD format."
    )
    file_id: str = Field(
        ..., description="The identifier of the File containing the driver's license."
    )
    state: constr(min_length=1, max_length=200) = Field(
        ..., description="The state that issued the provided driver's license."
    )


class Method(Enum):
    social_security_number = 'social_security_number'
    individual_taxpayer_identification_number = (
        'individual_taxpayer_identification_number'
    )
    passport = 'passport'
    drivers_license = 'drivers_license'
    other = 'other'


class Other(BaseModel):
    country: constr(min_length=1, max_length=200) = Field(
        ...,
        description='The two-character ISO 3166-1 code representing the country that issued the document.',
    )
    description: constr(min_length=1, max_length=200) = Field(
        ..., description='A description of the document submitted.'
    )
    expiration_date: Optional[date] = Field(
        None, description="The document's expiration date in YYYY-MM-DD format."
    )
    file_id: str = Field(
        ..., description='The identifier of the File containing the document.'
    )


class Passport(BaseModel):
    country: constr(min_length=1, max_length=200) = Field(
        ..., description='The country that issued the passport.'
    )
    expiration_date: date = Field(
        ..., description="The passport's expiration date in YYYY-MM-DD format."
    )
    file_id: str = Field(
        ..., description='The identifier of the File containing the passport.'
    )


class Identification(BaseModel):
    drivers_license: Optional[DriversLicense] = Field(
        None,
        description="Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
    )
    method: Method = Field(
        ...,
        description="A method that can be used to verify the individual's identity.",
    )
    number: constr(min_length=4, max_length=200) = Field(
        ...,
        description="An identification number that can be used to verify the individual's identity, such as a social security number.",
    )
    other: Optional[Other] = Field(
        None,
        description='Information about the identification document provided. Required if `method` is equal to `other`.',
    )
    passport: Optional[Passport] = Field(
        None,
        description='Information about the passport used for identification. Required if `method` is equal to `passport`.',
    )


class Individual(BaseModel):
    address: Address = Field(..., description="The individual's address.")
    confirmed_no_us_tax_id: Optional[bool] = Field(
        None,
        description="The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
    )
    date_of_birth: date = Field(
        ..., description="The person's date of birth in YYYY-MM-DD format."
    )
    identification: Identification = Field(
        ..., description="A means of verifying the person's identity."
    )
    name: constr(min_length=1, max_length=200) = Field(
        ..., description="The person's legal name."
    )


class Prong(Enum):
    ownership = 'ownership'
    control = 'control'


class BeneficialOwner(BaseModel):
    company_title: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description="This person's role or title within the entity."
    )
    individual: Individual = Field(
        ..., description='Personal details for the beneficial owner.'
    )
    prong: Prong = Field(
        ...,
        description='Why this person is considered a beneficial owner of the entity.',
    )


class Corporation(BaseModel):
    address: Address = Field(..., description="The corporation's address.")
    beneficial_owners: List[BeneficialOwner] = Field(
        ...,
        description='The identifying details of anyone controlling or owning 25% or more of the corporation.',
    )
    incorporation_state: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description="The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.",
    )
    name: constr(min_length=1, max_length=200) = Field(
        ..., description='The legal name of the corporation.'
    )
    tax_identifier: constr(min_length=1, max_length=200) = Field(
        ..., description='The Employer Identification Number (EIN) for the corporation.'
    )
    website: Optional[str] = Field(None, description='The website of the corporation.')


class Identification1(BaseModel):
    drivers_license: Optional[DriversLicense] = Field(
        None,
        description="Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
    )
    method: Method = Field(
        ...,
        description="A method that can be used to verify the individual's identity.",
    )
    number: constr(min_length=4, max_length=200) = Field(
        ...,
        description="An identification number that can be used to verify the individual's identity, such as a social security number.",
    )
    other: Optional[Other] = Field(
        None,
        description='Information about the identification document provided. Required if `method` is equal to `other`.',
    )
    passport: Optional[Passport] = Field(
        None,
        description='Information about the passport used for identification. Required if `method` is equal to `passport`.',
    )


class Individual1(BaseModel):
    address: Address = Field(..., description="The individual's address.")
    confirmed_no_us_tax_id: Optional[bool] = Field(
        None,
        description="The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
    )
    date_of_birth: date = Field(
        ..., description="The person's date of birth in YYYY-MM-DD format."
    )
    identification: Identification1 = Field(
        ..., description="A means of verifying the person's identity."
    )
    name: constr(min_length=1, max_length=200) = Field(
        ..., description="The person's legal name."
    )


class Joint(BaseModel):
    individuals: List[Individual1] = Field(
        ..., description='The two individuals that share control of the entity.'
    )
    name: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The name of the joint entity.'
    )


class Identification2(BaseModel):
    drivers_license: Optional[DriversLicense] = Field(
        None,
        description="Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
    )
    method: Method = Field(
        ...,
        description="A method that can be used to verify the individual's identity.",
    )
    number: constr(min_length=4, max_length=200) = Field(
        ...,
        description="An identification number that can be used to verify the individual's identity, such as a social security number.",
    )
    other: Optional[Other] = Field(
        None,
        description='Information about the identification document provided. Required if `method` is equal to `other`.',
    )
    passport: Optional[Passport] = Field(
        None,
        description='Information about the passport used for identification. Required if `method` is equal to `passport`.',
    )


class NaturalPerson(BaseModel):
    address: Address = Field(..., description="The individual's address.")
    confirmed_no_us_tax_id: Optional[bool] = Field(
        None,
        description="The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
    )
    date_of_birth: date = Field(
        ..., description="The person's date of birth in YYYY-MM-DD format."
    )
    identification: Identification2 = Field(
        ..., description="A means of verifying the person's identity."
    )
    name: constr(min_length=1, max_length=200) = Field(
        ..., description="The person's legal name."
    )


class Relationship(Enum):
    affiliated = 'affiliated'
    informational = 'informational'
    unaffiliated = 'unaffiliated'


class Structure(Enum):
    corporation = 'corporation'
    natural_person = 'natural_person'
    joint = 'joint'
    trust = 'trust'


class SupplementalDocument(BaseModel):
    file_id: str = Field(
        ..., description='The identifier of the File containing the document.'
    )


class Category(Enum):
    revocable = 'revocable'
    irrevocable = 'irrevocable'


class Identification3(BaseModel):
    drivers_license: Optional[DriversLicense] = Field(
        None,
        description="Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
    )
    method: Method = Field(
        ...,
        description="A method that can be used to verify the individual's identity.",
    )
    number: constr(min_length=4, max_length=200) = Field(
        ...,
        description="An identification number that can be used to verify the individual's identity, such as a social security number.",
    )
    other: Optional[Other] = Field(
        None,
        description='Information about the identification document provided. Required if `method` is equal to `other`.',
    )
    passport: Optional[Passport] = Field(
        None,
        description='Information about the passport used for identification. Required if `method` is equal to `passport`.',
    )


class Grantor(BaseModel):
    address: Address = Field(..., description="The individual's address.")
    confirmed_no_us_tax_id: Optional[bool] = Field(
        None,
        description="The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
    )
    date_of_birth: date = Field(
        ..., description="The person's date of birth in YYYY-MM-DD format."
    )
    identification: Identification3 = Field(
        ..., description="A means of verifying the person's identity."
    )
    name: constr(min_length=1, max_length=200) = Field(
        ..., description="The person's legal name."
    )


class Identification4(BaseModel):
    drivers_license: Optional[DriversLicense] = Field(
        None,
        description="Information about the United States driver's license used for identification. Required if `method` is equal to `drivers_license`.",
    )
    method: Method = Field(
        ...,
        description="A method that can be used to verify the individual's identity.",
    )
    number: constr(min_length=4, max_length=200) = Field(
        ...,
        description="An identification number that can be used to verify the individual's identity, such as a social security number.",
    )
    other: Optional[Other] = Field(
        None,
        description='Information about the identification document provided. Required if `method` is equal to `other`.',
    )
    passport: Optional[Passport] = Field(
        None,
        description='Information about the passport used for identification. Required if `method` is equal to `passport`.',
    )


class Individual2(BaseModel):
    address: Address = Field(..., description="The individual's address.")
    confirmed_no_us_tax_id: Optional[bool] = Field(
        None,
        description="The identification method for an individual can only be a passport, driver's license, or other document if you've confirmed the individual does not have a US tax id (either a Social Security Number or Individual Taxpayer Identification Number).",
    )
    date_of_birth: date = Field(
        ..., description="The person's date of birth in YYYY-MM-DD format."
    )
    identification: Identification4 = Field(
        ..., description="A means of verifying the person's identity."
    )
    name: constr(min_length=1, max_length=200) = Field(
        ..., description="The person's legal name."
    )


class Structure1(Enum):
    individual = 'individual'


class Trustee(BaseModel):
    individual: Optional[Individual2] = Field(
        None,
        description='Details of the individual trustee. Required when the trustee `structure` is equal to `individual`.',
    )
    structure: Structure1 = Field(..., description='The structure of the trustee.')


class Trust(BaseModel):
    address: Address = Field(..., description="The trust's address.")
    category: Category = Field(
        ...,
        description='Whether the trust is `revocable` or `irrevocable`. Irrevocable trusts require their own Employer Identification Number. Revocable trusts require information about the individual `grantor` who created the trust.',
    )
    formation_document_file_id: Optional[str] = Field(
        None,
        description='The identifier of the File containing the formation document of the trust.',
    )
    formation_state: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.',
    )
    grantor: Optional[Grantor] = Field(
        None,
        description='The grantor of the trust. Required if `category` is equal to `revocable`.',
    )
    name: constr(min_length=1, max_length=200) = Field(
        ..., description='The legal name of the trust.'
    )
    tax_identifier: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The Employer Identification Number (EIN) for the trust. Required if `category` is equal to `irrevocable`.',
    )
    trustees: List[Trustee] = Field(..., description='The trustees of the trust.')


class CreateAnEntityParameters(BaseModel):
    corporation: Optional[Corporation] = Field(
        None,
        description='Details of the corporation entity to create. Required if `structure` is equal to `corporation`.',
    )
    description: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The description you choose to give the entity.'
    )
    joint: Optional[Joint] = Field(
        None,
        description='Details of the joint entity to create. Required if `structure` is equal to `joint`.',
    )
    natural_person: Optional[NaturalPerson] = Field(
        None,
        description='Details of the natural person entity to create. Required if `structure` is equal to `natural_person`. Natural people entities should be submitted with `social_security_number` or `individual_taxpayer_identification_number` identification methods.',
    )
    relationship: Relationship = Field(
        ..., description='The relationship between your group and the entity.'
    )
    structure: Structure = Field(..., description='The type of Entity to create.')
    supplemental_documents: Optional[List[SupplementalDocument]] = Field(
        None, description='Additional documentation associated with the entity.'
    )
    trust: Optional[Trust] = Field(
        None,
        description='Details of the trust entity to create. Required if `structure` is equal to `trust`.',
    )


class SelectedEventCategory(Enum):
    account_created = 'account.created'
    account_updated = 'account.updated'
    account_number_created = 'account_number.created'
    account_number_updated = 'account_number.updated'
    account_statement_created = 'account_statement.created'
    account_transfer_created = 'account_transfer.created'
    account_transfer_updated = 'account_transfer.updated'
    ach_prenotification_created = 'ach_prenotification.created'
    ach_prenotification_updated = 'ach_prenotification.updated'
    ach_transfer_created = 'ach_transfer.created'
    ach_transfer_updated = 'ach_transfer.updated'
    card_created = 'card.created'
    card_updated = 'card.updated'
    card_dispute_created = 'card_dispute.created'
    card_dispute_updated = 'card_dispute.updated'
    check_deposit_created = 'check_deposit.created'
    check_deposit_updated = 'check_deposit.updated'
    check_transfer_created = 'check_transfer.created'
    check_transfer_updated = 'check_transfer.updated'
    declined_transaction_created = 'declined_transaction.created'
    digital_wallet_token_created = 'digital_wallet_token.created'
    digital_wallet_token_updated = 'digital_wallet_token.updated'
    document_created = 'document.created'
    entity_created = 'entity.created'
    entity_updated = 'entity.updated'
    external_account_created = 'external_account.created'
    file_created = 'file.created'
    group_updated = 'group.updated'
    group_heartbeat = 'group.heartbeat'
    inbound_ach_transfer_return_created = 'inbound_ach_transfer_return.created'
    inbound_ach_transfer_return_updated = 'inbound_ach_transfer_return.updated'
    inbound_wire_drawdown_request_created = 'inbound_wire_drawdown_request.created'
    oauth_connection_created = 'oauth_connection.created'
    oauth_connection_deactivated = 'oauth_connection.deactivated'
    pending_transaction_created = 'pending_transaction.created'
    pending_transaction_updated = 'pending_transaction.updated'
    real_time_decision_card_authorization_requested = (
        'real_time_decision.card_authorization_requested'
    )
    real_time_decision_digital_wallet_token_requested = (
        'real_time_decision.digital_wallet_token_requested'
    )
    real_time_decision_digital_wallet_authentication_requested = (
        'real_time_decision.digital_wallet_authentication_requested'
    )
    real_time_payments_transfer_created = 'real_time_payments_transfer.created'
    real_time_payments_transfer_updated = 'real_time_payments_transfer.updated'
    real_time_payments_request_for_payment_created = (
        'real_time_payments_request_for_payment.created'
    )
    real_time_payments_request_for_payment_updated = (
        'real_time_payments_request_for_payment.updated'
    )
    transaction_created = 'transaction.created'
    wire_drawdown_request_created = 'wire_drawdown_request.created'
    wire_drawdown_request_updated = 'wire_drawdown_request.updated'
    wire_transfer_created = 'wire_transfer.created'
    wire_transfer_updated = 'wire_transfer.updated'


class CreateAnEventSubscriptionParameters(BaseModel):
    selected_event_category: Optional[SelectedEventCategory] = Field(
        None,
        description='If specified, this subscription will only receive webhooks for Events with the specified `category`.',
    )
    shared_secret: Optional[constr(min_length=1, max_length=100)] = Field(
        None,
        description='The key that will be used to sign webhooks. If no value is passed, a random string will be used as default.',
    )
    url: str = Field(..., description="The URL you'd like us to send webhooks to.")


class Funding2(Enum):
    checking = 'checking'
    savings = 'savings'
    other = 'other'


class CreateAnExternalAccountParameters(BaseModel):
    account_number: constr(min_length=1, max_length=17) = Field(
        ..., description='The account number for the destination account.'
    )
    description: constr(min_length=1, max_length=200) = Field(
        ..., description='The name you choose for the Account.'
    )
    funding: Optional[Funding2] = Field(
        None, description='The type of the destination account. Defaults to `checking`.'
    )
    routing_number: constr(min_length=9, max_length=9) = Field(
        ...,
        description="The American Bankers' Association (ABA) Routing Transit Number (RTN) for the destination account.",
    )


class Reason2(Enum):
    ach_route_canceled = 'ach_route_canceled'
    ach_route_disabled = 'ach_route_disabled'
    breaches_limit = 'breaches_limit'
    credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver'
    duplicate_return = 'duplicate_return'
    entity_not_active = 'entity_not_active'
    transaction_not_allowed = 'transaction_not_allowed'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    no_ach_route = 'no_ach_route'
    originator_request = 'originator_request'


class AchDecline(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    originator_company_descriptive_date: str = Field(..., description='')
    originator_company_discretionary_data: str = Field(..., description='')
    originator_company_id: str = Field(..., description='')
    originator_company_name: str = Field(..., description='')
    reason: Reason2 = Field(..., description='Why the ACH transfer was declined.')
    receiver_id_number: str = Field(..., description='')
    receiver_name: str = Field(..., description='')
    trace_number: str = Field(..., description='')


class Network2(Enum):
    visa = 'visa'


class ElectronicCommerceIndicator(Enum):
    mail_phone_order = 'mail_phone_order'
    recurring = 'recurring'
    installment = 'installment'
    unknown_mail_phone_order = 'unknown_mail_phone_order'
    secure_electronic_commerce = 'secure_electronic_commerce'
    non_authenticated_security_transaction_at_3ds_capable_merchant = (
        'non_authenticated_security_transaction_at_3ds_capable_merchant'
    )
    non_authenticated_security_transaction = 'non_authenticated_security_transaction'
    non_secure_transaction = 'non_secure_transaction'


class PointOfServiceEntryMode(Enum):
    manual = 'manual'
    magnetic_stripe_no_cvv = 'magnetic_stripe_no_cvv'
    optical_code = 'optical_code'
    integrated_circuit_card = 'integrated_circuit_card'
    contactless = 'contactless'
    credential_on_file = 'credential_on_file'
    magnetic_stripe = 'magnetic_stripe'
    contactless_magnetic_stripe = 'contactless_magnetic_stripe'
    integrated_circuit_card_no_cvv = 'integrated_circuit_card_no_cvv'


class Visa(BaseModel):
    electronic_commerce_indicator: ElectronicCommerceIndicator = Field(
        ...,
        description="For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
    )
    point_of_service_entry_mode: PointOfServiceEntryMode = Field(
        ...,
        description="The method used to enter the cardholder's primary account number and card expiration date",
    )


class NetworkDetails(BaseModel):
    visa: Visa = Field(
        ..., description='Fields specific to the `visa` network', title='Visa'
    )


class Reason3(Enum):
    card_not_active = 'card_not_active'
    entity_not_active = 'entity_not_active'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    cvv2_mismatch = 'cvv2_mismatch'
    transaction_not_allowed = 'transaction_not_allowed'
    breaches_limit = 'breaches_limit'
    webhook_declined = 'webhook_declined'
    webhook_timed_out = 'webhook_timed_out'
    declined_by_stand_in_processing = 'declined_by_stand_in_processing'


class CardDecline(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    digital_wallet_token_id: str = Field(
        ...,
        description='If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.',
    )
    merchant_acceptor_id: str = Field(
        ...,
        description='The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.',
    )
    merchant_category_code: str = Field(
        ...,
        description='The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.',
    )
    merchant_city: str = Field(..., description='The city the merchant resides in.')
    merchant_country: str = Field(
        ..., description='The country the merchant resides in.'
    )
    merchant_descriptor: str = Field(
        ...,
        description='The merchant descriptor of the merchant the card is transacting with.',
    )
    merchant_state: str = Field(..., description='The state the merchant resides in.')
    network: Network2 = Field(
        ..., description='The payment network used to process this card authorization'
    )
    network_details: NetworkDetails = Field(
        ..., description='Fields specific to the `network`', title='Network Details'
    )
    real_time_decision_id: str = Field(
        ...,
        description='The identifier of the Real-Time Decision sent to approve or decline this transaction.',
    )
    reason: Reason3 = Field(..., description='Why the transaction was declined.')


class CardRouteDecline(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class Category1(Enum):
    ach_decline = 'ach_decline'
    card_decline = 'card_decline'
    check_decline = 'check_decline'
    inbound_real_time_payments_transfer_decline = (
        'inbound_real_time_payments_transfer_decline'
    )
    international_ach_decline = 'international_ach_decline'
    card_route_decline = 'card_route_decline'
    other = 'other'


class Reason4(Enum):
    ach_route_canceled = 'ach_route_canceled'
    ach_route_disabled = 'ach_route_disabled'
    breaches_limit = 'breaches_limit'
    entity_not_active = 'entity_not_active'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    unable_to_locate_account = 'unable_to_locate_account'
    unable_to_process = 'unable_to_process'
    refer_to_image = 'refer_to_image'
    stop_payment_requested = 'stop_payment_requested'
    returned = 'returned'


class CheckDecline(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    auxiliary_on_us: str = Field(..., description='')
    reason: Reason4 = Field(..., description='Why the check was declined.')


class Reason5(Enum):
    account_number_canceled = 'account_number_canceled'
    account_number_disabled = 'account_number_disabled'
    group_locked = 'group_locked'
    entity_not_active = 'entity_not_active'
    real_time_payments_not_enabled = 'real_time_payments_not_enabled'


class InboundRealTimePaymentsTransferDecline(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    creditor_name: str = Field(
        ...,
        description='The name the sender of the transfer specified as the recipient of the transfer.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer\'s currency. This will always be "USD" for a Real Time Payments transfer.',
    )
    debtor_account_number: str = Field(
        ..., description='The account number of the account that sent the transfer.'
    )
    debtor_name: str = Field(
        ..., description='The name provided by the sender of the transfer.'
    )
    debtor_routing_number: str = Field(
        ..., description='The routing number of the account that sent the transfer.'
    )
    reason: Reason5 = Field(..., description='Why the transfer was declined.')
    remittance_information: str = Field(
        ..., description='Additional information included with the transfer.'
    )
    transaction_identification: str = Field(
        ...,
        description='The Real Time Payments network identification of the declined transfer.',
    )


class InternationalAchDecline(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    destination_country_code: str = Field(..., description='')
    destination_currency_code: str = Field(..., description='')
    foreign_exchange_indicator: str = Field(..., description='')
    foreign_exchange_reference: str = Field(..., description='')
    foreign_exchange_reference_indicator: str = Field(..., description='')
    foreign_payment_amount: int = Field(..., description='')
    foreign_trace_number: str = Field(..., description='')
    international_transaction_type_code: str = Field(..., description='')
    originating_currency_code: str = Field(..., description='')
    originating_depository_financial_institution_branch_country: str = Field(
        ..., description=''
    )
    originating_depository_financial_institution_id: str = Field(..., description='')
    originating_depository_financial_institution_id_qualifier: str = Field(
        ..., description=''
    )
    originating_depository_financial_institution_name: str = Field(..., description='')
    originator_city: str = Field(..., description='')
    originator_company_entry_description: str = Field(..., description='')
    originator_country: str = Field(..., description='')
    originator_identification: str = Field(..., description='')
    originator_name: str = Field(..., description='')
    originator_postal_code: str = Field(..., description='')
    originator_state_or_province: str = Field(..., description='')
    originator_street_address: str = Field(..., description='')
    payment_related_information: str = Field(..., description='')
    payment_related_information2: str = Field(..., description='')
    receiver_city: str = Field(..., description='')
    receiver_country: str = Field(..., description='')
    receiver_identification_number: str = Field(..., description='')
    receiver_postal_code: str = Field(..., description='')
    receiver_state_or_province: str = Field(..., description='')
    receiver_street_address: str = Field(..., description='')
    receiving_company_or_individual_name: str = Field(..., description='')
    receiving_depository_financial_institution_country: str = Field(..., description='')
    receiving_depository_financial_institution_id: str = Field(..., description='')
    receiving_depository_financial_institution_id_qualifier: str = Field(
        ..., description=''
    )
    receiving_depository_financial_institution_name: str = Field(..., description='')
    trace_number: str = Field(..., description='')


class Source(BaseModel):
    ach_decline: AchDecline = Field(
        ...,
        description='A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.',
        examples=[
            {
                'amount': 1750,
                'originator_company_descriptive_date': None,
                'originator_company_discretionary_data': None,
                'originator_company_id': '0987654321',
                'originator_company_name': 'BIG BANK',
                'reason': 'insufficient_funds',
                'receiver_id_number': '12345678900',
                'receiver_name': 'IAN CREASE',
                'trace_number': '021000038461022',
            }
        ],
        title='ACH Decline',
    )
    card_decline: CardDecline = Field(
        ...,
        description='A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.',
        examples=[
            {
                'amount': -1000,
                'currency': 'USD',
                'digital_wallet_token_id': None,
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
                'network': 'visa',
                'network_details': {
                    'visa': {
                        'electronic_commerce_indicator': 'secure_electronic_commerce',
                        'point_of_service_entry_mode': 'manual',
                    }
                },
                'real_time_decision_id': None,
                'reason': 'insufficient_funds',
            }
        ],
        title='Card Decline',
    )
    card_route_decline: CardRouteDecline = Field(
        ...,
        description='A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.',
        examples=[
            {
                'amount': -1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Decline',
    )
    category: Category1 = Field(
        ...,
        description='The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    check_decline: CheckDecline = Field(
        ...,
        description='A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.',
        examples=[
            {
                'amount': -1000,
                'auxiliary_on_us': '99999',
                'reason': 'insufficient_funds',
            }
        ],
        title='Check Decline',
    )
    inbound_real_time_payments_transfer_decline: (
        InboundRealTimePaymentsTransferDecline
    ) = Field(
        ...,
        description='A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.',
        examples=[
            {
                'amount': 100,
                'creditor_name': 'Ian Crease',
                'currency': 'USD',
                'debtor_account_number': '987654321',
                'debtor_name': 'National Phonograph Company',
                'debtor_routing_number': '101050001',
                'reason': 'account_number_disabled',
                'remittance_information': 'Invoice 29582',
                'transaction_identification': '20220501234567891T1BSLZO01745013025',
            }
        ],
        title='Inbound Real Time Payments Transfer Decline',
    )
    international_ach_decline: InternationalAchDecline = Field(
        ...,
        description='A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.',
        examples=[
            {
                'amount': -1000,
                'destination_country_code': 'US',
                'destination_currency_code': 'USD',
                'foreign_exchange_indicator': 'fixed_to_fixed',
                'foreign_exchange_reference': None,
                'foreign_exchange_reference_indicator': 'blank',
                'foreign_payment_amount': 199,
                'foreign_trace_number': None,
                'international_transaction_type_code': 'internet_initiated',
                'originating_currency_code': 'USD',
                'originating_depository_financial_institution_branch_country': 'US',
                'originating_depository_financial_institution_id': '091000019',
                'originating_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'originating_depository_financial_institution_name': 'WELLS FARGO BANK',
                'originator_city': 'BERLIN',
                'originator_company_entry_description': 'RETRY PYMT',
                'originator_country': 'DE',
                'originator_identification': '770510487A',
                'originator_name': 'BERGHAIN',
                'originator_postal_code': '50825',
                'originator_state_or_province': None,
                'originator_street_address': 'Ruedersdorferstr. 7',
                'payment_related_information': None,
                'payment_related_information2': None,
                'receiver_city': 'BEVERLY HILLS',
                'receiver_country': 'US',
                'receiver_identification_number': '1018790279274',
                'receiver_postal_code': '90210',
                'receiver_state_or_province': 'CA',
                'receiver_street_address': '123 FAKE ST',
                'receiving_company_or_individual_name': 'IAN CREASE',
                'receiving_depository_financial_institution_country': 'US',
                'receiving_depository_financial_institution_id': '101050001',
                'receiving_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'receiving_depository_financial_institution_name': 'BLUE RIDGE BANK, NATIONAL ASSOCIATI',
                'trace_number': '010202909100090',
            }
        ],
        title='International ACH Decline',
    )


class Type14(Enum):
    declined_transaction = 'declined_transaction'


class DeclinedTransaction(BaseModel):
    account_id: str = Field(
        ...,
        description='The identifier for the Account the Declined Transaction belongs to.',
    )
    amount: int = Field(
        ...,
        description='The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.",
    )
    description: str = Field(
        ..., description='This is the description the vendor provides.'
    )
    id: str = Field(..., description='The Declined Transaction identifier.')
    route_id: str = Field(
        ...,
        description='The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.',
    )
    route_type: str = Field(
        ..., description='The type of the route this Declined Transaction came through.'
    )
    source: Source = Field(
        ...,
        description="This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.",
        examples=[
            {
                'ach_decline': {
                    'amount': 1750,
                    'originator_company_descriptive_date': None,
                    'originator_company_discretionary_data': None,
                    'originator_company_id': '0987654321',
                    'originator_company_name': 'BIG BANK',
                    'reason': 'insufficient_funds',
                    'receiver_id_number': '12345678900',
                    'receiver_name': 'IAN CREASE',
                    'trace_number': '021000038461022',
                },
                'category': 'ach_decline',
            }
        ],
        title='Declined Transaction Source',
    )
    type: Type14 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `declined_transaction`.",
    )


class DeclinedTransactionList(BaseModel):
    data: List[DeclinedTransaction] = Field(
        ..., description='The contents of the list.'
    )
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Status10(Enum):
    active = 'active'
    inactive = 'inactive'
    suspended = 'suspended'
    deactivated = 'deactivated'


class TokenRequestor(Enum):
    apple_pay = 'apple_pay'
    google_pay = 'google_pay'


class Type15(Enum):
    digital_wallet_token = 'digital_wallet_token'


class DigitalWalletToken1(BaseModel):
    card_id: str = Field(
        ...,
        description='The identifier for the Card this Digital Wallet Token belongs to.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card was created.',
    )
    id: str = Field(..., description='The Digital Wallet Token identifier.')
    status: Status10 = Field(
        ...,
        description='This indicates if payments can be made with the Digital Wallet Token.',
    )
    token_requestor: TokenRequestor = Field(
        ..., description='The digital wallet app being used.'
    )
    type: Type15 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `digital_wallet_token`.",
    )


class DigitalWalletTokenList(BaseModel):
    data: List[DigitalWalletToken1] = Field(
        ..., description='The contents of the list.'
    )
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Category2(Enum):
    form_1099_int = 'form_1099_int'


class Type16(Enum):
    document = 'document'


class Document(BaseModel):
    category: Category2 = Field(..., description='The type of document.')
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Document was created.',
    )
    entity_id: str = Field(
        ..., description='The identifier of the Entity the document was generated for.'
    )
    file_id: str = Field(
        ...,
        description="The identifier of the File containing the Document's contents.",
    )
    id: str = Field(..., description='The Document identifier.')
    type: Type16 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `document`.",
    )


class DocumentList(BaseModel):
    data: List[Document] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Address7(BaseModel):
    city: str = Field(..., description='The city of the address.')
    line1: str = Field(..., description='The first line of the address.')
    line2: str = Field(..., description='The second line of the address.')
    state: str = Field(
        ...,
        description='The two-letter United States Postal Service (USPS) abbreviation for the state of the address.',
    )
    zip: str = Field(..., description='The ZIP code of the address.')


class Identification5(BaseModel):
    method: Method = Field(
        ...,
        description="A method that can be used to verify the individual's identity.",
    )
    number_last4: str = Field(
        ...,
        description="The last 4 digits of the identification number that can be used to verify the individual's identity.",
    )


class Individual3(BaseModel):
    address: Address7 = Field(
        ...,
        description="The person's address.",
        examples=[
            {
                'city': 'New York',
                'line1': '33 Liberty Street',
                'line2': None,
                'state': 'NY',
                'zip': '10045',
            }
        ],
        title='Address',
    )
    date_of_birth: date = Field(
        ..., description="The person's date of birth in YYYY-MM-DD format."
    )
    identification: Identification5 = Field(
        ...,
        description="A means of verifying the person's identity.",
        title='Identification',
    )
    name: str = Field(..., description="The person's legal name.")


class BeneficialOwner1(BaseModel):
    company_title: str = Field(
        ..., description="This person's role or title within the entity."
    )
    individual: Individual3 = Field(
        ...,
        description='Personal details for the beneficial owner.',
        title='Individual',
    )
    prong: Prong = Field(
        ...,
        description='Why this person is considered a beneficial owner of the entity.',
    )


class Corporation1(BaseModel):
    address: Address7 = Field(
        ...,
        description="The corporation's address.",
        examples=[
            {
                'city': 'New York',
                'line1': '33 Liberty Street',
                'line2': None,
                'state': 'NY',
                'zip': '10045',
            }
        ],
        title='Address',
    )
    beneficial_owners: List[BeneficialOwner1] = Field(
        ...,
        description='The identifying details of anyone controlling or owning 25% or more of the corporation.',
    )
    incorporation_state: str = Field(
        ...,
        description="The two-letter United States Postal Service (USPS) abbreviation for the corporation's state of incorporation.",
    )
    name: str = Field(..., description='The legal name of the corporation.')
    tax_identifier: str = Field(
        ..., description='The Employer Identification Number (EIN) for the corporation.'
    )
    website: str = Field(..., description='The website of the corporation.')


class Identification6(BaseModel):
    method: Method = Field(
        ...,
        description="A method that can be used to verify the individual's identity.",
    )
    number_last4: str = Field(
        ...,
        description="The last 4 digits of the identification number that can be used to verify the individual's identity.",
    )


class Individual4(BaseModel):
    address: Address7 = Field(
        ...,
        description="The person's address.",
        examples=[
            {
                'city': 'New York',
                'line1': '33 Liberty Street',
                'line2': None,
                'state': 'NY',
                'zip': '10045',
            }
        ],
        title='Address',
    )
    date_of_birth: date = Field(
        ..., description="The person's date of birth in YYYY-MM-DD format."
    )
    identification: Identification6 = Field(
        ...,
        description="A means of verifying the person's identity.",
        title='Identification',
    )
    name: str = Field(..., description="The person's legal name.")


class Joint1(BaseModel):
    individuals: List[Individual4] = Field(
        ..., description='The two individuals that share control of the entity.'
    )
    name: str = Field(..., description="The entity's name.")


class Identification7(BaseModel):
    method: Method = Field(
        ...,
        description="A method that can be used to verify the individual's identity.",
    )
    number_last4: str = Field(
        ...,
        description="The last 4 digits of the identification number that can be used to verify the individual's identity.",
    )


class NaturalPerson1(BaseModel):
    address: Address7 = Field(
        ...,
        description="The person's address.",
        examples=[
            {
                'city': 'New York',
                'line1': '33 Liberty Street',
                'line2': None,
                'state': 'NY',
                'zip': '10045',
            }
        ],
        title='Address',
    )
    date_of_birth: date = Field(
        ..., description="The person's date of birth in YYYY-MM-DD format."
    )
    identification: Identification7 = Field(
        ...,
        description="A means of verifying the person's identity.",
        title='Identification',
    )
    name: str = Field(..., description="The person's legal name.")


class Structure2(Enum):
    corporation = 'corporation'
    natural_person = 'natural_person'
    joint = 'joint'
    trust = 'trust'


class SupplementalDocument1(BaseModel):
    file_id: str = Field(..., description='The File containing the document.')


class Category3(Enum):
    revocable = 'revocable'
    irrevocable = 'irrevocable'


class Identification8(BaseModel):
    method: Method = Field(
        ...,
        description="A method that can be used to verify the individual's identity.",
    )
    number_last4: str = Field(
        ...,
        description="The last 4 digits of the identification number that can be used to verify the individual's identity.",
    )


class Grantor1(BaseModel):
    address: Address7 = Field(
        ...,
        description="The person's address.",
        examples=[
            {
                'city': 'New York',
                'line1': '33 Liberty Street',
                'line2': None,
                'state': 'NY',
                'zip': '10045',
            }
        ],
        title='Address',
    )
    date_of_birth: date = Field(
        ..., description="The person's date of birth in YYYY-MM-DD format."
    )
    identification: Identification8 = Field(
        ...,
        description="A means of verifying the person's identity.",
        title='Identification',
    )
    name: str = Field(..., description="The person's legal name.")


class Identification9(BaseModel):
    method: Method = Field(
        ...,
        description="A method that can be used to verify the individual's identity.",
    )
    number_last4: str = Field(
        ...,
        description="The last 4 digits of the identification number that can be used to verify the individual's identity.",
    )


class Individual5(BaseModel):
    address: Address7 = Field(
        ...,
        description="The person's address.",
        examples=[
            {
                'city': 'New York',
                'line1': '33 Liberty Street',
                'line2': None,
                'state': 'NY',
                'zip': '10045',
            }
        ],
        title='Address',
    )
    date_of_birth: date = Field(
        ..., description="The person's date of birth in YYYY-MM-DD format."
    )
    identification: Identification9 = Field(
        ...,
        description="A means of verifying the person's identity.",
        title='Identification',
    )
    name: str = Field(..., description="The person's legal name.")


class Structure3(Enum):
    individual = 'individual'


class Trustee1(BaseModel):
    individual: Individual5 = Field(
        ...,
        description="The individual trustee of the trust. Will be present if the trustee's `structure` is equal to `individual`.",
        title='Individual',
    )
    structure: Structure3 = Field(
        ...,
        description='The structure of the trustee. Will always be equal to `individual`.',
    )


class Trust1(BaseModel):
    address: Address7 = Field(
        ...,
        description="The trust's address.",
        examples=[
            {
                'city': 'New York',
                'line1': '33 Liberty Street',
                'line2': None,
                'state': 'NY',
                'zip': '10045',
            }
        ],
        title='Address',
    )
    category: Category3 = Field(
        ..., description='Whether the trust is `revocable` or `irrevocable`.'
    )
    formation_document_file_id: str = Field(
        ...,
        description='The ID for the File containing the formation document of the trust.',
    )
    formation_state: str = Field(
        ...,
        description='The two-letter United States Postal Service (USPS) abbreviation for the state in which the trust was formed.',
    )
    grantor: Grantor1 = Field(
        ...,
        description='The grantor of the trust. Will be present if the `category` is `revocable`.',
        title='Individual',
    )
    name: str = Field(..., description="The trust's name")
    tax_identifier: str = Field(
        ..., description='The Employer Identification Number (EIN) of the trust itself.'
    )
    trustees: List[Trustee1] = Field(..., description='The trustees of the trust.')


class Type17(Enum):
    entity = 'entity'


class Entity(BaseModel):
    corporation: Corporation1 = Field(
        ...,
        description='Details of the corporation entity. Will be present if `structure` is equal to `corporation`.',
        title='Corporation',
    )
    description: str = Field(
        ..., description="The entity's description for display purposes."
    )
    id: str = Field(..., description="The entity's identifier.")
    joint: Joint1 = Field(
        ...,
        description='Details of the joint entity. Will be present if `structure` is equal to `joint`.',
        title='Joint',
    )
    natural_person: NaturalPerson1 = Field(
        ...,
        description='Details of the natural person entity. Will be present if `structure` is equal to `natural_person`.',
        title='Individual',
    )
    relationship: Relationship = Field(
        ..., description='The relationship between your group and the entity.'
    )
    structure: Structure2 = Field(..., description="The entity's legal structure.")
    supplemental_documents: List[SupplementalDocument1] = Field(
        ..., description='Additional documentation associated with the entity.'
    )
    trust: Trust1 = Field(
        ...,
        description='Details of the trust entity. Will be present if `structure` is equal to `trust`.',
        title='Trust',
    )
    type: Type17 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `entity`.",
    )


class EntityList(BaseModel):
    data: List[Entity] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Status11(Enum):
    integer_404 = 404


class Type18(Enum):
    api_method_not_found_error = 'api_method_not_found_error'


class Error1(BaseModel):
    detail: str
    status: Status11
    title: str
    type: Type18


class Status12(Enum):
    integer_403 = 403


class Type19(Enum):
    environment_mismatch_error = 'environment_mismatch_error'


class Error2(BaseModel):
    detail: str
    status: Status12
    title: str
    type: Type19


class Status13(Enum):
    integer_409 = 409


class Type20(Enum):
    idempotency_conflict_error = 'idempotency_conflict_error'


class Error3(BaseModel):
    detail: str
    status: Status13
    title: str
    type: Type20


class Status14(Enum):
    integer_422 = 422


class Type21(Enum):
    idempotency_unprocessable_error = 'idempotency_unprocessable_error'


class Error4(BaseModel):
    detail: str
    status: Status14
    title: str
    type: Type21


class Status15(Enum):
    integer_403 = 403


class Type22(Enum):
    insufficient_permissions_error = 'insufficient_permissions_error'


class Error5(BaseModel):
    detail: str
    status: Status15
    title: str
    type: Type22


class Status16(Enum):
    integer_500 = 500


class Type23(Enum):
    internal_server_error = 'internal_server_error'


class Error6(BaseModel):
    detail: str
    status: Status16
    title: str
    type: Type23


class Status17(Enum):
    integer_401 = 401


class Type24(Enum):
    invalid_api_key_error = 'invalid_api_key_error'


class Error7(BaseModel):
    detail: str
    status: Status17
    title: str
    type: Type24


class Status18(Enum):
    integer_409 = 409


class Type25(Enum):
    invalid_operation_error = 'invalid_operation_error'


class Error8(BaseModel):
    detail: str
    status: Status18
    title: str
    type: Type25


class Status19(Enum):
    integer_400 = 400


class Type26(Enum):
    invalid_parameters_error = 'invalid_parameters_error'


class Error9(BaseModel):
    detail: str
    errors: Optional[List[Dict[str, Any]]] = Field(
        None, description='All errors related to parsing the request parameters.'
    )
    status: Status19
    title: str
    type: Type26


class Type27(Enum):
    malformed_request_error = 'malformed_request_error'


class Error10(BaseModel):
    detail: str
    status: Status19
    title: str
    type: Type27


class Status21(Enum):
    integer_404 = 404


class Type28(Enum):
    object_not_found_error = 'object_not_found_error'


class Error11(BaseModel):
    detail: str
    status: Status21
    title: str
    type: Type28


class Status22(Enum):
    integer_403 = 403


class Type29(Enum):
    private_feature_error = 'private_feature_error'


class Error12(BaseModel):
    detail: str
    status: Status22
    title: str
    type: Type29


class Status23(Enum):
    integer_429 = 429


class Type30(Enum):
    rate_limited_error = 'rate_limited_error'


class Error13(BaseModel):
    detail: str
    retry_after: Optional[int] = Field(None, description='')
    status: Status23
    title: str
    type: Type30


class Error(
    RootModel[
        Union[
            Error1,
            Error2,
            Error3,
            Error4,
            Error5,
            Error6,
            Error7,
            Error8,
            Error9,
            Error10,
            Error11,
            Error12,
            Error13,
        ]
    ]
):
    root: Union[
        Error1,
        Error2,
        Error3,
        Error4,
        Error5,
        Error6,
        Error7,
        Error8,
        Error9,
        Error10,
        Error11,
        Error12,
        Error13,
    ]


class Category4(Enum):
    account_created = 'account.created'
    account_updated = 'account.updated'
    account_number_created = 'account_number.created'
    account_number_updated = 'account_number.updated'
    account_statement_created = 'account_statement.created'
    account_transfer_created = 'account_transfer.created'
    account_transfer_updated = 'account_transfer.updated'
    ach_prenotification_created = 'ach_prenotification.created'
    ach_prenotification_updated = 'ach_prenotification.updated'
    ach_transfer_created = 'ach_transfer.created'
    ach_transfer_updated = 'ach_transfer.updated'
    card_created = 'card.created'
    card_updated = 'card.updated'
    card_dispute_created = 'card_dispute.created'
    card_dispute_updated = 'card_dispute.updated'
    check_deposit_created = 'check_deposit.created'
    check_deposit_updated = 'check_deposit.updated'
    check_transfer_created = 'check_transfer.created'
    check_transfer_updated = 'check_transfer.updated'
    declined_transaction_created = 'declined_transaction.created'
    digital_wallet_token_created = 'digital_wallet_token.created'
    digital_wallet_token_updated = 'digital_wallet_token.updated'
    document_created = 'document.created'
    entity_created = 'entity.created'
    entity_updated = 'entity.updated'
    external_account_created = 'external_account.created'
    file_created = 'file.created'
    group_updated = 'group.updated'
    group_heartbeat = 'group.heartbeat'
    inbound_ach_transfer_return_created = 'inbound_ach_transfer_return.created'
    inbound_ach_transfer_return_updated = 'inbound_ach_transfer_return.updated'
    inbound_wire_drawdown_request_created = 'inbound_wire_drawdown_request.created'
    oauth_connection_created = 'oauth_connection.created'
    oauth_connection_deactivated = 'oauth_connection.deactivated'
    pending_transaction_created = 'pending_transaction.created'
    pending_transaction_updated = 'pending_transaction.updated'
    real_time_decision_card_authorization_requested = (
        'real_time_decision.card_authorization_requested'
    )
    real_time_decision_digital_wallet_token_requested = (
        'real_time_decision.digital_wallet_token_requested'
    )
    real_time_decision_digital_wallet_authentication_requested = (
        'real_time_decision.digital_wallet_authentication_requested'
    )
    real_time_payments_transfer_created = 'real_time_payments_transfer.created'
    real_time_payments_transfer_updated = 'real_time_payments_transfer.updated'
    real_time_payments_request_for_payment_created = (
        'real_time_payments_request_for_payment.created'
    )
    real_time_payments_request_for_payment_updated = (
        'real_time_payments_request_for_payment.updated'
    )
    transaction_created = 'transaction.created'
    wire_drawdown_request_created = 'wire_drawdown_request.created'
    wire_drawdown_request_updated = 'wire_drawdown_request.updated'
    wire_transfer_created = 'wire_transfer.created'
    wire_transfer_updated = 'wire_transfer.updated'


class Type31(Enum):
    event = 'event'


class Event(BaseModel):
    associated_object_id: str = Field(
        ..., description='The identifier of the object that generated this Event.'
    )
    associated_object_type: str = Field(
        ..., description='The type of the object that generated this Event.'
    )
    category: Category4 = Field(
        ...,
        description='The category of the Event. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    created_at: datetime = Field(..., description='The time the Event was created.')
    id: str = Field(..., description='The Event identifier.')
    type: Type31 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `event`.",
    )


class EventList(BaseModel):
    data: List[Event] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Status24(Enum):
    active = 'active'
    disabled = 'disabled'
    deleted = 'deleted'
    requires_attention = 'requires_attention'


class Type32(Enum):
    event_subscription = 'event_subscription'


class EventSubscription(BaseModel):
    created_at: datetime = Field(
        ..., description='The time the event subscription was created.'
    )
    id: str = Field(..., description='The event subscription identifier.')
    selected_event_category: SelectedEventCategory = Field(
        ...,
        description='If specified, this subscription will only receive webhooks for Events with the specified `category`.',
    )
    shared_secret: str = Field(
        ..., description='The key that will be used to sign webhooks.'
    )
    status: Status24 = Field(
        ...,
        description="This indicates if we'll send notifications to this subscription.",
    )
    type: Type32 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `event_subscription`.",
    )
    url: str = Field(..., description="The webhook url where we'll send notifications.")


class EventSubscriptionList(BaseModel):
    data: List[EventSubscription] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Status25(Enum):
    active = 'active'
    archived = 'archived'


class Type33(Enum):
    external_account = 'external_account'


class VerificationStatus(Enum):
    unverified = 'unverified'
    pending = 'pending'
    verified = 'verified'


class ExternalAccount(BaseModel):
    account_number: str = Field(..., description='The destination account number.')
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the External Account was created.',
    )
    description: str = Field(
        ..., description="The External Account's description for display purposes."
    )
    funding: Funding2 = Field(
        ..., description='The type of the account to which the transfer will be sent.'
    )
    id: str = Field(..., description="The External Account's identifier.")
    routing_number: str = Field(
        ...,
        description="The American Bankers' Association (ABA) Routing Transit Number (RTN).",
    )
    status: Status25 = Field(..., description="The External Account's status.")
    type: Type33 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `external_account`.",
    )
    verification_status: VerificationStatus = Field(
        ..., description='If you have verified ownership of the External Account.'
    )


class ExternalAccountList(BaseModel):
    data: List[ExternalAccount] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Direction(Enum):
    to_increase = 'to_increase'
    from_increase = 'from_increase'


class Purpose1(Enum):
    check_image_front = 'check_image_front'
    check_image_back = 'check_image_back'
    form_1099_int = 'form_1099_int'
    form_ss_4 = 'form_ss_4'
    identity_document = 'identity_document'
    increase_statement = 'increase_statement'
    other = 'other'
    trust_formation_document = 'trust_formation_document'
    digital_wallet_artwork = 'digital_wallet_artwork'
    digital_wallet_app_icon = 'digital_wallet_app_icon'
    entity_supplemental_document = 'entity_supplemental_document'


class Type34(Enum):
    file = 'file'


class File(BaseModel):
    created_at: datetime = Field(..., description='The time the File was created.')
    description: str = Field(..., description='A description of the File.')
    direction: Direction = Field(
        ...,
        description='Whether the File was generated by Increase or by you and sent to Increase.',
    )
    download_url: str = Field(
        ...,
        description='A URL from where the File can be downloaded at this point in time. The location of this URL may change over time.',
    )
    filename: str = Field(
        ...,
        description='The filename that was provided upon upload or generated by Increase.',
    )
    id: str = Field(..., description="The File's identifier.")
    purpose: Purpose1 = Field(
        ...,
        description='What the File will be used for. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    type: Type34 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `file`.",
    )


class FileList(BaseModel):
    data: List[File] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class AchDebitStatus(Enum):
    disabled = 'disabled'
    enabled = 'enabled'


class ActivationStatus(Enum):
    unactivated = 'unactivated'
    activated = 'activated'


class Type35(Enum):
    group = 'group'


class Group(BaseModel):
    ach_debit_status: AchDebitStatus = Field(
        ..., description='If the Group is allowed to create ACH debits.'
    )
    activation_status: ActivationStatus = Field(
        ..., description='If the Group is activated or not.'
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) time at which the Group was created.',
    )
    id: str = Field(..., description='The Group identifier.')
    type: Type35 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `group`.",
    )


class Reason6(Enum):
    authorization_revoked_by_customer = 'authorization_revoked_by_customer'
    payment_stopped = 'payment_stopped'
    customer_advised_unauthorized_improper_ineligible_or_incomplete = (
        'customer_advised_unauthorized_improper_ineligible_or_incomplete'
    )
    representative_payee_deceased_or_unable_to_continue_in_that_capacity = (
        'representative_payee_deceased_or_unable_to_continue_in_that_capacity'
    )
    beneficiary_or_account_holder_deceased = 'beneficiary_or_account_holder_deceased'
    credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver'
    duplicate_entry = 'duplicate_entry'
    corporate_customer_advised_not_authorized = (
        'corporate_customer_advised_not_authorized'
    )


class Status26(Enum):
    pending_submitting = 'pending_submitting'
    submitted = 'submitted'


class Submission2(BaseModel):
    submitted_at: datetime = Field(
        ..., description='When the ACH transfer return was sent to FedACH.'
    )
    trace_number: str = Field(..., description='The trace number for the submission.')


class Type36(Enum):
    inbound_ach_transfer_return = 'inbound_ach_transfer_return'


class InboundAchTransferReturn(BaseModel):
    id: str = Field(..., description='The ID of the Inbound ACH Transfer Return.')
    inbound_ach_transfer_transaction_id: str = Field(
        ..., description='The ID for the Transaction that is being returned.'
    )
    reason: Reason6 = Field(
        ...,
        description='The reason why this transfer will be returned. This is sent to the initiating bank.',
    )
    status: Status26 = Field(..., description='The lifecycle status of the transfer.')
    submission: Submission2 = Field(
        ...,
        description='After the return is submitted to FedACH, this will contain supplemental details.',
        examples=[
            {'submitted_at': '2020-01-31T23:59:59Z', 'trace_number': '058349238292834'}
        ],
        title='Inbound ACH Transfer Return Submission',
    )
    transaction_id: str = Field(
        ..., description='The ID for the transaction refunding the transfer.'
    )
    type: Type36 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_return`.",
    )


class InboundAchTransferReturnList(BaseModel):
    data: List[InboundAchTransferReturn] = Field(
        ..., description='The contents of the list.'
    )
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Reason7(Enum):
    ach_route_canceled = 'ach_route_canceled'
    ach_route_disabled = 'ach_route_disabled'
    breaches_limit = 'breaches_limit'
    credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver'
    duplicate_return = 'duplicate_return'
    entity_not_active = 'entity_not_active'
    transaction_not_allowed = 'transaction_not_allowed'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    no_ach_route = 'no_ach_route'
    originator_request = 'originator_request'


class AchDecline1(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    originator_company_descriptive_date: str = Field(..., description='')
    originator_company_discretionary_data: str = Field(..., description='')
    originator_company_id: str = Field(..., description='')
    originator_company_name: str = Field(..., description='')
    reason: Reason7 = Field(..., description='Why the ACH transfer was declined.')
    receiver_id_number: str = Field(..., description='')
    receiver_name: str = Field(..., description='')
    trace_number: str = Field(..., description='')


class Visa1(BaseModel):
    electronic_commerce_indicator: ElectronicCommerceIndicator = Field(
        ...,
        description="For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
    )
    point_of_service_entry_mode: PointOfServiceEntryMode = Field(
        ...,
        description="The method used to enter the cardholder's primary account number and card expiration date",
    )


class NetworkDetails1(BaseModel):
    visa: Visa1 = Field(
        ..., description='Fields specific to the `visa` network', title='Visa'
    )


class Reason8(Enum):
    card_not_active = 'card_not_active'
    entity_not_active = 'entity_not_active'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    cvv2_mismatch = 'cvv2_mismatch'
    transaction_not_allowed = 'transaction_not_allowed'
    breaches_limit = 'breaches_limit'
    webhook_declined = 'webhook_declined'
    webhook_timed_out = 'webhook_timed_out'
    declined_by_stand_in_processing = 'declined_by_stand_in_processing'


class CardDecline1(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    digital_wallet_token_id: str = Field(
        ...,
        description='If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.',
    )
    merchant_acceptor_id: str = Field(
        ...,
        description='The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.',
    )
    merchant_category_code: str = Field(
        ...,
        description='The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.',
    )
    merchant_city: str = Field(..., description='The city the merchant resides in.')
    merchant_country: str = Field(
        ..., description='The country the merchant resides in.'
    )
    merchant_descriptor: str = Field(
        ...,
        description='The merchant descriptor of the merchant the card is transacting with.',
    )
    merchant_state: str = Field(..., description='The state the merchant resides in.')
    network: Network2 = Field(
        ..., description='The payment network used to process this card authorization'
    )
    network_details: NetworkDetails1 = Field(
        ..., description='Fields specific to the `network`', title='Network Details'
    )
    real_time_decision_id: str = Field(
        ...,
        description='The identifier of the Real-Time Decision sent to approve or decline this transaction.',
    )
    reason: Reason8 = Field(..., description='Why the transaction was declined.')


class CardRouteDecline1(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class Category5(Enum):
    ach_decline = 'ach_decline'
    card_decline = 'card_decline'
    check_decline = 'check_decline'
    inbound_real_time_payments_transfer_decline = (
        'inbound_real_time_payments_transfer_decline'
    )
    international_ach_decline = 'international_ach_decline'
    card_route_decline = 'card_route_decline'
    other = 'other'


class Reason9(Enum):
    ach_route_canceled = 'ach_route_canceled'
    ach_route_disabled = 'ach_route_disabled'
    breaches_limit = 'breaches_limit'
    entity_not_active = 'entity_not_active'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    unable_to_locate_account = 'unable_to_locate_account'
    unable_to_process = 'unable_to_process'
    refer_to_image = 'refer_to_image'
    stop_payment_requested = 'stop_payment_requested'
    returned = 'returned'


class CheckDecline1(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    auxiliary_on_us: str = Field(..., description='')
    reason: Reason9 = Field(..., description='Why the check was declined.')


class Reason10(Enum):
    account_number_canceled = 'account_number_canceled'
    account_number_disabled = 'account_number_disabled'
    group_locked = 'group_locked'
    entity_not_active = 'entity_not_active'
    real_time_payments_not_enabled = 'real_time_payments_not_enabled'


class InboundRealTimePaymentsTransferDecline1(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    creditor_name: str = Field(
        ...,
        description='The name the sender of the transfer specified as the recipient of the transfer.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer\'s currency. This will always be "USD" for a Real Time Payments transfer.',
    )
    debtor_account_number: str = Field(
        ..., description='The account number of the account that sent the transfer.'
    )
    debtor_name: str = Field(
        ..., description='The name provided by the sender of the transfer.'
    )
    debtor_routing_number: str = Field(
        ..., description='The routing number of the account that sent the transfer.'
    )
    reason: Reason10 = Field(..., description='Why the transfer was declined.')
    remittance_information: str = Field(
        ..., description='Additional information included with the transfer.'
    )
    transaction_identification: str = Field(
        ...,
        description='The Real Time Payments network identification of the declined transfer.',
    )


class Source1(BaseModel):
    ach_decline: AchDecline1 = Field(
        ...,
        description='A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.',
        examples=[
            {
                'amount': 1750,
                'originator_company_descriptive_date': None,
                'originator_company_discretionary_data': None,
                'originator_company_id': '0987654321',
                'originator_company_name': 'BIG BANK',
                'reason': 'insufficient_funds',
                'receiver_id_number': '12345678900',
                'receiver_name': 'IAN CREASE',
                'trace_number': '021000038461022',
            }
        ],
        title='ACH Decline',
    )
    card_decline: CardDecline1 = Field(
        ...,
        description='A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.',
        examples=[
            {
                'amount': -1000,
                'currency': 'USD',
                'digital_wallet_token_id': None,
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
                'network': 'visa',
                'network_details': {
                    'visa': {
                        'electronic_commerce_indicator': 'secure_electronic_commerce',
                        'point_of_service_entry_mode': 'manual',
                    }
                },
                'real_time_decision_id': None,
                'reason': 'insufficient_funds',
            }
        ],
        title='Card Decline',
    )
    card_route_decline: CardRouteDecline1 = Field(
        ...,
        description='A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.',
        examples=[
            {
                'amount': -1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Decline',
    )
    category: Category5 = Field(
        ...,
        description='The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    check_decline: CheckDecline1 = Field(
        ...,
        description='A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.',
        examples=[
            {
                'amount': -1000,
                'auxiliary_on_us': '99999',
                'reason': 'insufficient_funds',
            }
        ],
        title='Check Decline',
    )
    inbound_real_time_payments_transfer_decline: (
        InboundRealTimePaymentsTransferDecline1
    ) = Field(
        ...,
        description='A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.',
        examples=[
            {
                'amount': 100,
                'creditor_name': 'Ian Crease',
                'currency': 'USD',
                'debtor_account_number': '987654321',
                'debtor_name': 'National Phonograph Company',
                'debtor_routing_number': '101050001',
                'reason': 'account_number_disabled',
                'remittance_information': 'Invoice 29582',
                'transaction_identification': '20220501234567891T1BSLZO01745013025',
            }
        ],
        title='Inbound Real Time Payments Transfer Decline',
    )
    international_ach_decline: InternationalAchDecline = Field(
        ...,
        description='A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.',
        examples=[
            {
                'amount': -1000,
                'destination_country_code': 'US',
                'destination_currency_code': 'USD',
                'foreign_exchange_indicator': 'fixed_to_fixed',
                'foreign_exchange_reference': None,
                'foreign_exchange_reference_indicator': 'blank',
                'foreign_payment_amount': 199,
                'foreign_trace_number': None,
                'international_transaction_type_code': 'internet_initiated',
                'originating_currency_code': 'USD',
                'originating_depository_financial_institution_branch_country': 'US',
                'originating_depository_financial_institution_id': '091000019',
                'originating_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'originating_depository_financial_institution_name': 'WELLS FARGO BANK',
                'originator_city': 'BERLIN',
                'originator_company_entry_description': 'RETRY PYMT',
                'originator_country': 'DE',
                'originator_identification': '770510487A',
                'originator_name': 'BERGHAIN',
                'originator_postal_code': '50825',
                'originator_state_or_province': None,
                'originator_street_address': 'Ruedersdorferstr. 7',
                'payment_related_information': None,
                'payment_related_information2': None,
                'receiver_city': 'BEVERLY HILLS',
                'receiver_country': 'US',
                'receiver_identification_number': '1018790279274',
                'receiver_postal_code': '90210',
                'receiver_state_or_province': 'CA',
                'receiver_street_address': '123 FAKE ST',
                'receiving_company_or_individual_name': 'IAN CREASE',
                'receiving_depository_financial_institution_country': 'US',
                'receiving_depository_financial_institution_id': '101050001',
                'receiving_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'receiving_depository_financial_institution_name': 'BLUE RIDGE BANK, NATIONAL ASSOCIATI',
                'trace_number': '010202909100090',
            }
        ],
        title='International ACH Decline',
    )


class Type37(Enum):
    declined_transaction = 'declined_transaction'


class DeclinedTransaction1(BaseModel):
    account_id: str = Field(
        ...,
        description='The identifier for the Account the Declined Transaction belongs to.',
    )
    amount: int = Field(
        ...,
        description='The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.",
    )
    description: str = Field(
        ..., description='This is the description the vendor provides.'
    )
    id: str = Field(..., description='The Declined Transaction identifier.')
    route_id: str = Field(
        ...,
        description='The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.',
    )
    route_type: str = Field(
        ..., description='The type of the route this Declined Transaction came through.'
    )
    source: Source1 = Field(
        ...,
        description="This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.",
        examples=[
            {
                'ach_decline': {
                    'amount': 1750,
                    'originator_company_descriptive_date': None,
                    'originator_company_discretionary_data': None,
                    'originator_company_id': '0987654321',
                    'originator_company_name': 'BIG BANK',
                    'reason': 'insufficient_funds',
                    'receiver_id_number': '12345678900',
                    'receiver_name': 'IAN CREASE',
                    'trace_number': '021000038461022',
                },
                'category': 'ach_decline',
            }
        ],
        title='Declined Transaction Source',
    )
    type: Type37 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `declined_transaction`.",
    )


class AccountTransferIntention(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    description: str = Field(
        ..., description='The description you chose to give the transfer.'
    )
    destination_account_id: str = Field(
        ...,
        description='The identifier of the Account to where the Account Transfer was sent.',
    )
    source_account_id: str = Field(
        ...,
        description='The identifier of the Account from where the Account Transfer was sent.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Account Transfer that led to this Pending Transaction.',
    )


class AchCheckConversion(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    file_id: str = Field(
        ...,
        description='The identifier of the File containing an image of the returned check.',
    )


class AchCheckConversionReturn(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    return_reason_code: str = Field(..., description='Why the transfer was returned.')


class AchTransferIntention(BaseModel):
    account_number: str = Field(..., description='')
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    routing_number: str = Field(..., description='')
    statement_descriptor: str = Field(..., description='')
    transfer_id: str = Field(
        ...,
        description='The identifier of the ACH Transfer that led to this Transaction.',
    )


class AchTransferRejection(BaseModel):
    transfer_id: str = Field(
        ...,
        description='The identifier of the ACH Transfer that led to this Transaction.',
    )


class AchTransferReturn(BaseModel):
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.',
    )
    return_reason_code: ReturnReasonCode = Field(
        ..., description='Why the ACH Transfer was returned.'
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the Tranasaction associated with this return.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the ACH Transfer associated with this return.',
    )


class CardDisputeAcceptance(BaseModel):
    accepted_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Card Dispute was accepted.',
    )
    card_dispute_id: str = Field(
        ..., description='The identifier of the Card Dispute that was accepted.'
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the Transaction that was created to return the disputed funds to your account.',
    )


class Type38(Enum):
    card_refund = 'card_refund'


class CardRefund(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    card_settlement_transaction_id: str = Field(
        ..., description='The identifier for the Transaction this refunds, if any.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    type: Type38 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_refund`.",
    )


class CardRouteRefund(BaseModel):
    amount: int = Field(
        ...,
        description='The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class CardRouteSettlement(BaseModel):
    amount: int = Field(
        ...,
        description='The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class Type39(Enum):
    card_settlement = 'card_settlement'


class CardSettlement(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.",
    )
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_name: str = Field(..., description='')
    merchant_state: str = Field(..., description='')
    pending_transaction_id: str = Field(
        ...,
        description='The identifier of the Pending Transaction associated with this Transaction.',
    )
    presentment_amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's presentment currency.",
    )
    presentment_currency: str = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.",
    )
    type: Type39 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_settlement`.",
    )


class Category6(Enum):
    account_transfer_intention = 'account_transfer_intention'
    ach_check_conversion_return = 'ach_check_conversion_return'
    ach_check_conversion = 'ach_check_conversion'
    ach_transfer_intention = 'ach_transfer_intention'
    ach_transfer_rejection = 'ach_transfer_rejection'
    ach_transfer_return = 'ach_transfer_return'
    card_dispute_acceptance = 'card_dispute_acceptance'
    card_refund = 'card_refund'
    card_settlement = 'card_settlement'
    check_deposit_acceptance = 'check_deposit_acceptance'
    check_deposit_return = 'check_deposit_return'
    check_transfer_intention = 'check_transfer_intention'
    check_transfer_return = 'check_transfer_return'
    check_transfer_rejection = 'check_transfer_rejection'
    check_transfer_stop_payment_request = 'check_transfer_stop_payment_request'
    dispute_resolution = 'dispute_resolution'
    empyreal_cash_deposit = 'empyreal_cash_deposit'
    inbound_ach_transfer = 'inbound_ach_transfer'
    inbound_ach_transfer_return_intention = 'inbound_ach_transfer_return_intention'
    inbound_check = 'inbound_check'
    inbound_international_ach_transfer = 'inbound_international_ach_transfer'
    inbound_real_time_payments_transfer_confirmation = (
        'inbound_real_time_payments_transfer_confirmation'
    )
    inbound_wire_drawdown_payment_reversal = 'inbound_wire_drawdown_payment_reversal'
    inbound_wire_drawdown_payment = 'inbound_wire_drawdown_payment'
    inbound_wire_reversal = 'inbound_wire_reversal'
    inbound_wire_transfer = 'inbound_wire_transfer'
    interest_payment = 'interest_payment'
    internal_general_ledger_transaction = 'internal_general_ledger_transaction'
    internal_source = 'internal_source'
    card_route_refund = 'card_route_refund'
    card_route_settlement = 'card_route_settlement'
    real_time_payments_transfer_acknowledgement = (
        'real_time_payments_transfer_acknowledgement'
    )
    sample_funds = 'sample_funds'
    wire_drawdown_payment_intention = 'wire_drawdown_payment_intention'
    wire_drawdown_payment_rejection = 'wire_drawdown_payment_rejection'
    wire_transfer_intention = 'wire_transfer_intention'
    wire_transfer_rejection = 'wire_transfer_rejection'
    other = 'other'


class CheckDepositAcceptance(BaseModel):
    account_number: str = Field(
        ..., description='The account number printed on the check.'
    )
    amount: int = Field(
        ...,
        description="The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    auxiliary_on_us: str = Field(
        ...,
        description='An additional line of metadata printed on the check. This typically includes the check number for business checks.',
    )
    check_deposit_id: str = Field(
        ..., description='The ID of the Check Deposit that was accepted.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    routing_number: str = Field(
        ..., description='The routing number printed on the check.'
    )
    serial_number: str = Field(
        ...,
        description='The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.',
    )


class CheckDepositReturn(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    check_deposit_id: str = Field(
        ..., description='The identifier of the Check Deposit that was returned.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    return_reason: ReturnReason = Field(..., description='')
    returned_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.',
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the transaction that reversed the original check deposit transaction.',
    )


class CheckTransferIntention(BaseModel):
    address_city: str = Field(..., description="The city of the check's destination.")
    address_line1: str = Field(
        ..., description="The street address of the check's destination."
    )
    address_line2: str = Field(
        ..., description="The second line of the address of the check's destination."
    )
    address_state: str = Field(..., description="The state of the check's destination.")
    address_zip: str = Field(
        ..., description="The postal code of the check's destination."
    )
    amount: int = Field(..., description='The transfer amount in USD cents.')
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
    )
    recipient_name: str = Field(
        ..., description='The name that will be printed on the check.'
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Check Transfer with which this is associated.',
    )


class CheckTransferRejection(BaseModel):
    transfer_id: str = Field(
        ...,
        description='The identifier of the Check Transfer that led to this Transaction.',
    )


class CheckTransferReturn(BaseModel):
    file_id: str = Field(
        ...,
        description='If available, a document with additional information about the return.',
    )
    transfer_id: str = Field(
        ..., description='The identifier of the returned Check Transfer.'
    )


class Type40(Enum):
    check_transfer_stop_payment_request = 'check_transfer_stop_payment_request'


class CheckTransferStopPaymentRequest(BaseModel):
    requested_at: datetime = Field(
        ..., description='The time the stop-payment was requested.'
    )
    transaction_id: str = Field(
        ..., description='The transaction ID of the corresponding credit transaction.'
    )
    transfer_id: str = Field(
        ..., description='The ID of the check transfer that was stopped.'
    )
    type: Type40 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.",
    )


class DisputeResolution(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    disputed_transaction_id: str = Field(
        ..., description='The identifier of the Transaction that was disputed.'
    )


class EmpyrealCashDeposit(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    bag_id: str = Field(..., description='')
    deposit_date: datetime = Field(..., description='')


class InboundAchTransfer(BaseModel):
    amount: int = Field(
        ...,
        description='The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    originator_company_descriptive_date: str = Field(..., description='')
    originator_company_discretionary_data: str = Field(..., description='')
    originator_company_entry_description: str = Field(..., description='')
    originator_company_id: str = Field(..., description='')
    originator_company_name: str = Field(..., description='')
    receiver_id_number: str = Field(..., description='')
    receiver_name: str = Field(..., description='')
    trace_number: str = Field(..., description='')


class InboundCheck(BaseModel):
    amount: int = Field(
        ...,
        description='The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    check_front_image_file_id: str = Field(..., description='')
    check_number: str = Field(..., description='')
    check_rear_image_file_id: str = Field(..., description='')
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )


class InboundInternationalAchTransfer(BaseModel):
    amount: int = Field(
        ...,
        description='The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    destination_country_code: str = Field(..., description='')
    destination_currency_code: str = Field(..., description='')
    foreign_exchange_indicator: str = Field(..., description='')
    foreign_exchange_reference: str = Field(..., description='')
    foreign_exchange_reference_indicator: str = Field(..., description='')
    foreign_payment_amount: int = Field(..., description='')
    foreign_trace_number: str = Field(..., description='')
    international_transaction_type_code: str = Field(..., description='')
    originating_currency_code: str = Field(..., description='')
    originating_depository_financial_institution_branch_country: str = Field(
        ..., description=''
    )
    originating_depository_financial_institution_id: str = Field(..., description='')
    originating_depository_financial_institution_id_qualifier: str = Field(
        ..., description=''
    )
    originating_depository_financial_institution_name: str = Field(..., description='')
    originator_city: str = Field(..., description='')
    originator_company_entry_description: str = Field(..., description='')
    originator_country: str = Field(..., description='')
    originator_identification: str = Field(..., description='')
    originator_name: str = Field(..., description='')
    originator_postal_code: str = Field(..., description='')
    originator_state_or_province: str = Field(..., description='')
    originator_street_address: str = Field(..., description='')
    payment_related_information: str = Field(..., description='')
    payment_related_information2: str = Field(..., description='')
    receiver_city: str = Field(..., description='')
    receiver_country: str = Field(..., description='')
    receiver_identification_number: str = Field(..., description='')
    receiver_postal_code: str = Field(..., description='')
    receiver_state_or_province: str = Field(..., description='')
    receiver_street_address: str = Field(..., description='')
    receiving_company_or_individual_name: str = Field(..., description='')
    receiving_depository_financial_institution_country: str = Field(..., description='')
    receiving_depository_financial_institution_id: str = Field(..., description='')
    receiving_depository_financial_institution_id_qualifier: str = Field(
        ..., description=''
    )
    receiving_depository_financial_institution_name: str = Field(..., description='')
    trace_number: str = Field(..., description='')


class InboundRealTimePaymentsTransferConfirmation(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.",
    )
    creditor_name: str = Field(
        ...,
        description='The name the sender of the transfer specified as the recipient of the transfer.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer\'s currency. This will always be "USD" for a Real Time Payments transfer.',
    )
    debtor_account_number: str = Field(
        ..., description='The account number of the account that sent the transfer.'
    )
    debtor_name: str = Field(
        ..., description='The name provided by the sender of the transfer.'
    )
    debtor_routing_number: str = Field(
        ..., description='The routing number of the account that sent the transfer.'
    )
    remittance_information: str = Field(
        ..., description='Additional information included with the transfer.'
    )
    transaction_identification: str = Field(
        ..., description='The Real Time Payments network identification of the transfer'
    )


class InboundWireDrawdownPayment(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    beneficiary_address_line1: str = Field(..., description='')
    beneficiary_address_line2: str = Field(..., description='')
    beneficiary_address_line3: str = Field(..., description='')
    beneficiary_name: str = Field(..., description='')
    beneficiary_reference: str = Field(..., description='')
    description: str = Field(..., description='')
    input_message_accountability_data: str = Field(..., description='')
    originator_address_line1: str = Field(..., description='')
    originator_address_line2: str = Field(..., description='')
    originator_address_line3: str = Field(..., description='')
    originator_name: str = Field(..., description='')
    originator_to_beneficiary_information: str = Field(..., description='')


class InboundWireDrawdownPaymentReversal(BaseModel):
    amount: int = Field(..., description='The amount that was reversed.')
    description: str = Field(
        ..., description='The description on the reversal message from Fedwire.'
    )
    input_cycle_date: date = Field(
        ..., description='The Fedwire cycle date for the wire reversal.'
    )
    input_message_accountability_data: str = Field(
        ..., description='The Fedwire transaction identifier.'
    )
    input_sequence_number: str = Field(..., description='The Fedwire sequence number.')
    input_source: str = Field(..., description='The Fedwire input source identifier.')
    previous_message_input_cycle_date: date = Field(
        ...,
        description='The Fedwire cycle date for the wire transfer that was reversed.',
    )
    previous_message_input_message_accountability_data: str = Field(
        ...,
        description='The Fedwire transaction identifier for the wire transfer that was reversed.',
    )
    previous_message_input_sequence_number: str = Field(
        ...,
        description='The Fedwire sequence number for the wire transfer that was reversed.',
    )
    previous_message_input_source: str = Field(
        ...,
        description='The Fedwire input source identifier for the wire transfer that was reversed.',
    )


class InboundWireReversal(BaseModel):
    amount: int = Field(..., description='The amount that was reversed.')
    description: str = Field(
        ..., description='The description on the reversal message from Fedwire.'
    )
    financial_institution_to_financial_institution_information: str = Field(
        ...,
        description='Additional financial institution information included in the wire reversal.',
    )
    input_cycle_date: date = Field(
        ..., description='The Fedwire cycle date for the wire reversal.'
    )
    input_message_accountability_data: str = Field(
        ..., description='The Fedwire transaction identifier.'
    )
    input_sequence_number: str = Field(..., description='The Fedwire sequence number.')
    input_source: str = Field(..., description='The Fedwire input source identifier.')
    previous_message_input_cycle_date: date = Field(
        ...,
        description='The Fedwire cycle date for the wire transfer that was reversed.',
    )
    previous_message_input_message_accountability_data: str = Field(
        ...,
        description='The Fedwire transaction identifier for the wire transfer that was reversed.',
    )
    previous_message_input_sequence_number: str = Field(
        ...,
        description='The Fedwire sequence number for the wire transfer that was reversed.',
    )
    previous_message_input_source: str = Field(
        ...,
        description='The Fedwire input source identifier for the wire transfer that was reversed.',
    )
    receiver_financial_institution_information: str = Field(
        ...,
        description='Information included in the wire reversal for the receiving financial institution.',
    )


class InboundWireTransfer(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    beneficiary_address_line1: str = Field(..., description='')
    beneficiary_address_line2: str = Field(..., description='')
    beneficiary_address_line3: str = Field(..., description='')
    beneficiary_name: str = Field(..., description='')
    beneficiary_reference: str = Field(..., description='')
    description: str = Field(..., description='')
    input_message_accountability_data: str = Field(..., description='')
    originator_address_line1: str = Field(..., description='')
    originator_address_line2: str = Field(..., description='')
    originator_address_line3: str = Field(..., description='')
    originator_name: str = Field(..., description='')
    originator_to_beneficiary_information: str = Field(..., description='')
    originator_to_beneficiary_information_line1: str = Field(..., description='')
    originator_to_beneficiary_information_line2: str = Field(..., description='')
    originator_to_beneficiary_information_line3: str = Field(..., description='')
    originator_to_beneficiary_information_line4: str = Field(..., description='')


class InterestPayment(BaseModel):
    accrued_on_account_id: str = Field(
        ..., description='The account on which the interest was accrued.'
    )
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.',
    )
    period_end: datetime = Field(
        ...,
        description='The end of the period for which this transaction paid interest.',
    )
    period_start: datetime = Field(
        ...,
        description='The start of the period for which this transaction paid interest.',
    )


class Reason11(Enum):
    bank_migration = 'bank_migration'
    cashback = 'cashback'
    empyreal_adjustment = 'empyreal_adjustment'
    error = 'error'
    error_correction = 'error_correction'
    fees = 'fees'
    interest = 'interest'
    sample_funds = 'sample_funds'
    sample_funds_return = 'sample_funds_return'


class InternalSource(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.',
    )
    reason: Reason11 = Field(..., description='')


class SampleFunds(BaseModel):
    originator: str = Field(..., description='Where the sample funds came from.')


class WireDrawdownPaymentIntention(BaseModel):
    account_number: str = Field(..., description='')
    amount: int = Field(..., description='The transfer amount in USD cents.')
    message_to_recipient: str = Field(..., description='')
    routing_number: str = Field(..., description='')
    transfer_id: str = Field(..., description='')


class WireDrawdownPaymentRejection(BaseModel):
    transfer_id: str = Field(..., description='')


class WireTransferIntention(BaseModel):
    account_number: str = Field(..., description='The destination account number.')
    amount: int = Field(..., description='The transfer amount in USD cents.')
    message_to_recipient: str = Field(
        ..., description="The message that will show on the recipient's bank statement."
    )
    routing_number: str = Field(
        ...,
        description="The American Bankers' Association (ABA) Routing Transit Number (RTN).",
    )
    transfer_id: str = Field(..., description='')


class WireTransferRejection(BaseModel):
    transfer_id: str = Field(..., description='')


class Source2(BaseModel):
    account_transfer_intention: AccountTransferIntention = Field(
        ...,
        description='A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'destination_account_id': 'account_uf16sut2ct5bevmq3eh',
                'source_account_id': 'account_in71c4amph0vgo2qllky',
                'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n',
            }
        ],
        title='Account Transfer Intention',
    )
    ach_check_conversion: AchCheckConversion = Field(
        ...,
        description='A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.',
        examples=[{'amount': 100, 'file_id': 'file_makxrc67oh9l6sg7w9yc'}],
        title='ACH Check Conversion',
    )
    ach_check_conversion_return: AchCheckConversionReturn = Field(
        ...,
        description='A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.',
        examples=[{'amount': 100, 'return_reason_code': ''}],
        title='ACH Check Conversion Return',
    )
    ach_transfer_intention: AchTransferIntention = Field(
        ...,
        description='A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'routing_number': '101050001',
                'statement_descriptor': 'Frederick S. Holmes',
                'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n',
            }
        ],
        title='ACH Transfer Intention',
    )
    ach_transfer_rejection: AchTransferRejection = Field(
        ...,
        description='A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.',
        examples=[{'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n'}],
        title='ACH Transfer Rejection',
    )
    ach_transfer_return: AchTransferReturn = Field(
        ...,
        description='A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.',
        examples=[
            {
                'created_at': '2020-01-31T23:59:59Z',
                'return_reason_code': 'insufficient_fund',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'transfer_id': 'ach_transfer_uoxatyh3lt5evrsdvo7q',
            }
        ],
        title='ACH Transfer Return',
    )
    card_dispute_acceptance: CardDisputeAcceptance = Field(
        ...,
        description='A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.',
        examples=[
            {
                'accepted_at': '2020-01-31T23:59:59Z',
                'card_dispute_id': 'card_dispute_h9sc95nbl1cgltpp7men',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Card Dispute Acceptance',
    )
    card_refund: CardRefund = Field(
        ...,
        description='A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.',
        examples=[
            {
                'amount': 100,
                'card_settlement_transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'currency': 'USD',
                'type': 'card_refund',
            }
        ],
        title='Card Refund',
    )
    card_route_refund: CardRouteRefund = Field(
        ...,
        description='A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.',
        examples=[
            {
                'amount': 1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Refund',
    )
    card_route_settlement: CardRouteSettlement = Field(
        ...,
        description='A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.',
        examples=[
            {
                'amount': 1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Settlement',
    )
    card_settlement: CardSettlement = Field(
        ...,
        description='A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'merchant_category_code': '5734',
                'merchant_city': 'New York',
                'merchant_country': 'US',
                'merchant_name': 'AMAZON.COM',
                'merchant_state': 'NY',
                'pending_transaction_id': None,
                'presentment_amount': 100,
                'presentment_currency': 'USD',
                'type': 'card_settlement',
            }
        ],
        title='Card Settlement',
    )
    category: Category6 = Field(
        ...,
        description='The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    check_deposit_acceptance: CheckDepositAcceptance = Field(
        ...,
        description='A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'auxiliary_on_us': '101',
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'routing_number': '101050001',
                'serial_number': None,
            }
        ],
        title='Check Deposit Acceptance',
    )
    check_deposit_return: CheckDepositReturn = Field(
        ...,
        description='A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.',
        examples=[
            {
                'amount': 100,
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'return_reason': 'insufficient_funds',
                'returned_at': '2020-01-31T23:59:59Z',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Check Deposit Return',
    )
    check_transfer_intention: CheckTransferIntention = Field(
        ...,
        description='A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.',
        examples=[
            {
                'address_city': 'New York',
                'address_line1': '33 Liberty Street',
                'address_line2': None,
                'address_state': 'NY',
                'address_zip': '10045',
                'amount': 1000,
                'currency': 'USD',
                'recipient_name': 'Ian Crease',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
            }
        ],
        title='Check Transfer Intention',
    )
    check_transfer_rejection: CheckTransferRejection = Field(
        ...,
        description='A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.',
        examples=[{'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5'}],
        title='Check Transfer Rejection',
    )
    check_transfer_return: CheckTransferReturn = Field(
        ...,
        description='A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.',
        examples=[
            {'file_id': None, 'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5'}
        ],
        title='Check Transfer Return',
    )
    check_transfer_stop_payment_request: CheckTransferStopPaymentRequest = Field(
        ...,
        description='A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.',
        examples=[
            {
                'requested_at': '2020-01-31T23:59:59Z',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
                'type': 'check_transfer_stop_payment_request',
            }
        ],
        title='Check Transfer Stop Payment Request',
    )
    dispute_resolution: DisputeResolution = Field(
        ...,
        description='A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'disputed_transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Dispute Resolution',
    )
    empyreal_cash_deposit: EmpyrealCashDeposit = Field(
        ...,
        description='A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.',
        examples=[
            {'amount': 100, 'bag_id': '12345', 'deposit_date': '2020-01-31T23:59:59Z'}
        ],
        title='Empyreal Cash Deposit',
    )
    inbound_ach_transfer: InboundAchTransfer = Field(
        ...,
        description='A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.',
        examples=[
            {
                'amount': 100,
                'originator_company_descriptive_date': None,
                'originator_company_discretionary_data': None,
                'originator_company_entry_description': 'RESERVE',
                'originator_company_id': '0987654321',
                'originator_company_name': 'BIG BANK',
                'receiver_id_number': '12345678900',
                'receiver_name': 'IAN CREASE',
                'trace_number': '021000038461022',
            }
        ],
        title='Inbound ACH Transfer',
    )
    inbound_check: InboundCheck = Field(
        ...,
        description='A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.',
        examples=[
            {
                'amount': 100,
                'check_front_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
                'check_number': '       00000123',
                'check_rear_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
                'currency': 'USD',
            }
        ],
        title='Inbound Check',
    )
    inbound_international_ach_transfer: InboundInternationalAchTransfer = Field(
        ...,
        description='A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.',
        examples=[
            {
                'amount': -1000,
                'destination_country_code': 'US',
                'destination_currency_code': 'USD',
                'foreign_exchange_indicator': 'fixed_to_fixed',
                'foreign_exchange_reference': None,
                'foreign_exchange_reference_indicator': 'blank',
                'foreign_payment_amount': 199,
                'foreign_trace_number': None,
                'international_transaction_type_code': 'internet_initiated',
                'originating_currency_code': 'USD',
                'originating_depository_financial_institution_branch_country': 'US',
                'originating_depository_financial_institution_id': '091000019',
                'originating_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'originating_depository_financial_institution_name': 'WELLS FARGO BANK',
                'originator_city': 'BERLIN',
                'originator_company_entry_description': 'RETRY PYMT',
                'originator_country': 'DE',
                'originator_identification': '770510487A',
                'originator_name': 'BERGHAIN',
                'originator_postal_code': '50825',
                'originator_state_or_province': None,
                'originator_street_address': 'Ruedersdorferstr. 7',
                'payment_related_information': None,
                'payment_related_information2': None,
                'receiver_city': 'BEVERLY HILLS',
                'receiver_country': 'US',
                'receiver_identification_number': '1018790279274',
                'receiver_postal_code': '90210',
                'receiver_state_or_province': 'CA',
                'receiver_street_address': '123 FAKE ST',
                'receiving_company_or_individual_name': 'IAN CREASE',
                'receiving_depository_financial_institution_country': 'US',
                'receiving_depository_financial_institution_id': '101050001',
                'receiving_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'receiving_depository_financial_institution_name': 'BLUE RIDGE BANK, NATIONAL ASSOCIATI',
                'trace_number': '010202909100090',
            }
        ],
        title='Inbound International ACH Transfer',
    )
    inbound_real_time_payments_transfer_confirmation: (
        InboundRealTimePaymentsTransferConfirmation
    ) = Field(
        ...,
        description='A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.',
        examples=[
            {
                'amount': 100,
                'creditor_name': 'Ian Crease',
                'currency': 'USD',
                'debtor_account_number': '987654321',
                'debtor_name': 'National Phonograph Company',
                'debtor_routing_number': '101050001',
                'remittance_information': 'Invoice 29582',
                'transaction_identification': '20220501234567891T1BSLZO01745013025',
            }
        ],
        title='Inbound Real Time Payments Transfer Confirmation',
    )
    inbound_wire_drawdown_payment: InboundWireDrawdownPayment = Field(
        ...,
        description='A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.',
        examples=[
            {
                'amount': 100,
                'beneficiary_address_line1': None,
                'beneficiary_address_line2': None,
                'beneficiary_address_line3': None,
                'beneficiary_name': None,
                'beneficiary_reference': None,
                'description': 'Inbound wire drawdown payment',
                'input_message_accountability_data': None,
                'originator_address_line1': None,
                'originator_address_line2': None,
                'originator_address_line3': None,
                'originator_name': None,
                'originator_to_beneficiary_information': None,
            }
        ],
        title='Inbound Wire Drawdown Payment',
    )
    inbound_wire_drawdown_payment_reversal: InboundWireDrawdownPaymentReversal = Field(
        ...,
        description='A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.',
        examples=[
            {
                'amount': 12345,
                'description': 'Inbound wire reversal 2022021100335128',
                'input_cycle_date': '2022-02-11',
                'input_message_accountability_data': '20220211B6B7HU2R011023',
                'input_sequence_number': '11023',
                'input_source': 'B6B7HU2R',
                'previous_message_input_cycle_date': '2022-02-10',
                'previous_message_input_message_accountability_data': '20220210MMQFMP0P000007',
                'previous_message_input_sequence_number': '3',
                'previous_message_input_source': 'MMQFMP0P',
            }
        ],
        title='Inbound Wire Drawdown Payment Reversal',
    )
    inbound_wire_reversal: InboundWireReversal = Field(
        ...,
        description='A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.',
        examples=[
            {
                'amount': 12345,
                'description': 'Inbound wire reversal 2022021100335128',
                'financial_institution_to_financial_institution_information': None,
                'input_cycle_date': '2022-02-11',
                'input_message_accountability_data': '20220211B6B7HU2R011023',
                'input_sequence_number': '11023',
                'input_source': 'B6B7HU2R',
                'previous_message_input_cycle_date': '2022-02-10',
                'previous_message_input_message_accountability_data': '20220210MMQFMP0P000007',
                'previous_message_input_sequence_number': '3',
                'previous_message_input_source': 'MMQFMP0P',
                'receiver_financial_institution_information': None,
            }
        ],
        title='Inbound Wire Reversal',
    )
    inbound_wire_transfer: InboundWireTransfer = Field(
        ...,
        description='A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.',
        examples=[
            {
                'amount': 100,
                'beneficiary_address_line1': None,
                'beneficiary_address_line2': None,
                'beneficiary_address_line3': None,
                'beneficiary_name': None,
                'beneficiary_reference': None,
                'description': 'Inbound wire transfer',
                'input_message_accountability_data': None,
                'originator_address_line1': None,
                'originator_address_line2': None,
                'originator_address_line3': None,
                'originator_name': None,
                'originator_to_beneficiary_information': None,
                'originator_to_beneficiary_information_line1': None,
                'originator_to_beneficiary_information_line2': None,
                'originator_to_beneficiary_information_line3': None,
                'originator_to_beneficiary_information_line4': None,
            }
        ],
        title='Inbound Wire Transfer',
    )
    interest_payment: InterestPayment = Field(
        ...,
        description='A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.',
        examples=[
            {
                'accrued_on_account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 100,
                'currency': 'USD',
                'period_end': '2023-03-31T23:59:59Z',
                'period_start': '2023-03-01T00:00:00Z',
            }
        ],
        title='Interest Payment',
    )
    internal_source: InternalSource = Field(
        ...,
        description='A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.',
        examples=[{'amount': 100, 'currency': 'USD', 'reason': 'sample_funds'}],
        title='Internal Source',
    )
    sample_funds: SampleFunds = Field(
        ...,
        description='A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.',
        examples=[{'originator': 'dashboard'}],
        title='Sample Funds',
    )
    wire_drawdown_payment_intention: WireDrawdownPaymentIntention = Field(
        ...,
        description='A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
                'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u',
            }
        ],
        title='Wire Drawdown Payment Intention',
    )
    wire_drawdown_payment_rejection: WireDrawdownPaymentRejection = Field(
        ...,
        description='A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.',
        examples=[{'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u'}],
        title='Wire Drawdown Payment Rejection',
    )
    wire_transfer_intention: WireTransferIntention = Field(
        ...,
        description='A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
                'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u',
            }
        ],
        title='Wire Transfer Intention',
    )
    wire_transfer_rejection: WireTransferRejection = Field(
        ...,
        description='A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.',
        examples=[{'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u'}],
        title='Wire Transfer Rejection',
    )


class Type41(Enum):
    transaction = 'transaction'


class Transaction(BaseModel):
    account_id: str = Field(
        ..., description='The identifier for the Account the Transaction belongs to.'
    )
    amount: int = Field(
        ...,
        description='The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.",
    )
    description: str = Field(
        ...,
        description='For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.',
    )
    id: str = Field(..., description='The Transaction identifier.')
    route_id: str = Field(
        ...,
        description='The identifier for the route this Transaction came through. Routes are things like cards and ACH details.',
    )
    route_type: str = Field(
        ..., description='The type of the route this Transaction came through.'
    )
    source: Source2 = Field(
        ...,
        description='This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.',
        examples=[
            {
                'category': 'inbound_ach_transfer',
                'inbound_ach_transfer': {
                    'amount': 100,
                    'originator_company_descriptive_date': None,
                    'originator_company_discretionary_data': None,
                    'originator_company_entry_description': 'RESERVE',
                    'originator_company_id': '0987654321',
                    'originator_company_name': 'BIG BANK',
                    'receiver_id_number': '12345678900',
                    'receiver_name': 'IAN CREASE',
                    'trace_number': '021000038461022',
                },
            }
        ],
        title='Transaction Source',
    )
    type: Type41 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `transaction`.",
    )


class Type42(Enum):
    inbound_ach_transfer_simulation_result = 'inbound_ach_transfer_simulation_result'


class InboundAchTransferSimulationResult(BaseModel):
    declined_transaction: DeclinedTransaction1 = Field(
        ...,
        description="If the ACH Transfer attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: inbound_ach_transfer`.",
        examples=[
            {
                'account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 1750,
                'created_at': '2020-01-31T23:59:59Z',
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'id': 'declined_transaction_17jbn0yyhvkt4v4ooym8',
                'route_id': 'account_number_v18nkfqm6afpsrvy82b2',
                'route_type': 'account_number',
                'source': {
                    'ach_decline': {
                        'amount': 1750,
                        'originator_company_descriptive_date': None,
                        'originator_company_discretionary_data': None,
                        'originator_company_id': '0987654321',
                        'originator_company_name': 'BIG BANK',
                        'reason': 'insufficient_funds',
                        'receiver_id_number': '12345678900',
                        'receiver_name': 'IAN CREASE',
                        'trace_number': '021000038461022',
                    },
                    'category': 'ach_decline',
                },
                'type': 'declined_transaction',
            }
        ],
        title='Declined Transaction',
    )
    transaction: Transaction = Field(
        ...,
        description="If the ACH Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_ach_transfer`.",
        examples=[
            {
                'account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 100,
                'created_at': '2020-01-31T23:59:59Z',
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'id': 'transaction_uyrp7fld2ium70oa7oi',
                'route_id': 'account_number_v18nkfqm6afpsrvy82b2',
                'route_type': 'account_number',
                'source': {
                    'category': 'inbound_ach_transfer',
                    'inbound_ach_transfer': {
                        'amount': 100,
                        'originator_company_descriptive_date': None,
                        'originator_company_discretionary_data': None,
                        'originator_company_entry_description': 'RESERVE',
                        'originator_company_id': '0987654321',
                        'originator_company_name': 'BIG BANK',
                        'receiver_id_number': '12345678900',
                        'receiver_name': 'IAN CREASE',
                        'trace_number': '021000038461022',
                    },
                },
                'type': 'transaction',
            }
        ],
        title='Transaction',
    )
    type: Type42 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `inbound_ach_transfer_simulation_result`.",
    )


class Reason12(Enum):
    ach_route_canceled = 'ach_route_canceled'
    ach_route_disabled = 'ach_route_disabled'
    breaches_limit = 'breaches_limit'
    credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver'
    duplicate_return = 'duplicate_return'
    entity_not_active = 'entity_not_active'
    transaction_not_allowed = 'transaction_not_allowed'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    no_ach_route = 'no_ach_route'
    originator_request = 'originator_request'


class AchDecline2(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    originator_company_descriptive_date: str = Field(..., description='')
    originator_company_discretionary_data: str = Field(..., description='')
    originator_company_id: str = Field(..., description='')
    originator_company_name: str = Field(..., description='')
    reason: Reason12 = Field(..., description='Why the ACH transfer was declined.')
    receiver_id_number: str = Field(..., description='')
    receiver_name: str = Field(..., description='')
    trace_number: str = Field(..., description='')


class Visa2(BaseModel):
    electronic_commerce_indicator: ElectronicCommerceIndicator = Field(
        ...,
        description="For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
    )
    point_of_service_entry_mode: PointOfServiceEntryMode = Field(
        ...,
        description="The method used to enter the cardholder's primary account number and card expiration date",
    )


class NetworkDetails2(BaseModel):
    visa: Visa2 = Field(
        ..., description='Fields specific to the `visa` network', title='Visa'
    )


class Reason13(Enum):
    card_not_active = 'card_not_active'
    entity_not_active = 'entity_not_active'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    cvv2_mismatch = 'cvv2_mismatch'
    transaction_not_allowed = 'transaction_not_allowed'
    breaches_limit = 'breaches_limit'
    webhook_declined = 'webhook_declined'
    webhook_timed_out = 'webhook_timed_out'
    declined_by_stand_in_processing = 'declined_by_stand_in_processing'


class CardDecline2(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    digital_wallet_token_id: str = Field(
        ...,
        description='If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.',
    )
    merchant_acceptor_id: str = Field(
        ...,
        description='The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.',
    )
    merchant_category_code: str = Field(
        ...,
        description='The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.',
    )
    merchant_city: str = Field(..., description='The city the merchant resides in.')
    merchant_country: str = Field(
        ..., description='The country the merchant resides in.'
    )
    merchant_descriptor: str = Field(
        ...,
        description='The merchant descriptor of the merchant the card is transacting with.',
    )
    merchant_state: str = Field(..., description='The state the merchant resides in.')
    network: Network2 = Field(
        ..., description='The payment network used to process this card authorization'
    )
    network_details: NetworkDetails2 = Field(
        ..., description='Fields specific to the `network`', title='Network Details'
    )
    real_time_decision_id: str = Field(
        ...,
        description='The identifier of the Real-Time Decision sent to approve or decline this transaction.',
    )
    reason: Reason13 = Field(..., description='Why the transaction was declined.')


class CardRouteDecline2(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class Category7(Enum):
    ach_decline = 'ach_decline'
    card_decline = 'card_decline'
    check_decline = 'check_decline'
    inbound_real_time_payments_transfer_decline = (
        'inbound_real_time_payments_transfer_decline'
    )
    international_ach_decline = 'international_ach_decline'
    card_route_decline = 'card_route_decline'
    other = 'other'


class Reason14(Enum):
    ach_route_canceled = 'ach_route_canceled'
    ach_route_disabled = 'ach_route_disabled'
    breaches_limit = 'breaches_limit'
    entity_not_active = 'entity_not_active'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    unable_to_locate_account = 'unable_to_locate_account'
    unable_to_process = 'unable_to_process'
    refer_to_image = 'refer_to_image'
    stop_payment_requested = 'stop_payment_requested'
    returned = 'returned'


class CheckDecline2(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    auxiliary_on_us: str = Field(..., description='')
    reason: Reason14 = Field(..., description='Why the check was declined.')


class Reason15(Enum):
    account_number_canceled = 'account_number_canceled'
    account_number_disabled = 'account_number_disabled'
    group_locked = 'group_locked'
    entity_not_active = 'entity_not_active'
    real_time_payments_not_enabled = 'real_time_payments_not_enabled'


class InboundRealTimePaymentsTransferDecline2(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    creditor_name: str = Field(
        ...,
        description='The name the sender of the transfer specified as the recipient of the transfer.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer\'s currency. This will always be "USD" for a Real Time Payments transfer.',
    )
    debtor_account_number: str = Field(
        ..., description='The account number of the account that sent the transfer.'
    )
    debtor_name: str = Field(
        ..., description='The name provided by the sender of the transfer.'
    )
    debtor_routing_number: str = Field(
        ..., description='The routing number of the account that sent the transfer.'
    )
    reason: Reason15 = Field(..., description='Why the transfer was declined.')
    remittance_information: str = Field(
        ..., description='Additional information included with the transfer.'
    )
    transaction_identification: str = Field(
        ...,
        description='The Real Time Payments network identification of the declined transfer.',
    )


class Source3(BaseModel):
    ach_decline: AchDecline2 = Field(
        ...,
        description='A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.',
        examples=[
            {
                'amount': 1750,
                'originator_company_descriptive_date': None,
                'originator_company_discretionary_data': None,
                'originator_company_id': '0987654321',
                'originator_company_name': 'BIG BANK',
                'reason': 'insufficient_funds',
                'receiver_id_number': '12345678900',
                'receiver_name': 'IAN CREASE',
                'trace_number': '021000038461022',
            }
        ],
        title='ACH Decline',
    )
    card_decline: CardDecline2 = Field(
        ...,
        description='A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.',
        examples=[
            {
                'amount': -1000,
                'currency': 'USD',
                'digital_wallet_token_id': None,
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
                'network': 'visa',
                'network_details': {
                    'visa': {
                        'electronic_commerce_indicator': 'secure_electronic_commerce',
                        'point_of_service_entry_mode': 'manual',
                    }
                },
                'real_time_decision_id': None,
                'reason': 'insufficient_funds',
            }
        ],
        title='Card Decline',
    )
    card_route_decline: CardRouteDecline2 = Field(
        ...,
        description='A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.',
        examples=[
            {
                'amount': -1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Decline',
    )
    category: Category7 = Field(
        ...,
        description='The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    check_decline: CheckDecline2 = Field(
        ...,
        description='A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.',
        examples=[
            {
                'amount': -1000,
                'auxiliary_on_us': '99999',
                'reason': 'insufficient_funds',
            }
        ],
        title='Check Decline',
    )
    inbound_real_time_payments_transfer_decline: (
        InboundRealTimePaymentsTransferDecline2
    ) = Field(
        ...,
        description='A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.',
        examples=[
            {
                'amount': 100,
                'creditor_name': 'Ian Crease',
                'currency': 'USD',
                'debtor_account_number': '987654321',
                'debtor_name': 'National Phonograph Company',
                'debtor_routing_number': '101050001',
                'reason': 'account_number_disabled',
                'remittance_information': 'Invoice 29582',
                'transaction_identification': '20220501234567891T1BSLZO01745013025',
            }
        ],
        title='Inbound Real Time Payments Transfer Decline',
    )
    international_ach_decline: InternationalAchDecline = Field(
        ...,
        description='A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.',
        examples=[
            {
                'amount': -1000,
                'destination_country_code': 'US',
                'destination_currency_code': 'USD',
                'foreign_exchange_indicator': 'fixed_to_fixed',
                'foreign_exchange_reference': None,
                'foreign_exchange_reference_indicator': 'blank',
                'foreign_payment_amount': 199,
                'foreign_trace_number': None,
                'international_transaction_type_code': 'internet_initiated',
                'originating_currency_code': 'USD',
                'originating_depository_financial_institution_branch_country': 'US',
                'originating_depository_financial_institution_id': '091000019',
                'originating_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'originating_depository_financial_institution_name': 'WELLS FARGO BANK',
                'originator_city': 'BERLIN',
                'originator_company_entry_description': 'RETRY PYMT',
                'originator_country': 'DE',
                'originator_identification': '770510487A',
                'originator_name': 'BERGHAIN',
                'originator_postal_code': '50825',
                'originator_state_or_province': None,
                'originator_street_address': 'Ruedersdorferstr. 7',
                'payment_related_information': None,
                'payment_related_information2': None,
                'receiver_city': 'BEVERLY HILLS',
                'receiver_country': 'US',
                'receiver_identification_number': '1018790279274',
                'receiver_postal_code': '90210',
                'receiver_state_or_province': 'CA',
                'receiver_street_address': '123 FAKE ST',
                'receiving_company_or_individual_name': 'IAN CREASE',
                'receiving_depository_financial_institution_country': 'US',
                'receiving_depository_financial_institution_id': '101050001',
                'receiving_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'receiving_depository_financial_institution_name': 'BLUE RIDGE BANK, NATIONAL ASSOCIATI',
                'trace_number': '010202909100090',
            }
        ],
        title='International ACH Decline',
    )


class Type43(Enum):
    declined_transaction = 'declined_transaction'


class DeclinedTransaction2(BaseModel):
    account_id: str = Field(
        ...,
        description='The identifier for the Account the Declined Transaction belongs to.',
    )
    amount: int = Field(
        ...,
        description='The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.",
    )
    description: str = Field(
        ..., description='This is the description the vendor provides.'
    )
    id: str = Field(..., description='The Declined Transaction identifier.')
    route_id: str = Field(
        ...,
        description='The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.',
    )
    route_type: str = Field(
        ..., description='The type of the route this Declined Transaction came through.'
    )
    source: Source3 = Field(
        ...,
        description="This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.",
        examples=[
            {
                'ach_decline': {
                    'amount': 1750,
                    'originator_company_descriptive_date': None,
                    'originator_company_discretionary_data': None,
                    'originator_company_id': '0987654321',
                    'originator_company_name': 'BIG BANK',
                    'reason': 'insufficient_funds',
                    'receiver_id_number': '12345678900',
                    'receiver_name': 'IAN CREASE',
                    'trace_number': '021000038461022',
                },
                'category': 'ach_decline',
            }
        ],
        title='Declined Transaction Source',
    )
    type: Type43 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `declined_transaction`.",
    )


class AccountTransferInstruction(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Account Transfer that led to this Pending Transaction.',
    )


class AchTransferInstruction(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the ACH Transfer that led to this Pending Transaction.',
    )


class Visa3(BaseModel):
    electronic_commerce_indicator: ElectronicCommerceIndicator = Field(
        ...,
        description="For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
    )
    point_of_service_entry_mode: PointOfServiceEntryMode = Field(
        ...,
        description="The method used to enter the cardholder's primary account number and card expiration date",
    )


class NetworkDetails3(BaseModel):
    visa: Visa3 = Field(
        ..., description='Fields specific to the `visa` network', title='Visa'
    )


class CardAuthorization1(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    digital_wallet_token_id: str = Field(
        ...,
        description='If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.',
    )
    merchant_acceptor_id: str = Field(
        ...,
        description='The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.',
    )
    merchant_category_code: str = Field(
        ...,
        description='The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.',
    )
    merchant_city: str = Field(..., description='The city the merchant resides in.')
    merchant_country: str = Field(
        ..., description='The country the merchant resides in.'
    )
    merchant_descriptor: str = Field(
        ...,
        description='The merchant descriptor of the merchant the card is transacting with.',
    )
    network: Network2 = Field(
        ..., description='The payment network used to process this card authorization'
    )
    network_details: NetworkDetails3 = Field(
        ..., description='Fields specific to the `network`', title='Network Details'
    )
    real_time_decision_id: str = Field(
        ...,
        description='The identifier of the Real-Time Decision sent to approve or decline this transaction.',
    )


class CardRouteAuthorization(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class Category8(Enum):
    account_transfer_instruction = 'account_transfer_instruction'
    ach_transfer_instruction = 'ach_transfer_instruction'
    card_authorization = 'card_authorization'
    check_deposit_instruction = 'check_deposit_instruction'
    check_transfer_instruction = 'check_transfer_instruction'
    inbound_funds_hold = 'inbound_funds_hold'
    card_route_authorization = 'card_route_authorization'
    real_time_payments_transfer_instruction = 'real_time_payments_transfer_instruction'
    wire_drawdown_payment_instruction = 'wire_drawdown_payment_instruction'
    wire_transfer_instruction = 'wire_transfer_instruction'
    other = 'other'


class CheckDepositInstruction(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    back_image_file_id: str = Field(
        ...,
        description='The identifier of the File containing the image of the back of the check that was deposited.',
    )
    check_deposit_id: str = Field(
        ..., description='The identifier of the Check Deposit.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    front_image_file_id: str = Field(
        ...,
        description='The identifier of the File containing the image of the front of the check that was deposited.',
    )


class CheckTransferInstruction(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Check Transfer that led to this Pending Transaction.',
    )


class Status27(Enum):
    held = 'held'
    complete = 'complete'


class InboundFundsHold(BaseModel):
    amount: int = Field(
        ...,
        description="The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.",
    )
    automatically_releases_at: datetime = Field(
        ...,
        description='When the hold will be released automatically. Certain conditions may cause it to be released before this time.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.",
    )
    held_transaction_id: str = Field(
        ..., description='The ID of the Transaction for which funds were held.'
    )
    released_at: datetime = Field(
        ..., description='When the hold was released (if it has been released).'
    )
    status: Status27 = Field(..., description='The status of the hold.')


class WireDrawdownPaymentInstruction(BaseModel):
    account_number: str = Field(..., description='')
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    message_to_recipient: str = Field(..., description='')
    routing_number: str = Field(..., description='')


class WireTransferInstruction(BaseModel):
    account_number: str = Field(..., description='')
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    message_to_recipient: str = Field(..., description='')
    routing_number: str = Field(..., description='')
    transfer_id: str = Field(..., description='')


class Source4(BaseModel):
    account_transfer_instruction: AccountTransferInstruction = Field(
        ...,
        description='A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n',
            }
        ],
        title='Account Transfer Instruction',
    )
    ach_transfer_instruction: AchTransferInstruction = Field(
        ...,
        description='A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.',
        examples=[{'amount': 100, 'transfer_id': 'ach_transfer_uoxatyh3lt5evrsdvo7q'}],
        title='ACH Transfer Instruction',
    )
    card_authorization: CardAuthorization1 = Field(
        ...,
        description='A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'digital_wallet_token_id': None,
                'merchant_acceptor_id': '5665270011000168',
                'merchant_category_code': '5734',
                'merchant_city': 'New York',
                'merchant_country': 'US',
                'merchant_descriptor': 'AMAZON.COM',
                'network': 'visa',
                'network_details': {
                    'visa': {
                        'electronic_commerce_indicator': 'secure_electronic_commerce',
                        'point_of_service_entry_mode': 'manual',
                    }
                },
                'real_time_decision_id': None,
            }
        ],
        title='Card Authorization',
    )
    card_route_authorization: CardRouteAuthorization = Field(
        ...,
        description='A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'merchant_acceptor_id': '6631945550173363',
                'merchant_category_code': '5734',
                'merchant_city': 'New York',
                'merchant_country': 'US',
                'merchant_descriptor': 'THUMP COFFEE',
                'merchant_state': 'NY',
            }
        ],
        title='Deprecated Card Authorization',
    )
    category: Category8 = Field(
        ...,
        description='The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    check_deposit_instruction: CheckDepositInstruction = Field(
        ...,
        description='A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.',
        examples=[
            {
                'amount': 100,
                'back_image_file_id': 'file_26khfk98mzfz90a11oqx',
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'front_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
            }
        ],
        title='Check Deposit Instruction',
    )
    check_transfer_instruction: CheckTransferInstruction = Field(
        ...,
        description='A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
            }
        ],
        title='Check Transfer Instruction',
    )
    inbound_funds_hold: InboundFundsHold = Field(
        ...,
        description='A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.',
        examples=[
            {
                'amount': 100,
                'automatically_releases_at': '2020-01-31T23:59:59Z',
                'currency': 'USD',
                'held_transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'released_at': None,
                'status': 'held',
            }
        ],
        title='Inbound Funds Hold',
    )
    wire_drawdown_payment_instruction: WireDrawdownPaymentInstruction = Field(
        ...,
        description='A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
            }
        ],
        title='Wire Drawdown Payment Instruction',
    )
    wire_transfer_instruction: WireTransferInstruction = Field(
        ...,
        description='A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
                'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u',
            }
        ],
        title='Wire Transfer Instruction',
    )


class Status28(Enum):
    pending = 'pending'
    complete = 'complete'


class Type44(Enum):
    pending_transaction = 'pending_transaction'


class PendingTransaction(BaseModel):
    account_id: str = Field(
        ...,
        description='The identifier for the account this Pending Transaction belongs to.',
    )
    amount: int = Field(
        ...,
        description='The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.",
    )
    description: str = Field(
        ...,
        description='For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.',
    )
    id: str = Field(..., description='The Pending Transaction identifier.')
    route_id: str = Field(
        ...,
        description='The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.',
    )
    route_type: str = Field(
        ..., description='The type of the route this Pending Transaction came through.'
    )
    source: Source4 = Field(
        ...,
        description="This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.",
        examples=[
            {
                'ach_transfer_instruction': {
                    'amount': 100,
                    'transfer_id': 'ach_transfer_uoxatyh3lt5evrsdvo7q',
                },
                'category': 'ach_transfer_instruction',
            }
        ],
        title='Pending Transaction Source',
    )
    status: Status28 = Field(
        ...,
        description='Whether the Pending Transaction has been confirmed and has an associated Transaction.',
    )
    type: Type44 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `pending_transaction`.",
    )


class Type45(Enum):
    inbound_card_authorization_simulation_result = (
        'inbound_card_authorization_simulation_result'
    )


class InboundCardAuthorizationSimulationResult(BaseModel):
    declined_transaction: DeclinedTransaction2 = Field(
        ...,
        description="If the authorization attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: card_decline`.",
        examples=[
            {
                'account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 1750,
                'created_at': '2020-01-31T23:59:59Z',
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'id': 'declined_transaction_17jbn0yyhvkt4v4ooym8',
                'route_id': 'account_number_v18nkfqm6afpsrvy82b2',
                'route_type': 'account_number',
                'source': {
                    'ach_decline': {
                        'amount': 1750,
                        'originator_company_descriptive_date': None,
                        'originator_company_discretionary_data': None,
                        'originator_company_id': '0987654321',
                        'originator_company_name': 'BIG BANK',
                        'reason': 'insufficient_funds',
                        'receiver_id_number': '12345678900',
                        'receiver_name': 'IAN CREASE',
                        'trace_number': '021000038461022',
                    },
                    'category': 'ach_decline',
                },
                'type': 'declined_transaction',
            }
        ],
        title='Declined Transaction',
    )
    pending_transaction: PendingTransaction = Field(
        ...,
        description="If the authorization attempt succeeds, this will contain the resulting Pending Transaction object. The Pending Transaction's `source` will be of `category: card_authorization`.",
        examples=[
            {
                'account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 100,
                'created_at': '2020-01-31T23:59:59Z',
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'id': 'pending_transaction_k1sfetcau2qbvjbzgju4',
                'route_id': 'card_route_jk5pd79u6ydmbf9qzu6i',
                'route_type': 'transfer_instruction',
                'source': {
                    'ach_transfer_instruction': {
                        'amount': 100,
                        'transfer_id': 'ach_transfer_uoxatyh3lt5evrsdvo7q',
                    },
                    'category': 'ach_transfer_instruction',
                },
                'status': 'pending',
                'type': 'pending_transaction',
            }
        ],
        title='Pending Transaction',
    )
    type: Type45 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `inbound_card_authorization_simulation_result`.",
    )


class DeclineReason(Enum):
    card_not_active = 'card_not_active'
    no_verification_method = 'no_verification_method'
    webhook_timed_out = 'webhook_timed_out'
    webhook_declined = 'webhook_declined'


class Type46(Enum):
    inbound_digital_wallet_token_request_simulation_result = (
        'inbound_digital_wallet_token_request_simulation_result'
    )


class InboundDigitalWalletTokenRequestSimulationResult(BaseModel):
    decline_reason: DeclineReason = Field(
        ...,
        description='If the simulated tokenization attempt was declined, this field contains details as to why.',
    )
    digital_wallet_token_id: str = Field(
        ...,
        description='If the simulated tokenization attempt was accepted, this field contains the id of the Digital Wallet Token that was created.',
    )
    type: Type46 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `inbound_digital_wallet_token_request_simulation_result`.",
    )


class Reason16(Enum):
    ach_route_canceled = 'ach_route_canceled'
    ach_route_disabled = 'ach_route_disabled'
    breaches_limit = 'breaches_limit'
    credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver'
    duplicate_return = 'duplicate_return'
    entity_not_active = 'entity_not_active'
    transaction_not_allowed = 'transaction_not_allowed'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    no_ach_route = 'no_ach_route'
    originator_request = 'originator_request'


class AchDecline3(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    originator_company_descriptive_date: str = Field(..., description='')
    originator_company_discretionary_data: str = Field(..., description='')
    originator_company_id: str = Field(..., description='')
    originator_company_name: str = Field(..., description='')
    reason: Reason16 = Field(..., description='Why the ACH transfer was declined.')
    receiver_id_number: str = Field(..., description='')
    receiver_name: str = Field(..., description='')
    trace_number: str = Field(..., description='')


class Visa4(BaseModel):
    electronic_commerce_indicator: ElectronicCommerceIndicator = Field(
        ...,
        description="For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
    )
    point_of_service_entry_mode: PointOfServiceEntryMode = Field(
        ...,
        description="The method used to enter the cardholder's primary account number and card expiration date",
    )


class NetworkDetails4(BaseModel):
    visa: Visa4 = Field(
        ..., description='Fields specific to the `visa` network', title='Visa'
    )


class Reason17(Enum):
    card_not_active = 'card_not_active'
    entity_not_active = 'entity_not_active'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    cvv2_mismatch = 'cvv2_mismatch'
    transaction_not_allowed = 'transaction_not_allowed'
    breaches_limit = 'breaches_limit'
    webhook_declined = 'webhook_declined'
    webhook_timed_out = 'webhook_timed_out'
    declined_by_stand_in_processing = 'declined_by_stand_in_processing'


class CardDecline3(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    digital_wallet_token_id: str = Field(
        ...,
        description='If the authorization was attempted using a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.',
    )
    merchant_acceptor_id: str = Field(
        ...,
        description='The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.',
    )
    merchant_category_code: str = Field(
        ...,
        description='The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.',
    )
    merchant_city: str = Field(..., description='The city the merchant resides in.')
    merchant_country: str = Field(
        ..., description='The country the merchant resides in.'
    )
    merchant_descriptor: str = Field(
        ...,
        description='The merchant descriptor of the merchant the card is transacting with.',
    )
    merchant_state: str = Field(..., description='The state the merchant resides in.')
    network: Network2 = Field(
        ..., description='The payment network used to process this card authorization'
    )
    network_details: NetworkDetails4 = Field(
        ..., description='Fields specific to the `network`', title='Network Details'
    )
    real_time_decision_id: str = Field(
        ...,
        description='The identifier of the Real-Time Decision sent to approve or decline this transaction.',
    )
    reason: Reason17 = Field(..., description='Why the transaction was declined.')


class CardRouteDecline3(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class Category9(Enum):
    ach_decline = 'ach_decline'
    card_decline = 'card_decline'
    check_decline = 'check_decline'
    inbound_real_time_payments_transfer_decline = (
        'inbound_real_time_payments_transfer_decline'
    )
    international_ach_decline = 'international_ach_decline'
    card_route_decline = 'card_route_decline'
    other = 'other'


class Reason18(Enum):
    ach_route_canceled = 'ach_route_canceled'
    ach_route_disabled = 'ach_route_disabled'
    breaches_limit = 'breaches_limit'
    entity_not_active = 'entity_not_active'
    group_locked = 'group_locked'
    insufficient_funds = 'insufficient_funds'
    unable_to_locate_account = 'unable_to_locate_account'
    unable_to_process = 'unable_to_process'
    refer_to_image = 'refer_to_image'
    stop_payment_requested = 'stop_payment_requested'
    returned = 'returned'


class CheckDecline3(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    auxiliary_on_us: str = Field(..., description='')
    reason: Reason18 = Field(..., description='Why the check was declined.')


class Reason19(Enum):
    account_number_canceled = 'account_number_canceled'
    account_number_disabled = 'account_number_disabled'
    group_locked = 'group_locked'
    entity_not_active = 'entity_not_active'
    real_time_payments_not_enabled = 'real_time_payments_not_enabled'


class InboundRealTimePaymentsTransferDecline3(BaseModel):
    amount: int = Field(
        ...,
        description='The declined amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    creditor_name: str = Field(
        ...,
        description='The name the sender of the transfer specified as the recipient of the transfer.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the declined transfer\'s currency. This will always be "USD" for a Real Time Payments transfer.',
    )
    debtor_account_number: str = Field(
        ..., description='The account number of the account that sent the transfer.'
    )
    debtor_name: str = Field(
        ..., description='The name provided by the sender of the transfer.'
    )
    debtor_routing_number: str = Field(
        ..., description='The routing number of the account that sent the transfer.'
    )
    reason: Reason19 = Field(..., description='Why the transfer was declined.')
    remittance_information: str = Field(
        ..., description='Additional information included with the transfer.'
    )
    transaction_identification: str = Field(
        ...,
        description='The Real Time Payments network identification of the declined transfer.',
    )


class Source5(BaseModel):
    ach_decline: AchDecline3 = Field(
        ...,
        description='A ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `ach_decline`.',
        examples=[
            {
                'amount': 1750,
                'originator_company_descriptive_date': None,
                'originator_company_discretionary_data': None,
                'originator_company_id': '0987654321',
                'originator_company_name': 'BIG BANK',
                'reason': 'insufficient_funds',
                'receiver_id_number': '12345678900',
                'receiver_name': 'IAN CREASE',
                'trace_number': '021000038461022',
            }
        ],
        title='ACH Decline',
    )
    card_decline: CardDecline3 = Field(
        ...,
        description='A Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_decline`.',
        examples=[
            {
                'amount': -1000,
                'currency': 'USD',
                'digital_wallet_token_id': None,
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
                'network': 'visa',
                'network_details': {
                    'visa': {
                        'electronic_commerce_indicator': 'secure_electronic_commerce',
                        'point_of_service_entry_mode': 'manual',
                    }
                },
                'real_time_decision_id': None,
                'reason': 'insufficient_funds',
            }
        ],
        title='Card Decline',
    )
    card_route_decline: CardRouteDecline3 = Field(
        ...,
        description='A Deprecated Card Decline object. This field will be present in the JSON response if and only if `category` is equal to `card_route_decline`.',
        examples=[
            {
                'amount': -1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Decline',
    )
    category: Category9 = Field(
        ...,
        description='The type of decline that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    check_decline: CheckDecline3 = Field(
        ...,
        description='A Check Decline object. This field will be present in the JSON response if and only if `category` is equal to `check_decline`.',
        examples=[
            {
                'amount': -1000,
                'auxiliary_on_us': '99999',
                'reason': 'insufficient_funds',
            }
        ],
        title='Check Decline',
    )
    inbound_real_time_payments_transfer_decline: (
        InboundRealTimePaymentsTransferDecline3
    ) = Field(
        ...,
        description='A Inbound Real Time Payments Transfer Decline object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_decline`.',
        examples=[
            {
                'amount': 100,
                'creditor_name': 'Ian Crease',
                'currency': 'USD',
                'debtor_account_number': '987654321',
                'debtor_name': 'National Phonograph Company',
                'debtor_routing_number': '101050001',
                'reason': 'account_number_disabled',
                'remittance_information': 'Invoice 29582',
                'transaction_identification': '20220501234567891T1BSLZO01745013025',
            }
        ],
        title='Inbound Real Time Payments Transfer Decline',
    )
    international_ach_decline: InternationalAchDecline = Field(
        ...,
        description='A International ACH Decline object. This field will be present in the JSON response if and only if `category` is equal to `international_ach_decline`.',
        examples=[
            {
                'amount': -1000,
                'destination_country_code': 'US',
                'destination_currency_code': 'USD',
                'foreign_exchange_indicator': 'fixed_to_fixed',
                'foreign_exchange_reference': None,
                'foreign_exchange_reference_indicator': 'blank',
                'foreign_payment_amount': 199,
                'foreign_trace_number': None,
                'international_transaction_type_code': 'internet_initiated',
                'originating_currency_code': 'USD',
                'originating_depository_financial_institution_branch_country': 'US',
                'originating_depository_financial_institution_id': '091000019',
                'originating_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'originating_depository_financial_institution_name': 'WELLS FARGO BANK',
                'originator_city': 'BERLIN',
                'originator_company_entry_description': 'RETRY PYMT',
                'originator_country': 'DE',
                'originator_identification': '770510487A',
                'originator_name': 'BERGHAIN',
                'originator_postal_code': '50825',
                'originator_state_or_province': None,
                'originator_street_address': 'Ruedersdorferstr. 7',
                'payment_related_information': None,
                'payment_related_information2': None,
                'receiver_city': 'BEVERLY HILLS',
                'receiver_country': 'US',
                'receiver_identification_number': '1018790279274',
                'receiver_postal_code': '90210',
                'receiver_state_or_province': 'CA',
                'receiver_street_address': '123 FAKE ST',
                'receiving_company_or_individual_name': 'IAN CREASE',
                'receiving_depository_financial_institution_country': 'US',
                'receiving_depository_financial_institution_id': '101050001',
                'receiving_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'receiving_depository_financial_institution_name': 'BLUE RIDGE BANK, NATIONAL ASSOCIATI',
                'trace_number': '010202909100090',
            }
        ],
        title='International ACH Decline',
    )


class Type47(Enum):
    declined_transaction = 'declined_transaction'


class DeclinedTransaction3(BaseModel):
    account_id: str = Field(
        ...,
        description='The identifier for the Account the Declined Transaction belongs to.',
    )
    amount: int = Field(
        ...,
        description='The Declined Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Declined Transaction's currency. This will match the currency on the Declined Transcation's Account.",
    )
    description: str = Field(
        ..., description='This is the description the vendor provides.'
    )
    id: str = Field(..., description='The Declined Transaction identifier.')
    route_id: str = Field(
        ...,
        description='The identifier for the route this Declined Transaction came through. Routes are things like cards and ACH details.',
    )
    route_type: str = Field(
        ..., description='The type of the route this Declined Transaction came through.'
    )
    source: Source5 = Field(
        ...,
        description="This is an object giving more details on the network-level event that caused the Declined Transaction. For example, for a card transaction this lists the merchant's industry and location. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.",
        examples=[
            {
                'ach_decline': {
                    'amount': 1750,
                    'originator_company_descriptive_date': None,
                    'originator_company_discretionary_data': None,
                    'originator_company_id': '0987654321',
                    'originator_company_name': 'BIG BANK',
                    'reason': 'insufficient_funds',
                    'receiver_id_number': '12345678900',
                    'receiver_name': 'IAN CREASE',
                    'trace_number': '021000038461022',
                },
                'category': 'ach_decline',
            }
        ],
        title='Declined Transaction Source',
    )
    type: Type47 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `declined_transaction`.",
    )


class AccountTransferIntention1(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    description: str = Field(
        ..., description='The description you chose to give the transfer.'
    )
    destination_account_id: str = Field(
        ...,
        description='The identifier of the Account to where the Account Transfer was sent.',
    )
    source_account_id: str = Field(
        ...,
        description='The identifier of the Account from where the Account Transfer was sent.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Account Transfer that led to this Pending Transaction.',
    )


class AchTransferReturn1(BaseModel):
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.',
    )
    return_reason_code: ReturnReasonCode = Field(
        ..., description='Why the ACH Transfer was returned.'
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the Tranasaction associated with this return.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the ACH Transfer associated with this return.',
    )


class Type48(Enum):
    card_refund = 'card_refund'


class CardRefund1(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    card_settlement_transaction_id: str = Field(
        ..., description='The identifier for the Transaction this refunds, if any.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    type: Type48 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_refund`.",
    )


class CardRouteRefund1(BaseModel):
    amount: int = Field(
        ...,
        description='The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class CardRouteSettlement1(BaseModel):
    amount: int = Field(
        ...,
        description='The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class Type49(Enum):
    card_settlement = 'card_settlement'


class CardSettlement1(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.",
    )
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_name: str = Field(..., description='')
    merchant_state: str = Field(..., description='')
    pending_transaction_id: str = Field(
        ...,
        description='The identifier of the Pending Transaction associated with this Transaction.',
    )
    presentment_amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's presentment currency.",
    )
    presentment_currency: str = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.",
    )
    type: Type49 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_settlement`.",
    )


class Category10(Enum):
    account_transfer_intention = 'account_transfer_intention'
    ach_check_conversion_return = 'ach_check_conversion_return'
    ach_check_conversion = 'ach_check_conversion'
    ach_transfer_intention = 'ach_transfer_intention'
    ach_transfer_rejection = 'ach_transfer_rejection'
    ach_transfer_return = 'ach_transfer_return'
    card_dispute_acceptance = 'card_dispute_acceptance'
    card_refund = 'card_refund'
    card_settlement = 'card_settlement'
    check_deposit_acceptance = 'check_deposit_acceptance'
    check_deposit_return = 'check_deposit_return'
    check_transfer_intention = 'check_transfer_intention'
    check_transfer_return = 'check_transfer_return'
    check_transfer_rejection = 'check_transfer_rejection'
    check_transfer_stop_payment_request = 'check_transfer_stop_payment_request'
    dispute_resolution = 'dispute_resolution'
    empyreal_cash_deposit = 'empyreal_cash_deposit'
    inbound_ach_transfer = 'inbound_ach_transfer'
    inbound_ach_transfer_return_intention = 'inbound_ach_transfer_return_intention'
    inbound_check = 'inbound_check'
    inbound_international_ach_transfer = 'inbound_international_ach_transfer'
    inbound_real_time_payments_transfer_confirmation = (
        'inbound_real_time_payments_transfer_confirmation'
    )
    inbound_wire_drawdown_payment_reversal = 'inbound_wire_drawdown_payment_reversal'
    inbound_wire_drawdown_payment = 'inbound_wire_drawdown_payment'
    inbound_wire_reversal = 'inbound_wire_reversal'
    inbound_wire_transfer = 'inbound_wire_transfer'
    interest_payment = 'interest_payment'
    internal_general_ledger_transaction = 'internal_general_ledger_transaction'
    internal_source = 'internal_source'
    card_route_refund = 'card_route_refund'
    card_route_settlement = 'card_route_settlement'
    real_time_payments_transfer_acknowledgement = (
        'real_time_payments_transfer_acknowledgement'
    )
    sample_funds = 'sample_funds'
    wire_drawdown_payment_intention = 'wire_drawdown_payment_intention'
    wire_drawdown_payment_rejection = 'wire_drawdown_payment_rejection'
    wire_transfer_intention = 'wire_transfer_intention'
    wire_transfer_rejection = 'wire_transfer_rejection'
    other = 'other'


class CheckDepositAcceptance1(BaseModel):
    account_number: str = Field(
        ..., description='The account number printed on the check.'
    )
    amount: int = Field(
        ...,
        description="The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    auxiliary_on_us: str = Field(
        ...,
        description='An additional line of metadata printed on the check. This typically includes the check number for business checks.',
    )
    check_deposit_id: str = Field(
        ..., description='The ID of the Check Deposit that was accepted.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    routing_number: str = Field(
        ..., description='The routing number printed on the check.'
    )
    serial_number: str = Field(
        ...,
        description='The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.',
    )


class CheckDepositReturn1(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    check_deposit_id: str = Field(
        ..., description='The identifier of the Check Deposit that was returned.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    return_reason: ReturnReason = Field(..., description='')
    returned_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.',
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the transaction that reversed the original check deposit transaction.',
    )


class CheckTransferIntention1(BaseModel):
    address_city: str = Field(..., description="The city of the check's destination.")
    address_line1: str = Field(
        ..., description="The street address of the check's destination."
    )
    address_line2: str = Field(
        ..., description="The second line of the address of the check's destination."
    )
    address_state: str = Field(..., description="The state of the check's destination.")
    address_zip: str = Field(
        ..., description="The postal code of the check's destination."
    )
    amount: int = Field(..., description='The transfer amount in USD cents.')
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
    )
    recipient_name: str = Field(
        ..., description='The name that will be printed on the check.'
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Check Transfer with which this is associated.',
    )


class Type50(Enum):
    check_transfer_stop_payment_request = 'check_transfer_stop_payment_request'


class CheckTransferStopPaymentRequest1(BaseModel):
    requested_at: datetime = Field(
        ..., description='The time the stop-payment was requested.'
    )
    transaction_id: str = Field(
        ..., description='The transaction ID of the corresponding credit transaction.'
    )
    transfer_id: str = Field(
        ..., description='The ID of the check transfer that was stopped.'
    )
    type: Type50 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.",
    )


class DisputeResolution1(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    disputed_transaction_id: str = Field(
        ..., description='The identifier of the Transaction that was disputed.'
    )


class InboundCheck1(BaseModel):
    amount: int = Field(
        ...,
        description='The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    check_front_image_file_id: str = Field(..., description='')
    check_number: str = Field(..., description='')
    check_rear_image_file_id: str = Field(..., description='')
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )


class InboundRealTimePaymentsTransferConfirmation1(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.",
    )
    creditor_name: str = Field(
        ...,
        description='The name the sender of the transfer specified as the recipient of the transfer.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer\'s currency. This will always be "USD" for a Real Time Payments transfer.',
    )
    debtor_account_number: str = Field(
        ..., description='The account number of the account that sent the transfer.'
    )
    debtor_name: str = Field(
        ..., description='The name provided by the sender of the transfer.'
    )
    debtor_routing_number: str = Field(
        ..., description='The routing number of the account that sent the transfer.'
    )
    remittance_information: str = Field(
        ..., description='Additional information included with the transfer.'
    )
    transaction_identification: str = Field(
        ..., description='The Real Time Payments network identification of the transfer'
    )


class InterestPayment1(BaseModel):
    accrued_on_account_id: str = Field(
        ..., description='The account on which the interest was accrued.'
    )
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.',
    )
    period_end: datetime = Field(
        ...,
        description='The end of the period for which this transaction paid interest.',
    )
    period_start: datetime = Field(
        ...,
        description='The start of the period for which this transaction paid interest.',
    )


class Reason20(Enum):
    bank_migration = 'bank_migration'
    cashback = 'cashback'
    empyreal_adjustment = 'empyreal_adjustment'
    error = 'error'
    error_correction = 'error_correction'
    fees = 'fees'
    interest = 'interest'
    sample_funds = 'sample_funds'
    sample_funds_return = 'sample_funds_return'


class InternalSource1(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.',
    )
    reason: Reason20 = Field(..., description='')


class Source6(BaseModel):
    account_transfer_intention: AccountTransferIntention1 = Field(
        ...,
        description='A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'destination_account_id': 'account_uf16sut2ct5bevmq3eh',
                'source_account_id': 'account_in71c4amph0vgo2qllky',
                'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n',
            }
        ],
        title='Account Transfer Intention',
    )
    ach_check_conversion: AchCheckConversion = Field(
        ...,
        description='A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.',
        examples=[{'amount': 100, 'file_id': 'file_makxrc67oh9l6sg7w9yc'}],
        title='ACH Check Conversion',
    )
    ach_check_conversion_return: AchCheckConversionReturn = Field(
        ...,
        description='A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.',
        examples=[{'amount': 100, 'return_reason_code': ''}],
        title='ACH Check Conversion Return',
    )
    ach_transfer_intention: AchTransferIntention = Field(
        ...,
        description='A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'routing_number': '101050001',
                'statement_descriptor': 'Frederick S. Holmes',
                'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n',
            }
        ],
        title='ACH Transfer Intention',
    )
    ach_transfer_rejection: AchTransferRejection = Field(
        ...,
        description='A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.',
        examples=[{'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n'}],
        title='ACH Transfer Rejection',
    )
    ach_transfer_return: AchTransferReturn1 = Field(
        ...,
        description='A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.',
        examples=[
            {
                'created_at': '2020-01-31T23:59:59Z',
                'return_reason_code': 'insufficient_fund',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'transfer_id': 'ach_transfer_uoxatyh3lt5evrsdvo7q',
            }
        ],
        title='ACH Transfer Return',
    )
    card_dispute_acceptance: CardDisputeAcceptance = Field(
        ...,
        description='A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.',
        examples=[
            {
                'accepted_at': '2020-01-31T23:59:59Z',
                'card_dispute_id': 'card_dispute_h9sc95nbl1cgltpp7men',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Card Dispute Acceptance',
    )
    card_refund: CardRefund1 = Field(
        ...,
        description='A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.',
        examples=[
            {
                'amount': 100,
                'card_settlement_transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'currency': 'USD',
                'type': 'card_refund',
            }
        ],
        title='Card Refund',
    )
    card_route_refund: CardRouteRefund1 = Field(
        ...,
        description='A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.',
        examples=[
            {
                'amount': 1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Refund',
    )
    card_route_settlement: CardRouteSettlement1 = Field(
        ...,
        description='A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.',
        examples=[
            {
                'amount': 1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Settlement',
    )
    card_settlement: CardSettlement1 = Field(
        ...,
        description='A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'merchant_category_code': '5734',
                'merchant_city': 'New York',
                'merchant_country': 'US',
                'merchant_name': 'AMAZON.COM',
                'merchant_state': 'NY',
                'pending_transaction_id': None,
                'presentment_amount': 100,
                'presentment_currency': 'USD',
                'type': 'card_settlement',
            }
        ],
        title='Card Settlement',
    )
    category: Category10 = Field(
        ...,
        description='The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    check_deposit_acceptance: CheckDepositAcceptance1 = Field(
        ...,
        description='A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'auxiliary_on_us': '101',
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'routing_number': '101050001',
                'serial_number': None,
            }
        ],
        title='Check Deposit Acceptance',
    )
    check_deposit_return: CheckDepositReturn1 = Field(
        ...,
        description='A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.',
        examples=[
            {
                'amount': 100,
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'return_reason': 'insufficient_funds',
                'returned_at': '2020-01-31T23:59:59Z',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Check Deposit Return',
    )
    check_transfer_intention: CheckTransferIntention1 = Field(
        ...,
        description='A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.',
        examples=[
            {
                'address_city': 'New York',
                'address_line1': '33 Liberty Street',
                'address_line2': None,
                'address_state': 'NY',
                'address_zip': '10045',
                'amount': 1000,
                'currency': 'USD',
                'recipient_name': 'Ian Crease',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
            }
        ],
        title='Check Transfer Intention',
    )
    check_transfer_rejection: CheckTransferRejection = Field(
        ...,
        description='A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.',
        examples=[{'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5'}],
        title='Check Transfer Rejection',
    )
    check_transfer_return: CheckTransferReturn = Field(
        ...,
        description='A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.',
        examples=[
            {'file_id': None, 'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5'}
        ],
        title='Check Transfer Return',
    )
    check_transfer_stop_payment_request: CheckTransferStopPaymentRequest1 = Field(
        ...,
        description='A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.',
        examples=[
            {
                'requested_at': '2020-01-31T23:59:59Z',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
                'type': 'check_transfer_stop_payment_request',
            }
        ],
        title='Check Transfer Stop Payment Request',
    )
    dispute_resolution: DisputeResolution1 = Field(
        ...,
        description='A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'disputed_transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Dispute Resolution',
    )
    empyreal_cash_deposit: EmpyrealCashDeposit = Field(
        ...,
        description='A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.',
        examples=[
            {'amount': 100, 'bag_id': '12345', 'deposit_date': '2020-01-31T23:59:59Z'}
        ],
        title='Empyreal Cash Deposit',
    )
    inbound_ach_transfer: InboundAchTransfer = Field(
        ...,
        description='A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.',
        examples=[
            {
                'amount': 100,
                'originator_company_descriptive_date': None,
                'originator_company_discretionary_data': None,
                'originator_company_entry_description': 'RESERVE',
                'originator_company_id': '0987654321',
                'originator_company_name': 'BIG BANK',
                'receiver_id_number': '12345678900',
                'receiver_name': 'IAN CREASE',
                'trace_number': '021000038461022',
            }
        ],
        title='Inbound ACH Transfer',
    )
    inbound_check: InboundCheck1 = Field(
        ...,
        description='A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.',
        examples=[
            {
                'amount': 100,
                'check_front_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
                'check_number': '       00000123',
                'check_rear_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
                'currency': 'USD',
            }
        ],
        title='Inbound Check',
    )
    inbound_international_ach_transfer: InboundInternationalAchTransfer = Field(
        ...,
        description='A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.',
        examples=[
            {
                'amount': -1000,
                'destination_country_code': 'US',
                'destination_currency_code': 'USD',
                'foreign_exchange_indicator': 'fixed_to_fixed',
                'foreign_exchange_reference': None,
                'foreign_exchange_reference_indicator': 'blank',
                'foreign_payment_amount': 199,
                'foreign_trace_number': None,
                'international_transaction_type_code': 'internet_initiated',
                'originating_currency_code': 'USD',
                'originating_depository_financial_institution_branch_country': 'US',
                'originating_depository_financial_institution_id': '091000019',
                'originating_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'originating_depository_financial_institution_name': 'WELLS FARGO BANK',
                'originator_city': 'BERLIN',
                'originator_company_entry_description': 'RETRY PYMT',
                'originator_country': 'DE',
                'originator_identification': '770510487A',
                'originator_name': 'BERGHAIN',
                'originator_postal_code': '50825',
                'originator_state_or_province': None,
                'originator_street_address': 'Ruedersdorferstr. 7',
                'payment_related_information': None,
                'payment_related_information2': None,
                'receiver_city': 'BEVERLY HILLS',
                'receiver_country': 'US',
                'receiver_identification_number': '1018790279274',
                'receiver_postal_code': '90210',
                'receiver_state_or_province': 'CA',
                'receiver_street_address': '123 FAKE ST',
                'receiving_company_or_individual_name': 'IAN CREASE',
                'receiving_depository_financial_institution_country': 'US',
                'receiving_depository_financial_institution_id': '101050001',
                'receiving_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'receiving_depository_financial_institution_name': 'BLUE RIDGE BANK, NATIONAL ASSOCIATI',
                'trace_number': '010202909100090',
            }
        ],
        title='Inbound International ACH Transfer',
    )
    inbound_real_time_payments_transfer_confirmation: (
        InboundRealTimePaymentsTransferConfirmation1
    ) = Field(
        ...,
        description='A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.',
        examples=[
            {
                'amount': 100,
                'creditor_name': 'Ian Crease',
                'currency': 'USD',
                'debtor_account_number': '987654321',
                'debtor_name': 'National Phonograph Company',
                'debtor_routing_number': '101050001',
                'remittance_information': 'Invoice 29582',
                'transaction_identification': '20220501234567891T1BSLZO01745013025',
            }
        ],
        title='Inbound Real Time Payments Transfer Confirmation',
    )
    inbound_wire_drawdown_payment: InboundWireDrawdownPayment = Field(
        ...,
        description='A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.',
        examples=[
            {
                'amount': 100,
                'beneficiary_address_line1': None,
                'beneficiary_address_line2': None,
                'beneficiary_address_line3': None,
                'beneficiary_name': None,
                'beneficiary_reference': None,
                'description': 'Inbound wire drawdown payment',
                'input_message_accountability_data': None,
                'originator_address_line1': None,
                'originator_address_line2': None,
                'originator_address_line3': None,
                'originator_name': None,
                'originator_to_beneficiary_information': None,
            }
        ],
        title='Inbound Wire Drawdown Payment',
    )
    inbound_wire_drawdown_payment_reversal: InboundWireDrawdownPaymentReversal = Field(
        ...,
        description='A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.',
        examples=[
            {
                'amount': 12345,
                'description': 'Inbound wire reversal 2022021100335128',
                'input_cycle_date': '2022-02-11',
                'input_message_accountability_data': '20220211B6B7HU2R011023',
                'input_sequence_number': '11023',
                'input_source': 'B6B7HU2R',
                'previous_message_input_cycle_date': '2022-02-10',
                'previous_message_input_message_accountability_data': '20220210MMQFMP0P000007',
                'previous_message_input_sequence_number': '3',
                'previous_message_input_source': 'MMQFMP0P',
            }
        ],
        title='Inbound Wire Drawdown Payment Reversal',
    )
    inbound_wire_reversal: InboundWireReversal = Field(
        ...,
        description='A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.',
        examples=[
            {
                'amount': 12345,
                'description': 'Inbound wire reversal 2022021100335128',
                'financial_institution_to_financial_institution_information': None,
                'input_cycle_date': '2022-02-11',
                'input_message_accountability_data': '20220211B6B7HU2R011023',
                'input_sequence_number': '11023',
                'input_source': 'B6B7HU2R',
                'previous_message_input_cycle_date': '2022-02-10',
                'previous_message_input_message_accountability_data': '20220210MMQFMP0P000007',
                'previous_message_input_sequence_number': '3',
                'previous_message_input_source': 'MMQFMP0P',
                'receiver_financial_institution_information': None,
            }
        ],
        title='Inbound Wire Reversal',
    )
    inbound_wire_transfer: InboundWireTransfer = Field(
        ...,
        description='A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.',
        examples=[
            {
                'amount': 100,
                'beneficiary_address_line1': None,
                'beneficiary_address_line2': None,
                'beneficiary_address_line3': None,
                'beneficiary_name': None,
                'beneficiary_reference': None,
                'description': 'Inbound wire transfer',
                'input_message_accountability_data': None,
                'originator_address_line1': None,
                'originator_address_line2': None,
                'originator_address_line3': None,
                'originator_name': None,
                'originator_to_beneficiary_information': None,
                'originator_to_beneficiary_information_line1': None,
                'originator_to_beneficiary_information_line2': None,
                'originator_to_beneficiary_information_line3': None,
                'originator_to_beneficiary_information_line4': None,
            }
        ],
        title='Inbound Wire Transfer',
    )
    interest_payment: InterestPayment1 = Field(
        ...,
        description='A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.',
        examples=[
            {
                'accrued_on_account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 100,
                'currency': 'USD',
                'period_end': '2023-03-31T23:59:59Z',
                'period_start': '2023-03-01T00:00:00Z',
            }
        ],
        title='Interest Payment',
    )
    internal_source: InternalSource1 = Field(
        ...,
        description='A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.',
        examples=[{'amount': 100, 'currency': 'USD', 'reason': 'sample_funds'}],
        title='Internal Source',
    )
    sample_funds: SampleFunds = Field(
        ...,
        description='A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.',
        examples=[{'originator': 'dashboard'}],
        title='Sample Funds',
    )
    wire_drawdown_payment_intention: WireDrawdownPaymentIntention = Field(
        ...,
        description='A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
                'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u',
            }
        ],
        title='Wire Drawdown Payment Intention',
    )
    wire_drawdown_payment_rejection: WireDrawdownPaymentRejection = Field(
        ...,
        description='A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.',
        examples=[{'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u'}],
        title='Wire Drawdown Payment Rejection',
    )
    wire_transfer_intention: WireTransferIntention = Field(
        ...,
        description='A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
                'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u',
            }
        ],
        title='Wire Transfer Intention',
    )
    wire_transfer_rejection: WireTransferRejection = Field(
        ...,
        description='A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.',
        examples=[{'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u'}],
        title='Wire Transfer Rejection',
    )


class Type51(Enum):
    transaction = 'transaction'


class Transaction1(BaseModel):
    account_id: str = Field(
        ..., description='The identifier for the Account the Transaction belongs to.'
    )
    amount: int = Field(
        ...,
        description='The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.",
    )
    description: str = Field(
        ...,
        description='For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.',
    )
    id: str = Field(..., description='The Transaction identifier.')
    route_id: str = Field(
        ...,
        description='The identifier for the route this Transaction came through. Routes are things like cards and ACH details.',
    )
    route_type: str = Field(
        ..., description='The type of the route this Transaction came through.'
    )
    source: Source6 = Field(
        ...,
        description='This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.',
        examples=[
            {
                'category': 'inbound_ach_transfer',
                'inbound_ach_transfer': {
                    'amount': 100,
                    'originator_company_descriptive_date': None,
                    'originator_company_discretionary_data': None,
                    'originator_company_entry_description': 'RESERVE',
                    'originator_company_id': '0987654321',
                    'originator_company_name': 'BIG BANK',
                    'receiver_id_number': '12345678900',
                    'receiver_name': 'IAN CREASE',
                    'trace_number': '021000038461022',
                },
            }
        ],
        title='Transaction Source',
    )
    type: Type51 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `transaction`.",
    )


class Type52(Enum):
    inbound_real_time_payments_transfer_simulation_result = (
        'inbound_real_time_payments_transfer_simulation_result'
    )


class InboundRealTimePaymentsTransferSimulationResult(BaseModel):
    declined_transaction: DeclinedTransaction3 = Field(
        ...,
        description="If the Real Time Payments Transfer attempt fails, this will contain the resulting [Declined Transaction](#declined-transactions) object. The Declined Transaction's `source` will be of `category: inbound_real_time_payments_transfer_decline`.",
        examples=[
            {
                'account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 1750,
                'created_at': '2020-01-31T23:59:59Z',
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'id': 'declined_transaction_17jbn0yyhvkt4v4ooym8',
                'route_id': 'account_number_v18nkfqm6afpsrvy82b2',
                'route_type': 'account_number',
                'source': {
                    'ach_decline': {
                        'amount': 1750,
                        'originator_company_descriptive_date': None,
                        'originator_company_discretionary_data': None,
                        'originator_company_id': '0987654321',
                        'originator_company_name': 'BIG BANK',
                        'reason': 'insufficient_funds',
                        'receiver_id_number': '12345678900',
                        'receiver_name': 'IAN CREASE',
                        'trace_number': '021000038461022',
                    },
                    'category': 'ach_decline',
                },
                'type': 'declined_transaction',
            }
        ],
        title='Declined Transaction',
    )
    transaction: Transaction1 = Field(
        ...,
        description="If the Real Time Payments Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_real_time_payments_transfer_confirmation`.",
        examples=[
            {
                'account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 100,
                'created_at': '2020-01-31T23:59:59Z',
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'id': 'transaction_uyrp7fld2ium70oa7oi',
                'route_id': 'account_number_v18nkfqm6afpsrvy82b2',
                'route_type': 'account_number',
                'source': {
                    'category': 'inbound_ach_transfer',
                    'inbound_ach_transfer': {
                        'amount': 100,
                        'originator_company_descriptive_date': None,
                        'originator_company_discretionary_data': None,
                        'originator_company_entry_description': 'RESERVE',
                        'originator_company_id': '0987654321',
                        'originator_company_name': 'BIG BANK',
                        'receiver_id_number': '12345678900',
                        'receiver_name': 'IAN CREASE',
                        'trace_number': '021000038461022',
                    },
                },
                'type': 'transaction',
            }
        ],
        title='Transaction',
    )
    type: Type52 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `inbound_real_time_payments_transfer_simulation_result`.",
    )


class Type53(Enum):
    inbound_wire_drawdown_request = 'inbound_wire_drawdown_request'


class InboundWireDrawdownRequest(BaseModel):
    amount: int = Field(..., description='The amount being requested in cents.')
    beneficiary_account_number: str = Field(
        ..., description="The drawdown request's beneficiary's account number."
    )
    beneficiary_address_line1: str = Field(
        ..., description="Line 1 of the drawdown request's beneficiary's address."
    )
    beneficiary_address_line2: str = Field(
        ..., description="Line 2 of the drawdown request's beneficiary's address."
    )
    beneficiary_address_line3: str = Field(
        ..., description="Line 3 of the drawdown request's beneficiary's address."
    )
    beneficiary_name: str = Field(
        ..., description="The drawdown request's beneficiary's name."
    )
    beneficiary_routing_number: str = Field(
        ..., description="The drawdown request's beneficiary's routing number."
    )
    currency: str = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".',
    )
    id: str = Field(..., description='The Wire drawdown request identifier.')
    message_to_recipient: str = Field(
        ..., description="A message from the drawdown request's originator."
    )
    originator_account_number: str = Field(
        ..., description="The drawdown request's originator's account number."
    )
    originator_address_line1: str = Field(
        ..., description="Line 1 of the drawdown request's originator's address."
    )
    originator_address_line2: str = Field(
        ..., description="Line 2 of the drawdown request's originator's address."
    )
    originator_address_line3: str = Field(
        ..., description="Line 3 of the drawdown request's originator's address."
    )
    originator_name: str = Field(
        ..., description="The drawdown request's originator's name."
    )
    originator_routing_number: str = Field(
        ..., description="The drawdown request's originator's routing number."
    )
    originator_to_beneficiary_information_line1: str = Field(
        ...,
        description='Line 1 of the information conveyed from the originator of the message to the beneficiary.',
    )
    originator_to_beneficiary_information_line2: str = Field(
        ...,
        description='Line 2 of the information conveyed from the originator of the message to the beneficiary.',
    )
    originator_to_beneficiary_information_line3: str = Field(
        ...,
        description='Line 3 of the information conveyed from the originator of the message to the beneficiary.',
    )
    originator_to_beneficiary_information_line4: str = Field(
        ...,
        description='Line 4 of the information conveyed from the originator of the message to the beneficiary.',
    )
    recipient_account_number_id: str = Field(
        ...,
        description='The Account Number from which the recipient of this request is being requested to send funds.',
    )
    type: Type53 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `inbound_wire_drawdown_request`.",
    )


class InboundWireDrawdownRequestList(BaseModel):
    data: List[InboundWireDrawdownRequest] = Field(
        ..., description='The contents of the list.'
    )
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class AccountTransferIntention2(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    description: str = Field(
        ..., description='The description you chose to give the transfer.'
    )
    destination_account_id: str = Field(
        ...,
        description='The identifier of the Account to where the Account Transfer was sent.',
    )
    source_account_id: str = Field(
        ...,
        description='The identifier of the Account from where the Account Transfer was sent.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Account Transfer that led to this Pending Transaction.',
    )


class AchTransferReturn2(BaseModel):
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.',
    )
    return_reason_code: ReturnReasonCode = Field(
        ..., description='Why the ACH Transfer was returned.'
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the Tranasaction associated with this return.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the ACH Transfer associated with this return.',
    )


class Type54(Enum):
    card_refund = 'card_refund'


class CardRefund2(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    card_settlement_transaction_id: str = Field(
        ..., description='The identifier for the Transaction this refunds, if any.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    type: Type54 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_refund`.",
    )


class CardRouteRefund2(BaseModel):
    amount: int = Field(
        ...,
        description='The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class CardRouteSettlement2(BaseModel):
    amount: int = Field(
        ...,
        description='The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class Type55(Enum):
    card_settlement = 'card_settlement'


class CardSettlement2(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.",
    )
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_name: str = Field(..., description='')
    merchant_state: str = Field(..., description='')
    pending_transaction_id: str = Field(
        ...,
        description='The identifier of the Pending Transaction associated with this Transaction.',
    )
    presentment_amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's presentment currency.",
    )
    presentment_currency: str = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.",
    )
    type: Type55 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_settlement`.",
    )


class CheckDepositAcceptance2(BaseModel):
    account_number: str = Field(
        ..., description='The account number printed on the check.'
    )
    amount: int = Field(
        ...,
        description="The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    auxiliary_on_us: str = Field(
        ...,
        description='An additional line of metadata printed on the check. This typically includes the check number for business checks.',
    )
    check_deposit_id: str = Field(
        ..., description='The ID of the Check Deposit that was accepted.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    routing_number: str = Field(
        ..., description='The routing number printed on the check.'
    )
    serial_number: str = Field(
        ...,
        description='The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.',
    )


class CheckDepositReturn2(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    check_deposit_id: str = Field(
        ..., description='The identifier of the Check Deposit that was returned.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    return_reason: ReturnReason = Field(..., description='')
    returned_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.',
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the transaction that reversed the original check deposit transaction.',
    )


class CheckTransferIntention2(BaseModel):
    address_city: str = Field(..., description="The city of the check's destination.")
    address_line1: str = Field(
        ..., description="The street address of the check's destination."
    )
    address_line2: str = Field(
        ..., description="The second line of the address of the check's destination."
    )
    address_state: str = Field(..., description="The state of the check's destination.")
    address_zip: str = Field(
        ..., description="The postal code of the check's destination."
    )
    amount: int = Field(..., description='The transfer amount in USD cents.')
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
    )
    recipient_name: str = Field(
        ..., description='The name that will be printed on the check.'
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Check Transfer with which this is associated.',
    )


class Type56(Enum):
    check_transfer_stop_payment_request = 'check_transfer_stop_payment_request'


class CheckTransferStopPaymentRequest2(BaseModel):
    requested_at: datetime = Field(
        ..., description='The time the stop-payment was requested.'
    )
    transaction_id: str = Field(
        ..., description='The transaction ID of the corresponding credit transaction.'
    )
    transfer_id: str = Field(
        ..., description='The ID of the check transfer that was stopped.'
    )
    type: Type56 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.",
    )


class DisputeResolution2(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    disputed_transaction_id: str = Field(
        ..., description='The identifier of the Transaction that was disputed.'
    )


class InboundCheck2(BaseModel):
    amount: int = Field(
        ...,
        description='The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    check_front_image_file_id: str = Field(..., description='')
    check_number: str = Field(..., description='')
    check_rear_image_file_id: str = Field(..., description='')
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )


class InboundRealTimePaymentsTransferConfirmation2(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.",
    )
    creditor_name: str = Field(
        ...,
        description='The name the sender of the transfer specified as the recipient of the transfer.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer\'s currency. This will always be "USD" for a Real Time Payments transfer.',
    )
    debtor_account_number: str = Field(
        ..., description='The account number of the account that sent the transfer.'
    )
    debtor_name: str = Field(
        ..., description='The name provided by the sender of the transfer.'
    )
    debtor_routing_number: str = Field(
        ..., description='The routing number of the account that sent the transfer.'
    )
    remittance_information: str = Field(
        ..., description='Additional information included with the transfer.'
    )
    transaction_identification: str = Field(
        ..., description='The Real Time Payments network identification of the transfer'
    )


class InterestPayment2(BaseModel):
    accrued_on_account_id: str = Field(
        ..., description='The account on which the interest was accrued.'
    )
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.',
    )
    period_end: datetime = Field(
        ...,
        description='The end of the period for which this transaction paid interest.',
    )
    period_start: datetime = Field(
        ...,
        description='The start of the period for which this transaction paid interest.',
    )


class InternalSource2(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.',
    )
    reason: Reason20 = Field(..., description='')


class Source7(BaseModel):
    account_transfer_intention: AccountTransferIntention2 = Field(
        ...,
        description='A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'destination_account_id': 'account_uf16sut2ct5bevmq3eh',
                'source_account_id': 'account_in71c4amph0vgo2qllky',
                'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n',
            }
        ],
        title='Account Transfer Intention',
    )
    ach_check_conversion: AchCheckConversion = Field(
        ...,
        description='A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.',
        examples=[{'amount': 100, 'file_id': 'file_makxrc67oh9l6sg7w9yc'}],
        title='ACH Check Conversion',
    )
    ach_check_conversion_return: AchCheckConversionReturn = Field(
        ...,
        description='A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.',
        examples=[{'amount': 100, 'return_reason_code': ''}],
        title='ACH Check Conversion Return',
    )
    ach_transfer_intention: AchTransferIntention = Field(
        ...,
        description='A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'routing_number': '101050001',
                'statement_descriptor': 'Frederick S. Holmes',
                'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n',
            }
        ],
        title='ACH Transfer Intention',
    )
    ach_transfer_rejection: AchTransferRejection = Field(
        ...,
        description='A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.',
        examples=[{'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n'}],
        title='ACH Transfer Rejection',
    )
    ach_transfer_return: AchTransferReturn2 = Field(
        ...,
        description='A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.',
        examples=[
            {
                'created_at': '2020-01-31T23:59:59Z',
                'return_reason_code': 'insufficient_fund',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'transfer_id': 'ach_transfer_uoxatyh3lt5evrsdvo7q',
            }
        ],
        title='ACH Transfer Return',
    )
    card_dispute_acceptance: CardDisputeAcceptance = Field(
        ...,
        description='A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.',
        examples=[
            {
                'accepted_at': '2020-01-31T23:59:59Z',
                'card_dispute_id': 'card_dispute_h9sc95nbl1cgltpp7men',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Card Dispute Acceptance',
    )
    card_refund: CardRefund2 = Field(
        ...,
        description='A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.',
        examples=[
            {
                'amount': 100,
                'card_settlement_transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'currency': 'USD',
                'type': 'card_refund',
            }
        ],
        title='Card Refund',
    )
    card_route_refund: CardRouteRefund2 = Field(
        ...,
        description='A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.',
        examples=[
            {
                'amount': 1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Refund',
    )
    card_route_settlement: CardRouteSettlement2 = Field(
        ...,
        description='A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.',
        examples=[
            {
                'amount': 1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Settlement',
    )
    card_settlement: CardSettlement2 = Field(
        ...,
        description='A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'merchant_category_code': '5734',
                'merchant_city': 'New York',
                'merchant_country': 'US',
                'merchant_name': 'AMAZON.COM',
                'merchant_state': 'NY',
                'pending_transaction_id': None,
                'presentment_amount': 100,
                'presentment_currency': 'USD',
                'type': 'card_settlement',
            }
        ],
        title='Card Settlement',
    )
    category: Category10 = Field(
        ...,
        description='The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    check_deposit_acceptance: CheckDepositAcceptance2 = Field(
        ...,
        description='A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'auxiliary_on_us': '101',
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'routing_number': '101050001',
                'serial_number': None,
            }
        ],
        title='Check Deposit Acceptance',
    )
    check_deposit_return: CheckDepositReturn2 = Field(
        ...,
        description='A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.',
        examples=[
            {
                'amount': 100,
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'return_reason': 'insufficient_funds',
                'returned_at': '2020-01-31T23:59:59Z',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Check Deposit Return',
    )
    check_transfer_intention: CheckTransferIntention2 = Field(
        ...,
        description='A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.',
        examples=[
            {
                'address_city': 'New York',
                'address_line1': '33 Liberty Street',
                'address_line2': None,
                'address_state': 'NY',
                'address_zip': '10045',
                'amount': 1000,
                'currency': 'USD',
                'recipient_name': 'Ian Crease',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
            }
        ],
        title='Check Transfer Intention',
    )
    check_transfer_rejection: CheckTransferRejection = Field(
        ...,
        description='A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.',
        examples=[{'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5'}],
        title='Check Transfer Rejection',
    )
    check_transfer_return: CheckTransferReturn = Field(
        ...,
        description='A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.',
        examples=[
            {'file_id': None, 'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5'}
        ],
        title='Check Transfer Return',
    )
    check_transfer_stop_payment_request: CheckTransferStopPaymentRequest2 = Field(
        ...,
        description='A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.',
        examples=[
            {
                'requested_at': '2020-01-31T23:59:59Z',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
                'type': 'check_transfer_stop_payment_request',
            }
        ],
        title='Check Transfer Stop Payment Request',
    )
    dispute_resolution: DisputeResolution2 = Field(
        ...,
        description='A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'disputed_transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Dispute Resolution',
    )
    empyreal_cash_deposit: EmpyrealCashDeposit = Field(
        ...,
        description='A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.',
        examples=[
            {'amount': 100, 'bag_id': '12345', 'deposit_date': '2020-01-31T23:59:59Z'}
        ],
        title='Empyreal Cash Deposit',
    )
    inbound_ach_transfer: InboundAchTransfer = Field(
        ...,
        description='A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.',
        examples=[
            {
                'amount': 100,
                'originator_company_descriptive_date': None,
                'originator_company_discretionary_data': None,
                'originator_company_entry_description': 'RESERVE',
                'originator_company_id': '0987654321',
                'originator_company_name': 'BIG BANK',
                'receiver_id_number': '12345678900',
                'receiver_name': 'IAN CREASE',
                'trace_number': '021000038461022',
            }
        ],
        title='Inbound ACH Transfer',
    )
    inbound_check: InboundCheck2 = Field(
        ...,
        description='A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.',
        examples=[
            {
                'amount': 100,
                'check_front_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
                'check_number': '       00000123',
                'check_rear_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
                'currency': 'USD',
            }
        ],
        title='Inbound Check',
    )
    inbound_international_ach_transfer: InboundInternationalAchTransfer = Field(
        ...,
        description='A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.',
        examples=[
            {
                'amount': -1000,
                'destination_country_code': 'US',
                'destination_currency_code': 'USD',
                'foreign_exchange_indicator': 'fixed_to_fixed',
                'foreign_exchange_reference': None,
                'foreign_exchange_reference_indicator': 'blank',
                'foreign_payment_amount': 199,
                'foreign_trace_number': None,
                'international_transaction_type_code': 'internet_initiated',
                'originating_currency_code': 'USD',
                'originating_depository_financial_institution_branch_country': 'US',
                'originating_depository_financial_institution_id': '091000019',
                'originating_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'originating_depository_financial_institution_name': 'WELLS FARGO BANK',
                'originator_city': 'BERLIN',
                'originator_company_entry_description': 'RETRY PYMT',
                'originator_country': 'DE',
                'originator_identification': '770510487A',
                'originator_name': 'BERGHAIN',
                'originator_postal_code': '50825',
                'originator_state_or_province': None,
                'originator_street_address': 'Ruedersdorferstr. 7',
                'payment_related_information': None,
                'payment_related_information2': None,
                'receiver_city': 'BEVERLY HILLS',
                'receiver_country': 'US',
                'receiver_identification_number': '1018790279274',
                'receiver_postal_code': '90210',
                'receiver_state_or_province': 'CA',
                'receiver_street_address': '123 FAKE ST',
                'receiving_company_or_individual_name': 'IAN CREASE',
                'receiving_depository_financial_institution_country': 'US',
                'receiving_depository_financial_institution_id': '101050001',
                'receiving_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'receiving_depository_financial_institution_name': 'BLUE RIDGE BANK, NATIONAL ASSOCIATI',
                'trace_number': '010202909100090',
            }
        ],
        title='Inbound International ACH Transfer',
    )
    inbound_real_time_payments_transfer_confirmation: (
        InboundRealTimePaymentsTransferConfirmation2
    ) = Field(
        ...,
        description='A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.',
        examples=[
            {
                'amount': 100,
                'creditor_name': 'Ian Crease',
                'currency': 'USD',
                'debtor_account_number': '987654321',
                'debtor_name': 'National Phonograph Company',
                'debtor_routing_number': '101050001',
                'remittance_information': 'Invoice 29582',
                'transaction_identification': '20220501234567891T1BSLZO01745013025',
            }
        ],
        title='Inbound Real Time Payments Transfer Confirmation',
    )
    inbound_wire_drawdown_payment: InboundWireDrawdownPayment = Field(
        ...,
        description='A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.',
        examples=[
            {
                'amount': 100,
                'beneficiary_address_line1': None,
                'beneficiary_address_line2': None,
                'beneficiary_address_line3': None,
                'beneficiary_name': None,
                'beneficiary_reference': None,
                'description': 'Inbound wire drawdown payment',
                'input_message_accountability_data': None,
                'originator_address_line1': None,
                'originator_address_line2': None,
                'originator_address_line3': None,
                'originator_name': None,
                'originator_to_beneficiary_information': None,
            }
        ],
        title='Inbound Wire Drawdown Payment',
    )
    inbound_wire_drawdown_payment_reversal: InboundWireDrawdownPaymentReversal = Field(
        ...,
        description='A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.',
        examples=[
            {
                'amount': 12345,
                'description': 'Inbound wire reversal 2022021100335128',
                'input_cycle_date': '2022-02-11',
                'input_message_accountability_data': '20220211B6B7HU2R011023',
                'input_sequence_number': '11023',
                'input_source': 'B6B7HU2R',
                'previous_message_input_cycle_date': '2022-02-10',
                'previous_message_input_message_accountability_data': '20220210MMQFMP0P000007',
                'previous_message_input_sequence_number': '3',
                'previous_message_input_source': 'MMQFMP0P',
            }
        ],
        title='Inbound Wire Drawdown Payment Reversal',
    )
    inbound_wire_reversal: InboundWireReversal = Field(
        ...,
        description='A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.',
        examples=[
            {
                'amount': 12345,
                'description': 'Inbound wire reversal 2022021100335128',
                'financial_institution_to_financial_institution_information': None,
                'input_cycle_date': '2022-02-11',
                'input_message_accountability_data': '20220211B6B7HU2R011023',
                'input_sequence_number': '11023',
                'input_source': 'B6B7HU2R',
                'previous_message_input_cycle_date': '2022-02-10',
                'previous_message_input_message_accountability_data': '20220210MMQFMP0P000007',
                'previous_message_input_sequence_number': '3',
                'previous_message_input_source': 'MMQFMP0P',
                'receiver_financial_institution_information': None,
            }
        ],
        title='Inbound Wire Reversal',
    )
    inbound_wire_transfer: InboundWireTransfer = Field(
        ...,
        description='A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.',
        examples=[
            {
                'amount': 100,
                'beneficiary_address_line1': None,
                'beneficiary_address_line2': None,
                'beneficiary_address_line3': None,
                'beneficiary_name': None,
                'beneficiary_reference': None,
                'description': 'Inbound wire transfer',
                'input_message_accountability_data': None,
                'originator_address_line1': None,
                'originator_address_line2': None,
                'originator_address_line3': None,
                'originator_name': None,
                'originator_to_beneficiary_information': None,
                'originator_to_beneficiary_information_line1': None,
                'originator_to_beneficiary_information_line2': None,
                'originator_to_beneficiary_information_line3': None,
                'originator_to_beneficiary_information_line4': None,
            }
        ],
        title='Inbound Wire Transfer',
    )
    interest_payment: InterestPayment2 = Field(
        ...,
        description='A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.',
        examples=[
            {
                'accrued_on_account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 100,
                'currency': 'USD',
                'period_end': '2023-03-31T23:59:59Z',
                'period_start': '2023-03-01T00:00:00Z',
            }
        ],
        title='Interest Payment',
    )
    internal_source: InternalSource2 = Field(
        ...,
        description='A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.',
        examples=[{'amount': 100, 'currency': 'USD', 'reason': 'sample_funds'}],
        title='Internal Source',
    )
    sample_funds: SampleFunds = Field(
        ...,
        description='A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.',
        examples=[{'originator': 'dashboard'}],
        title='Sample Funds',
    )
    wire_drawdown_payment_intention: WireDrawdownPaymentIntention = Field(
        ...,
        description='A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
                'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u',
            }
        ],
        title='Wire Drawdown Payment Intention',
    )
    wire_drawdown_payment_rejection: WireDrawdownPaymentRejection = Field(
        ...,
        description='A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.',
        examples=[{'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u'}],
        title='Wire Drawdown Payment Rejection',
    )
    wire_transfer_intention: WireTransferIntention = Field(
        ...,
        description='A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
                'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u',
            }
        ],
        title='Wire Transfer Intention',
    )
    wire_transfer_rejection: WireTransferRejection = Field(
        ...,
        description='A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.',
        examples=[{'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u'}],
        title='Wire Transfer Rejection',
    )


class Type57(Enum):
    transaction = 'transaction'


class Transaction2(BaseModel):
    account_id: str = Field(
        ..., description='The identifier for the Account the Transaction belongs to.'
    )
    amount: int = Field(
        ...,
        description='The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.",
    )
    description: str = Field(
        ...,
        description='For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.',
    )
    id: str = Field(..., description='The Transaction identifier.')
    route_id: str = Field(
        ...,
        description='The identifier for the route this Transaction came through. Routes are things like cards and ACH details.',
    )
    route_type: str = Field(
        ..., description='The type of the route this Transaction came through.'
    )
    source: Source7 = Field(
        ...,
        description='This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.',
        examples=[
            {
                'category': 'inbound_ach_transfer',
                'inbound_ach_transfer': {
                    'amount': 100,
                    'originator_company_descriptive_date': None,
                    'originator_company_discretionary_data': None,
                    'originator_company_entry_description': 'RESERVE',
                    'originator_company_id': '0987654321',
                    'originator_company_name': 'BIG BANK',
                    'receiver_id_number': '12345678900',
                    'receiver_name': 'IAN CREASE',
                    'trace_number': '021000038461022',
                },
            }
        ],
        title='Transaction Source',
    )
    type: Type57 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `transaction`.",
    )


class Type58(Enum):
    inbound_wire_transfer_simulation_result = 'inbound_wire_transfer_simulation_result'


class InboundWireTransferSimulationResult(BaseModel):
    transaction: Transaction2 = Field(
        ...,
        description="If the Wire Transfer attempt succeeds, this will contain the resulting [Transaction](#transactions) object. The Transaction's `source` will be of `category: inbound_wire_transfer`.",
        examples=[
            {
                'account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 100,
                'created_at': '2020-01-31T23:59:59Z',
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'id': 'transaction_uyrp7fld2ium70oa7oi',
                'route_id': 'account_number_v18nkfqm6afpsrvy82b2',
                'route_type': 'account_number',
                'source': {
                    'category': 'inbound_ach_transfer',
                    'inbound_ach_transfer': {
                        'amount': 100,
                        'originator_company_descriptive_date': None,
                        'originator_company_discretionary_data': None,
                        'originator_company_entry_description': 'RESERVE',
                        'originator_company_id': '0987654321',
                        'originator_company_name': 'BIG BANK',
                        'receiver_id_number': '12345678900',
                        'receiver_name': 'IAN CREASE',
                        'trace_number': '021000038461022',
                    },
                },
                'type': 'transaction',
            }
        ],
        title='Transaction',
    )
    type: Type58 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `inbound_wire_transfer_simulation_result`.",
    )


class ModelType(Enum):
    account = 'account'
    account_number = 'account_number'
    card = 'card'


class Status29(Enum):
    active = 'active'
    inactive = 'inactive'


class Type59(Enum):
    limit = 'limit'


class Limit(BaseModel):
    id: str = Field(..., description='The Limit identifier.')
    interval: Interval = Field(
        ...,
        description='The interval for the metric. This is required if `metric` is `count` or `volume`.',
    )
    metric: Metric = Field(..., description='The metric for the Limit.')
    model_id: str = Field(
        ...,
        description='The identifier of the Account Number, Account, or Card the Limit applies to.',
    )
    model_type: ModelType = Field(
        ..., description='The type of the model you wish to associate the Limit with.'
    )
    status: Status29 = Field(..., description='The current status of the Limit.')
    type: Type59 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `limit`.",
    )
    value: int = Field(..., description='The value to evaluate the Limit against.')


class LimitList(BaseModel):
    data: List[Limit] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Type60(Enum):
    oauth_connection = 'oauth_connection'


class OauthConnection(BaseModel):
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) timestamp when the OAuth Connection was created.',
    )
    group_id: str = Field(
        ...,
        description='The identifier of the Group that has authorized your OAuth application.',
    )
    id: str = Field(..., description="The OAuth Connection's identifier.")
    status: Status29 = Field(..., description='Whether the connection is active.')
    type: Type60 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `oauth_connection`.",
    )


class OauthConnectionList(BaseModel):
    data: List[OauthConnection] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class AccountTransferInstruction1(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Account Transfer that led to this Pending Transaction.',
    )


class Visa5(BaseModel):
    electronic_commerce_indicator: ElectronicCommerceIndicator = Field(
        ...,
        description="For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
    )
    point_of_service_entry_mode: PointOfServiceEntryMode = Field(
        ...,
        description="The method used to enter the cardholder's primary account number and card expiration date",
    )


class NetworkDetails5(BaseModel):
    visa: Visa5 = Field(
        ..., description='Fields specific to the `visa` network', title='Visa'
    )


class CardAuthorization2(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    digital_wallet_token_id: str = Field(
        ...,
        description='If the authorization was made via a Digital Wallet Token (such as an Apple Pay purchase), the identifier of the token that was used.',
    )
    merchant_acceptor_id: str = Field(
        ...,
        description='The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.',
    )
    merchant_category_code: str = Field(
        ...,
        description='The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.',
    )
    merchant_city: str = Field(..., description='The city the merchant resides in.')
    merchant_country: str = Field(
        ..., description='The country the merchant resides in.'
    )
    merchant_descriptor: str = Field(
        ...,
        description='The merchant descriptor of the merchant the card is transacting with.',
    )
    network: Network2 = Field(
        ..., description='The payment network used to process this card authorization'
    )
    network_details: NetworkDetails5 = Field(
        ..., description='Fields specific to the `network`', title='Network Details'
    )
    real_time_decision_id: str = Field(
        ...,
        description='The identifier of the Real-Time Decision sent to approve or decline this transaction.',
    )


class CardRouteAuthorization1(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class Category12(Enum):
    account_transfer_instruction = 'account_transfer_instruction'
    ach_transfer_instruction = 'ach_transfer_instruction'
    card_authorization = 'card_authorization'
    check_deposit_instruction = 'check_deposit_instruction'
    check_transfer_instruction = 'check_transfer_instruction'
    inbound_funds_hold = 'inbound_funds_hold'
    card_route_authorization = 'card_route_authorization'
    real_time_payments_transfer_instruction = 'real_time_payments_transfer_instruction'
    wire_drawdown_payment_instruction = 'wire_drawdown_payment_instruction'
    wire_transfer_instruction = 'wire_transfer_instruction'
    other = 'other'


class CheckDepositInstruction1(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    back_image_file_id: str = Field(
        ...,
        description='The identifier of the File containing the image of the back of the check that was deposited.',
    )
    check_deposit_id: str = Field(
        ..., description='The identifier of the Check Deposit.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    front_image_file_id: str = Field(
        ...,
        description='The identifier of the File containing the image of the front of the check that was deposited.',
    )


class CheckTransferInstruction1(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Check Transfer that led to this Pending Transaction.',
    )


class Status31(Enum):
    held = 'held'
    complete = 'complete'


class InboundFundsHold1(BaseModel):
    amount: int = Field(
        ...,
        description="The held amount in the minor unit of the account's currency. For dollars, for example, this is cents.",
    )
    automatically_releases_at: datetime = Field(
        ...,
        description='When the hold will be released automatically. Certain conditions may cause it to be released before this time.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the hold's currency.",
    )
    held_transaction_id: str = Field(
        ..., description='The ID of the Transaction for which funds were held.'
    )
    released_at: datetime = Field(
        ..., description='When the hold was released (if it has been released).'
    )
    status: Status31 = Field(..., description='The status of the hold.')


class Source8(BaseModel):
    account_transfer_instruction: AccountTransferInstruction1 = Field(
        ...,
        description='A Account Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_instruction`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n',
            }
        ],
        title='Account Transfer Instruction',
    )
    ach_transfer_instruction: AchTransferInstruction = Field(
        ...,
        description='A ACH Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_instruction`.',
        examples=[{'amount': 100, 'transfer_id': 'ach_transfer_uoxatyh3lt5evrsdvo7q'}],
        title='ACH Transfer Instruction',
    )
    card_authorization: CardAuthorization2 = Field(
        ...,
        description='A Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_authorization`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'digital_wallet_token_id': None,
                'merchant_acceptor_id': '5665270011000168',
                'merchant_category_code': '5734',
                'merchant_city': 'New York',
                'merchant_country': 'US',
                'merchant_descriptor': 'AMAZON.COM',
                'network': 'visa',
                'network_details': {
                    'visa': {
                        'electronic_commerce_indicator': 'secure_electronic_commerce',
                        'point_of_service_entry_mode': 'manual',
                    }
                },
                'real_time_decision_id': None,
            }
        ],
        title='Card Authorization',
    )
    card_route_authorization: CardRouteAuthorization1 = Field(
        ...,
        description='A Deprecated Card Authorization object. This field will be present in the JSON response if and only if `category` is equal to `card_route_authorization`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'merchant_acceptor_id': '6631945550173363',
                'merchant_category_code': '5734',
                'merchant_city': 'New York',
                'merchant_country': 'US',
                'merchant_descriptor': 'THUMP COFFEE',
                'merchant_state': 'NY',
            }
        ],
        title='Deprecated Card Authorization',
    )
    category: Category12 = Field(
        ...,
        description='The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    check_deposit_instruction: CheckDepositInstruction1 = Field(
        ...,
        description='A Check Deposit Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_instruction`.',
        examples=[
            {
                'amount': 100,
                'back_image_file_id': 'file_26khfk98mzfz90a11oqx',
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'front_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
            }
        ],
        title='Check Deposit Instruction',
    )
    check_transfer_instruction: CheckTransferInstruction1 = Field(
        ...,
        description='A Check Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_instruction`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
            }
        ],
        title='Check Transfer Instruction',
    )
    inbound_funds_hold: InboundFundsHold1 = Field(
        ...,
        description='A Inbound Funds Hold object. This field will be present in the JSON response if and only if `category` is equal to `inbound_funds_hold`.',
        examples=[
            {
                'amount': 100,
                'automatically_releases_at': '2020-01-31T23:59:59Z',
                'currency': 'USD',
                'held_transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'released_at': None,
                'status': 'held',
            }
        ],
        title='Inbound Funds Hold',
    )
    wire_drawdown_payment_instruction: WireDrawdownPaymentInstruction = Field(
        ...,
        description='A Wire Drawdown Payment Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_instruction`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
            }
        ],
        title='Wire Drawdown Payment Instruction',
    )
    wire_transfer_instruction: WireTransferInstruction = Field(
        ...,
        description='A Wire Transfer Instruction object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_instruction`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
                'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u',
            }
        ],
        title='Wire Transfer Instruction',
    )


class Status32(Enum):
    pending = 'pending'
    complete = 'complete'


class Type61(Enum):
    pending_transaction = 'pending_transaction'


class PendingTransaction1(BaseModel):
    account_id: str = Field(
        ...,
        description='The identifier for the account this Pending Transaction belongs to.',
    )
    amount: int = Field(
        ...,
        description='The Pending Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Pending Transaction occured.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Pending Transaction's currency. This will match the currency on the Pending Transcation's Account.",
    )
    description: str = Field(
        ...,
        description='For a Pending Transaction related to a transfer, this is the description you provide. For a Pending Transaction related to a payment, this is the description the vendor provides.',
    )
    id: str = Field(..., description='The Pending Transaction identifier.')
    route_id: str = Field(
        ...,
        description='The identifier for the route this Pending Transaction came through. Routes are things like cards and ACH details.',
    )
    route_type: str = Field(
        ..., description='The type of the route this Pending Transaction came through.'
    )
    source: Source8 = Field(
        ...,
        description="This is an object giving more details on the network-level event that caused the Pending Transaction. For example, for a card transaction this lists the merchant's industry and location.",
        examples=[
            {
                'ach_transfer_instruction': {
                    'amount': 100,
                    'transfer_id': 'ach_transfer_uoxatyh3lt5evrsdvo7q',
                },
                'category': 'ach_transfer_instruction',
            }
        ],
        title='Pending Transaction Source',
    )
    status: Status32 = Field(
        ...,
        description='Whether the Pending Transaction has been confirmed and has an associated Transaction.',
    )
    type: Type61 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `pending_transaction`.",
    )


class PendingTransactionList(BaseModel):
    data: List[PendingTransaction1] = Field(
        ..., description='The contents of the list.'
    )
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Visa6(BaseModel):
    electronic_commerce_indicator: ElectronicCommerceIndicator = Field(
        ...,
        description="For electronic commerce transactions, this identifies the level of security used in obtaining the customer's payment credential. For mail or telephone order transactions, identifies the type of mail or telephone order.",
    )
    point_of_service_entry_mode: PointOfServiceEntryMode = Field(
        ...,
        description="The method used to enter the cardholder's primary account number and card expiration date",
    )


class NetworkDetails6(BaseModel):
    visa: Visa6 = Field(
        ..., description='Fields specific to the `visa` network', title='Visa'
    )


class CardAuthorization3(BaseModel):
    account_id: str = Field(
        ..., description='The identifier of the Account the authorization will debit.'
    )
    card_id: str = Field(
        ..., description='The identifier of the Card that is being authorized.'
    )
    decision: Decision = Field(
        ..., description='Whether or not the authorization was approved.'
    )
    merchant_acceptor_id: str = Field(
        ...,
        description='The merchant identifier (commonly abbreviated as MID) of the merchant the card is transacting with.',
    )
    merchant_category_code: str = Field(
        ...,
        description='The Merchant Category Code (commonly abbreviated as MCC) of the merchant the card is transacting with.',
    )
    merchant_city: str = Field(..., description='The city the merchant resides in.')
    merchant_country: str = Field(
        ..., description='The country the merchant resides in.'
    )
    merchant_descriptor: str = Field(
        ...,
        description='The merchant descriptor of the merchant the card is transacting with.',
    )
    network: Network2 = Field(
        ..., description='The payment network used to process this card authorization'
    )
    network_details: NetworkDetails6 = Field(
        ..., description='Fields specific to the `network`', title='Network Details'
    )
    presentment_amount: int = Field(
        ...,
        description='The amount of the attempted authorization in the currency the card user sees at the time of purchase, in the minor unit of that currency. For dollars, for example, this is cents.',
    )
    presentment_currency: str = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the user sees at the time of purchase.',
    )
    settlement_amount: int = Field(
        ...,
        description='The amount of the attempted authorization in the currency it will be settled in. This currency is the same as that of the Account the card belongs to.',
    )
    settlement_currency: str = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the currency the transaction will be settled in.',
    )


class Category13(Enum):
    card_authorization_requested = 'card_authorization_requested'
    digital_wallet_token_requested = 'digital_wallet_token_requested'
    digital_wallet_authentication_requested = 'digital_wallet_authentication_requested'


class Channel(Enum):
    sms = 'sms'
    email = 'email'


class DigitalWallet2(Enum):
    apple_pay = 'apple_pay'
    google_pay = 'google_pay'


class DigitalWalletAuthentication1(BaseModel):
    card_id: str = Field(
        ..., description='The identifier of the Card that is being tokenized.'
    )
    channel: Channel = Field(
        ..., description='The channel to send the card user their one-time passcode.'
    )
    digital_wallet: DigitalWallet2 = Field(
        ..., description='The digital wallet app being used.'
    )
    email: str = Field(
        ...,
        description='The email to send the one-time passcode to if `channel` is equal to `email`.',
    )
    one_time_passcode: str = Field(
        ..., description='The one-time passcode to send the card user.'
    )
    phone: str = Field(
        ...,
        description='The phone number to send the one-time passcode to if `channel` is equal to `sms`.',
    )
    result: Result = Field(
        ...,
        description='Whether your application successfully delivered the one-time passcode.',
    )


class DigitalWalletToken2(BaseModel):
    card_id: str = Field(
        ..., description='The identifier of the Card that is being tokenized.'
    )
    card_profile_id: str = Field(
        ...,
        description='The identifier of the Card Profile that was set via the real time decision. This will be null until the real time decision is responded to or if the real time decision did not set a card profile.',
    )
    decision: Decision = Field(
        ...,
        description='Whether or not the provisioning request was approved. This will be null until the real time decision is responded to.',
    )
    digital_wallet: DigitalWallet2 = Field(
        ..., description='The digital wallet app being used.'
    )


class Status33(Enum):
    pending = 'pending'
    responded = 'responded'
    timed_out = 'timed_out'


class Type62(Enum):
    real_time_decision = 'real_time_decision'


class RealTimeDecision(BaseModel):
    card_authorization: CardAuthorization3 = Field(
        ...,
        description='Fields related to a card authorization.',
        title='Card Authorization',
    )
    category: Category13 = Field(
        ..., description='The category of the Real-Time Decision.'
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the Real-Time Decision was created.',
    )
    digital_wallet_authentication: DigitalWalletAuthentication1 = Field(
        ...,
        description='Fields related to a digital wallet authentication attempt.',
        title='Digital Wallet Authentication',
    )
    digital_wallet_token: DigitalWalletToken2 = Field(
        ...,
        description='Fields related to a digital wallet token provisioning attempt.',
        title='Digital Wallet Token',
    )
    id: str = Field(..., description='The Real-Time Decision identifier.')
    status: Status33 = Field(..., description='The status of the Real-Time Decision.')
    timeout_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which your application can no longer respond to the Real-Time Decision.',
    )
    type: Type62 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `real_time_decision`.",
    )


class Reason22(Enum):
    insufficient_fund = 'insufficient_fund'
    no_account = 'no_account'
    account_closed = 'account_closed'
    invalid_account_number_structure = 'invalid_account_number_structure'
    account_frozen_entry_returned_per_ofac_instruction = (
        'account_frozen_entry_returned_per_ofac_instruction'
    )
    credit_entry_refused_by_receiver = 'credit_entry_refused_by_receiver'
    unauthorized_debit_to_consumer_account_using_corporate_sec_code = (
        'unauthorized_debit_to_consumer_account_using_corporate_sec_code'
    )
    corporate_customer_advised_not_authorized = (
        'corporate_customer_advised_not_authorized'
    )
    payment_stopped = 'payment_stopped'
    non_transaction_account = 'non_transaction_account'
    uncollected_funds = 'uncollected_funds'
    routing_number_check_digit_error = 'routing_number_check_digit_error'
    customer_advised_unauthorized_improper_ineligible_or_incomplete = (
        'customer_advised_unauthorized_improper_ineligible_or_incomplete'
    )
    amount_field_error = 'amount_field_error'
    authorization_revoked_by_customer = 'authorization_revoked_by_customer'
    invalid_ach_routing_number = 'invalid_ach_routing_number'
    file_record_edit_criteria = 'file_record_edit_criteria'
    enr_invalid_individual_name = 'enr_invalid_individual_name'
    returned_per_odfi_request = 'returned_per_odfi_request'
    addenda_error = 'addenda_error'
    limited_participation_dfi = 'limited_participation_dfi'
    incorrectly_coded_outbound_international_payment = (
        'incorrectly_coded_outbound_international_payment'
    )
    other = 'other'


class ReturnASandboxAchTransferParameters(BaseModel):
    reason: Optional[Reason22] = Field(
        None,
        description='The reason why the Federal Reserve or destination bank returned this transfer. Defaults to `no_account`.',
    )


class AchTransfers(Enum):
    supported = 'supported'
    not_supported = 'not_supported'


class RealTimePaymentsTransfers(Enum):
    supported = 'supported'
    not_supported = 'not_supported'


class Type63(Enum):
    routing_number = 'routing_number'


class WireTransfers(Enum):
    supported = 'supported'
    not_supported = 'not_supported'


class RoutingNumber(BaseModel):
    ach_transfers: AchTransfers = Field(
        ..., description="This routing number's support for ACH Transfers."
    )
    name: str = Field(
        ...,
        description='The name of the financial institution belonging to a routing number.',
    )
    real_time_payments_transfers: RealTimePaymentsTransfers = Field(
        ...,
        description="This routing number's support for Real Time Payments Transfers.",
    )
    routing_number: str = Field(
        ..., description='The nine digit routing number identifier.'
    )
    type: Type63 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `routing_number`.",
    )
    wire_transfers: WireTransfers = Field(
        ..., description="This routing number's support for Wire Transfers."
    )


class RoutingNumberList(BaseModel):
    data: List[RoutingNumber] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class SimulateARealTimePaymentsTransferToYourAccountParameters(BaseModel):
    account_number_id: str = Field(
        ...,
        description='The identifier of the Account Number the inbound Real Time Payments Transfer is for.',
    )
    amount: conint(ge=1) = Field(
        ..., description='The transfer amount in USD cents. Must be positive.'
    )
    debtor_account_number: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The account number of the account that sent the transfer.'
    )
    debtor_name: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The name provided by the sender of the transfer.'
    )
    debtor_routing_number: Optional[constr(min_length=9, max_length=9)] = Field(
        None, description='The routing number of the account that sent the transfer.'
    )
    remittance_information: Optional[constr(min_length=1, max_length=140)] = Field(
        None, description='Additional information included with the transfer.'
    )
    request_for_payment_id: Optional[str] = Field(
        None,
        description='The identifier of a pending Request for Payment that this transfer will fulfill.',
    )


class SimulateARefundOnACardParameters(BaseModel):
    transaction_id: str = Field(
        ...,
        description="The identifier for the Transaction to refund. The Transaction's source must have a category of card_settlement.",
    )


class SimulateATaxDocumentBeingCreatedParameters(BaseModel):
    account_id: str = Field(
        ..., description='The identifier of the Account the tax document is for.'
    )


class SimulateAWireTransferToYourAccountParameters(BaseModel):
    account_number_id: str = Field(
        ...,
        description='The identifier of the Account Number the inbound Wire Transfer is for.',
    )
    amount: conint(ge=1) = Field(
        ..., description='The transfer amount in cents. Must be positive.'
    )
    beneficiary_address_line1: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The sending bank will set beneficiary_address_line1 in production. You can simulate any value here.',
    )
    beneficiary_address_line2: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The sending bank will set beneficiary_address_line2 in production. You can simulate any value here.',
    )
    beneficiary_address_line3: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The sending bank will set beneficiary_address_line3 in production. You can simulate any value here.',
    )
    beneficiary_name: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The sending bank will set beneficiary_name in production. You can simulate any value here.',
    )
    beneficiary_reference: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The sending bank will set beneficiary_reference in production. You can simulate any value here.',
    )
    originator_address_line1: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The sending bank will set originator_address_line1 in production. You can simulate any value here.',
    )
    originator_address_line2: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The sending bank will set originator_address_line2 in production. You can simulate any value here.',
    )
    originator_address_line3: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The sending bank will set originator_address_line3 in production. You can simulate any value here.',
    )
    originator_name: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='The sending bank will set originator_name in production. You can simulate any value here.',
    )
    originator_to_beneficiary_information_line1: Optional[
        constr(min_length=1, max_length=200)
    ] = Field(
        None,
        description='The sending bank will set originator_to_beneficiary_information_line1 in production. You can simulate any value here.',
    )
    originator_to_beneficiary_information_line2: Optional[
        constr(min_length=1, max_length=200)
    ] = Field(
        None,
        description='The sending bank will set originator_to_beneficiary_information_line2 in production. You can simulate any value here.',
    )
    originator_to_beneficiary_information_line3: Optional[
        constr(min_length=1, max_length=200)
    ] = Field(
        None,
        description='The sending bank will set originator_to_beneficiary_information_line3 in production. You can simulate any value here.',
    )
    originator_to_beneficiary_information_line4: Optional[
        constr(min_length=1, max_length=200)
    ] = Field(
        None,
        description='The sending bank will set originator_to_beneficiary_information_line4 in production. You can simulate any value here.',
    )


class SimulateAnAccountStatementBeingCreatedParameters(BaseModel):
    account_id: str = Field(
        ..., description='The identifier of the Account the statement is for.'
    )


class SimulateAnAchTransferToYourAccountParameters(BaseModel):
    account_number_id: str = Field(
        ...,
        description='The identifier of the Account Number the inbound ACH Transfer is for.',
    )
    amount: int = Field(
        ...,
        description='The transfer amount in cents. A positive amount originates a credit transfer pushing funds to the receiving account. A negative amount originates a debit transfer pulling funds from the receiving account.',
    )
    company_descriptive_date: Optional[constr(min_length=1, max_length=6)] = Field(
        None, description='The description of the date of the transfer.'
    )
    company_discretionary_data: Optional[constr(min_length=1, max_length=20)] = Field(
        None, description='Data associated with the transfer set by the sender.'
    )
    company_entry_description: Optional[constr(min_length=1, max_length=10)] = Field(
        None, description='The description of the transfer set by the sender.'
    )
    company_id: Optional[constr(min_length=1, max_length=15)] = Field(
        None, description="The sender's company id."
    )
    company_name: Optional[constr(min_length=1, max_length=16)] = Field(
        None, description='The name of the sender.'
    )


class SimulateAnAuthorizationOnACardParameters(BaseModel):
    amount: conint(ge=1, le=1000000000) = Field(
        ..., description='The authorization amount in cents.'
    )
    card_id: Optional[str] = Field(
        None, description='The identifier of the Card to be authorized.'
    )
    digital_wallet_token_id: Optional[str] = Field(
        None, description='The identifier of the Digital Wallet Token to be authorized.'
    )


class SimulateAnInboundWireDrawdownRequestBeingCreatedParameters(BaseModel):
    amount: conint(ge=0) = Field(
        ..., description='The amount being requested in cents.'
    )
    beneficiary_account_number: constr(min_length=1, max_length=200) = Field(
        ..., description="The drawdown request's beneficiary's account number."
    )
    beneficiary_address_line1: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="Line 1 of the drawdown request's beneficiary's address."
    )
    beneficiary_address_line2: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="Line 2 of the drawdown request's beneficiary's address."
    )
    beneficiary_address_line3: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="Line 3 of the drawdown request's beneficiary's address."
    )
    beneficiary_name: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="The drawdown request's beneficiary's name."
    )
    beneficiary_routing_number: constr(min_length=1, max_length=200) = Field(
        ..., description="The drawdown request's beneficiary's routing number."
    )
    currency: constr(min_length=1, max_length=200) = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".',
    )
    message_to_recipient: constr(min_length=1, max_length=140) = Field(
        ..., description="A message from the drawdown request's originator."
    )
    originator_account_number: constr(min_length=1, max_length=200) = Field(
        ..., description="The drawdown request's originator's account number."
    )
    originator_address_line1: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="Line 1 of the drawdown request's originator's address."
    )
    originator_address_line2: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="Line 2 of the drawdown request's originator's address."
    )
    originator_address_line3: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="Line 3 of the drawdown request's originator's address."
    )
    originator_name: Optional[constr(min_length=1, max_length=35)] = Field(
        None, description="The drawdown request's originator's name."
    )
    originator_routing_number: constr(min_length=1, max_length=200) = Field(
        ..., description="The drawdown request's originator's routing number."
    )
    originator_to_beneficiary_information_line1: Optional[
        constr(min_length=1, max_length=35)
    ] = Field(
        None,
        description='Line 1 of the information conveyed from the originator of the message to the beneficiary.',
    )
    originator_to_beneficiary_information_line2: Optional[
        constr(min_length=1, max_length=35)
    ] = Field(
        None,
        description='Line 2 of the information conveyed from the originator of the message to the beneficiary.',
    )
    originator_to_beneficiary_information_line3: Optional[
        constr(min_length=1, max_length=35)
    ] = Field(
        None,
        description='Line 3 of the information conveyed from the originator of the message to the beneficiary.',
    )
    originator_to_beneficiary_information_line4: Optional[
        constr(min_length=1, max_length=35)
    ] = Field(
        None,
        description='Line 4 of the information conveyed from the originator of the message to the beneficiary.',
    )
    recipient_account_number_id: str = Field(
        ...,
        description='The Account Number to which the recipient of this request is being requested to send funds from.',
    )


class SimulateDigitalWalletProvisioningForACardParameters(BaseModel):
    card_id: str = Field(
        ..., description='The identifier of the Card to be authorized.'
    )


class SimulateSettlingACardAuthorizationParameters(BaseModel):
    amount: Optional[conint(ge=1)] = Field(
        None,
        description='The amount to be settled. This defaults to the amount of the Pending Transaction being settled.',
    )
    card_id: str = Field(
        ..., description='The identifier of the Card to create a settlement on.'
    )
    pending_transaction_id: str = Field(
        ...,
        description='The identifier of the Pending Transaction for the Card Authorization you wish to settle.',
    )


class Status34(Enum):
    accepted = 'accepted'
    rejected = 'rejected'


class SimulatesAdvancingTheStateOfACardDisputeParameters(BaseModel):
    explanation: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='Why the dispute was rejected. Not required for accepting disputes.',
    )
    status: Status34 = Field(..., description='The status to move the dispute to.')


class AccountTransferIntention3(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the destination account currency.',
    )
    description: str = Field(
        ..., description='The description you chose to give the transfer.'
    )
    destination_account_id: str = Field(
        ...,
        description='The identifier of the Account to where the Account Transfer was sent.',
    )
    source_account_id: str = Field(
        ...,
        description='The identifier of the Account from where the Account Transfer was sent.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Account Transfer that led to this Pending Transaction.',
    )


class AchTransferReturn3(BaseModel):
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.',
    )
    return_reason_code: ReturnReasonCode = Field(
        ..., description='Why the ACH Transfer was returned.'
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the Tranasaction associated with this return.',
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the ACH Transfer associated with this return.',
    )


class Type64(Enum):
    card_refund = 'card_refund'


class CardRefund3(BaseModel):
    amount: int = Field(
        ...,
        description="The pending amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    card_settlement_transaction_id: str = Field(
        ..., description='The identifier for the Transaction this refunds, if any.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    type: Type64 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_refund`.",
    )


class CardRouteRefund3(BaseModel):
    amount: int = Field(
        ...,
        description='The refunded amount in the minor unit of the refunded currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the refund currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class CardRouteSettlement3(BaseModel):
    amount: int = Field(
        ...,
        description='The settled amount in the minor unit of the settlement currency. For dollars, for example, this is cents.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the settlement currency.',
    )
    merchant_acceptor_id: str = Field(..., description='')
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_descriptor: str = Field(..., description='')
    merchant_state: str = Field(..., description='')


class Type65(Enum):
    card_settlement = 'card_settlement'


class CardSettlement3(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's settlement currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's settlement currency.",
    )
    merchant_category_code: str = Field(..., description='')
    merchant_city: str = Field(..., description='')
    merchant_country: str = Field(..., description='')
    merchant_name: str = Field(..., description='')
    merchant_state: str = Field(..., description='')
    pending_transaction_id: str = Field(
        ...,
        description='The identifier of the Pending Transaction associated with this Transaction.',
    )
    presentment_amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's presentment currency.",
    )
    presentment_currency: str = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's presentment currency.",
    )
    type: Type65 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `card_settlement`.",
    )


class Category14(Enum):
    account_transfer_intention = 'account_transfer_intention'
    ach_check_conversion_return = 'ach_check_conversion_return'
    ach_check_conversion = 'ach_check_conversion'
    ach_transfer_intention = 'ach_transfer_intention'
    ach_transfer_rejection = 'ach_transfer_rejection'
    ach_transfer_return = 'ach_transfer_return'
    card_dispute_acceptance = 'card_dispute_acceptance'
    card_refund = 'card_refund'
    card_settlement = 'card_settlement'
    check_deposit_acceptance = 'check_deposit_acceptance'
    check_deposit_return = 'check_deposit_return'
    check_transfer_intention = 'check_transfer_intention'
    check_transfer_return = 'check_transfer_return'
    check_transfer_rejection = 'check_transfer_rejection'
    check_transfer_stop_payment_request = 'check_transfer_stop_payment_request'
    dispute_resolution = 'dispute_resolution'
    empyreal_cash_deposit = 'empyreal_cash_deposit'
    inbound_ach_transfer = 'inbound_ach_transfer'
    inbound_ach_transfer_return_intention = 'inbound_ach_transfer_return_intention'
    inbound_check = 'inbound_check'
    inbound_international_ach_transfer = 'inbound_international_ach_transfer'
    inbound_real_time_payments_transfer_confirmation = (
        'inbound_real_time_payments_transfer_confirmation'
    )
    inbound_wire_drawdown_payment_reversal = 'inbound_wire_drawdown_payment_reversal'
    inbound_wire_drawdown_payment = 'inbound_wire_drawdown_payment'
    inbound_wire_reversal = 'inbound_wire_reversal'
    inbound_wire_transfer = 'inbound_wire_transfer'
    interest_payment = 'interest_payment'
    internal_general_ledger_transaction = 'internal_general_ledger_transaction'
    internal_source = 'internal_source'
    card_route_refund = 'card_route_refund'
    card_route_settlement = 'card_route_settlement'
    real_time_payments_transfer_acknowledgement = (
        'real_time_payments_transfer_acknowledgement'
    )
    sample_funds = 'sample_funds'
    wire_drawdown_payment_intention = 'wire_drawdown_payment_intention'
    wire_drawdown_payment_rejection = 'wire_drawdown_payment_rejection'
    wire_transfer_intention = 'wire_transfer_intention'
    wire_transfer_rejection = 'wire_transfer_rejection'
    other = 'other'


class CheckDepositAcceptance3(BaseModel):
    account_number: str = Field(
        ..., description='The account number printed on the check.'
    )
    amount: int = Field(
        ...,
        description="The amount to be deposited in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    auxiliary_on_us: str = Field(
        ...,
        description='An additional line of metadata printed on the check. This typically includes the check number for business checks.',
    )
    check_deposit_id: str = Field(
        ..., description='The ID of the Check Deposit that was accepted.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    routing_number: str = Field(
        ..., description='The routing number printed on the check.'
    )
    serial_number: str = Field(
        ...,
        description='The check serial number, if present, for consumer checks. For business checks, the serial number is usually in the `auxiliary_on_us` field.',
    )


class CheckDepositReturn3(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    check_deposit_id: str = Field(
        ..., description='The identifier of the Check Deposit that was returned.'
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    return_reason: ReturnReason = Field(..., description='')
    returned_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the check deposit was returned.',
    )
    transaction_id: str = Field(
        ...,
        description='The identifier of the transaction that reversed the original check deposit transaction.',
    )


class CheckTransferIntention3(BaseModel):
    address_city: str = Field(..., description="The city of the check's destination.")
    address_line1: str = Field(
        ..., description="The street address of the check's destination."
    )
    address_line2: str = Field(
        ..., description="The second line of the address of the check's destination."
    )
    address_state: str = Field(..., description="The state of the check's destination.")
    address_zip: str = Field(
        ..., description="The postal code of the check's destination."
    )
    amount: int = Field(..., description='The transfer amount in USD cents.')
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the check's currency.",
    )
    recipient_name: str = Field(
        ..., description='The name that will be printed on the check.'
    )
    transfer_id: str = Field(
        ...,
        description='The identifier of the Check Transfer with which this is associated.',
    )


class Type66(Enum):
    check_transfer_stop_payment_request = 'check_transfer_stop_payment_request'


class CheckTransferStopPaymentRequest3(BaseModel):
    requested_at: datetime = Field(
        ..., description='The time the stop-payment was requested.'
    )
    transaction_id: str = Field(
        ..., description='The transaction ID of the corresponding credit transaction.'
    )
    transfer_id: str = Field(
        ..., description='The ID of the check transfer that was stopped.'
    )
    type: Type66 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `check_transfer_stop_payment_request`.",
    )


class DisputeResolution3(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )
    disputed_transaction_id: str = Field(
        ..., description='The identifier of the Transaction that was disputed.'
    )


class InboundCheck3(BaseModel):
    amount: int = Field(
        ...,
        description='The amount in the minor unit of the destination account currency. For dollars, for example, this is cents.',
    )
    check_front_image_file_id: str = Field(..., description='')
    check_number: str = Field(..., description='')
    check_rear_image_file_id: str = Field(..., description='')
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction's currency.",
    )


class InboundRealTimePaymentsTransferConfirmation3(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transfer's currency. For dollars, for example, this is cents.",
    )
    creditor_name: str = Field(
        ...,
        description='The name the sender of the transfer specified as the recipient of the transfer.',
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code of the transfer\'s currency. This will always be "USD" for a Real Time Payments transfer.',
    )
    debtor_account_number: str = Field(
        ..., description='The account number of the account that sent the transfer.'
    )
    debtor_name: str = Field(
        ..., description='The name provided by the sender of the transfer.'
    )
    debtor_routing_number: str = Field(
        ..., description='The routing number of the account that sent the transfer.'
    )
    remittance_information: str = Field(
        ..., description='Additional information included with the transfer.'
    )
    transaction_identification: str = Field(
        ..., description='The Real Time Payments network identification of the transfer'
    )


class InterestPayment3(BaseModel):
    accrued_on_account_id: str = Field(
        ..., description='The account on which the interest was accrued.'
    )
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.',
    )
    period_end: datetime = Field(
        ...,
        description='The end of the period for which this transaction paid interest.',
    )
    period_start: datetime = Field(
        ...,
        description='The start of the period for which this transaction paid interest.',
    )


class Reason23(Enum):
    bank_migration = 'bank_migration'
    cashback = 'cashback'
    empyreal_adjustment = 'empyreal_adjustment'
    error = 'error'
    error_correction = 'error_correction'
    fees = 'fees'
    interest = 'interest'
    sample_funds = 'sample_funds'
    sample_funds_return = 'sample_funds_return'


class InternalSource3(BaseModel):
    amount: int = Field(
        ...,
        description="The amount in the minor unit of the transaction's currency. For dollars, for example, this is cents.",
    )
    currency: Currency = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transaction currency.',
    )
    reason: Reason23 = Field(..., description='')


class Source9(BaseModel):
    account_transfer_intention: AccountTransferIntention3 = Field(
        ...,
        description='A Account Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `account_transfer_intention`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'description': 'Frederick S. Holmes',
                'destination_account_id': 'account_uf16sut2ct5bevmq3eh',
                'source_account_id': 'account_in71c4amph0vgo2qllky',
                'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n',
            }
        ],
        title='Account Transfer Intention',
    )
    ach_check_conversion: AchCheckConversion = Field(
        ...,
        description='A ACH Check Conversion object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion`.',
        examples=[{'amount': 100, 'file_id': 'file_makxrc67oh9l6sg7w9yc'}],
        title='ACH Check Conversion',
    )
    ach_check_conversion_return: AchCheckConversionReturn = Field(
        ...,
        description='A ACH Check Conversion Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_check_conversion_return`.',
        examples=[{'amount': 100, 'return_reason_code': ''}],
        title='ACH Check Conversion Return',
    )
    ach_transfer_intention: AchTransferIntention = Field(
        ...,
        description='A ACH Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'routing_number': '101050001',
                'statement_descriptor': 'Frederick S. Holmes',
                'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n',
            }
        ],
        title='ACH Transfer Intention',
    )
    ach_transfer_rejection: AchTransferRejection = Field(
        ...,
        description='A ACH Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_rejection`.',
        examples=[{'transfer_id': 'account_transfer_7k9qe1ysdgqztnt63l7n'}],
        title='ACH Transfer Rejection',
    )
    ach_transfer_return: AchTransferReturn3 = Field(
        ...,
        description='A ACH Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `ach_transfer_return`.',
        examples=[
            {
                'created_at': '2020-01-31T23:59:59Z',
                'return_reason_code': 'insufficient_fund',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'transfer_id': 'ach_transfer_uoxatyh3lt5evrsdvo7q',
            }
        ],
        title='ACH Transfer Return',
    )
    card_dispute_acceptance: CardDisputeAcceptance = Field(
        ...,
        description='A Card Dispute Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `card_dispute_acceptance`.',
        examples=[
            {
                'accepted_at': '2020-01-31T23:59:59Z',
                'card_dispute_id': 'card_dispute_h9sc95nbl1cgltpp7men',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Card Dispute Acceptance',
    )
    card_refund: CardRefund3 = Field(
        ...,
        description='A Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_refund`.',
        examples=[
            {
                'amount': 100,
                'card_settlement_transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'currency': 'USD',
                'type': 'card_refund',
            }
        ],
        title='Card Refund',
    )
    card_route_refund: CardRouteRefund3 = Field(
        ...,
        description='A Deprecated Card Refund object. This field will be present in the JSON response if and only if `category` is equal to `card_route_refund`.',
        examples=[
            {
                'amount': 1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Refund',
    )
    card_route_settlement: CardRouteSettlement3 = Field(
        ...,
        description='A Deprecated Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_route_settlement`.',
        examples=[
            {
                'amount': 1000,
                'currency': 'USD',
                'merchant_acceptor_id': '372909060886',
                'merchant_category_code': '5998',
                'merchant_city': '5364086000',
                'merchant_country': 'USA',
                'merchant_descriptor': 'TENTS R US',
                'merchant_state': 'CA',
            }
        ],
        title='Deprecated Card Settlement',
    )
    card_settlement: CardSettlement3 = Field(
        ...,
        description='A Card Settlement object. This field will be present in the JSON response if and only if `category` is equal to `card_settlement`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'merchant_category_code': '5734',
                'merchant_city': 'New York',
                'merchant_country': 'US',
                'merchant_name': 'AMAZON.COM',
                'merchant_state': 'NY',
                'pending_transaction_id': None,
                'presentment_amount': 100,
                'presentment_currency': 'USD',
                'type': 'card_settlement',
            }
        ],
        title='Card Settlement',
    )
    category: Category14 = Field(
        ...,
        description='The type of transaction that took place. We may add additional possible values for this enum over time; your application should be able to handle such additions gracefully.',
    )
    check_deposit_acceptance: CheckDepositAcceptance3 = Field(
        ...,
        description='A Check Deposit Acceptance object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_acceptance`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'auxiliary_on_us': '101',
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'routing_number': '101050001',
                'serial_number': None,
            }
        ],
        title='Check Deposit Acceptance',
    )
    check_deposit_return: CheckDepositReturn3 = Field(
        ...,
        description='A Check Deposit Return object. This field will be present in the JSON response if and only if `category` is equal to `check_deposit_return`.',
        examples=[
            {
                'amount': 100,
                'check_deposit_id': 'check_deposit_f06n9gpg7sxn8t19lfc1',
                'currency': 'USD',
                'return_reason': 'insufficient_funds',
                'returned_at': '2020-01-31T23:59:59Z',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Check Deposit Return',
    )
    check_transfer_intention: CheckTransferIntention3 = Field(
        ...,
        description='A Check Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_intention`.',
        examples=[
            {
                'address_city': 'New York',
                'address_line1': '33 Liberty Street',
                'address_line2': None,
                'address_state': 'NY',
                'address_zip': '10045',
                'amount': 1000,
                'currency': 'USD',
                'recipient_name': 'Ian Crease',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
            }
        ],
        title='Check Transfer Intention',
    )
    check_transfer_rejection: CheckTransferRejection = Field(
        ...,
        description='A Check Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_rejection`.',
        examples=[{'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5'}],
        title='Check Transfer Rejection',
    )
    check_transfer_return: CheckTransferReturn = Field(
        ...,
        description='A Check Transfer Return object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_return`.',
        examples=[
            {'file_id': None, 'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5'}
        ],
        title='Check Transfer Return',
    )
    check_transfer_stop_payment_request: CheckTransferStopPaymentRequest3 = Field(
        ...,
        description='A Check Transfer Stop Payment Request object. This field will be present in the JSON response if and only if `category` is equal to `check_transfer_stop_payment_request`.',
        examples=[
            {
                'requested_at': '2020-01-31T23:59:59Z',
                'transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
                'transfer_id': 'check_transfer_30b43acfu9vw8fyc4f5',
                'type': 'check_transfer_stop_payment_request',
            }
        ],
        title='Check Transfer Stop Payment Request',
    )
    dispute_resolution: DisputeResolution3 = Field(
        ...,
        description='A Dispute Resolution object. This field will be present in the JSON response if and only if `category` is equal to `dispute_resolution`.',
        examples=[
            {
                'amount': 100,
                'currency': 'USD',
                'disputed_transaction_id': 'transaction_uyrp7fld2ium70oa7oi',
            }
        ],
        title='Dispute Resolution',
    )
    empyreal_cash_deposit: EmpyrealCashDeposit = Field(
        ...,
        description='A Empyreal Cash Deposit object. This field will be present in the JSON response if and only if `category` is equal to `empyreal_cash_deposit`.',
        examples=[
            {'amount': 100, 'bag_id': '12345', 'deposit_date': '2020-01-31T23:59:59Z'}
        ],
        title='Empyreal Cash Deposit',
    )
    inbound_ach_transfer: InboundAchTransfer = Field(
        ...,
        description='A Inbound ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_ach_transfer`.',
        examples=[
            {
                'amount': 100,
                'originator_company_descriptive_date': None,
                'originator_company_discretionary_data': None,
                'originator_company_entry_description': 'RESERVE',
                'originator_company_id': '0987654321',
                'originator_company_name': 'BIG BANK',
                'receiver_id_number': '12345678900',
                'receiver_name': 'IAN CREASE',
                'trace_number': '021000038461022',
            }
        ],
        title='Inbound ACH Transfer',
    )
    inbound_check: InboundCheck3 = Field(
        ...,
        description='A Inbound Check object. This field will be present in the JSON response if and only if `category` is equal to `inbound_check`.',
        examples=[
            {
                'amount': 100,
                'check_front_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
                'check_number': '       00000123',
                'check_rear_image_file_id': 'file_makxrc67oh9l6sg7w9yc',
                'currency': 'USD',
            }
        ],
        title='Inbound Check',
    )
    inbound_international_ach_transfer: InboundInternationalAchTransfer = Field(
        ...,
        description='A Inbound International ACH Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_international_ach_transfer`.',
        examples=[
            {
                'amount': -1000,
                'destination_country_code': 'US',
                'destination_currency_code': 'USD',
                'foreign_exchange_indicator': 'fixed_to_fixed',
                'foreign_exchange_reference': None,
                'foreign_exchange_reference_indicator': 'blank',
                'foreign_payment_amount': 199,
                'foreign_trace_number': None,
                'international_transaction_type_code': 'internet_initiated',
                'originating_currency_code': 'USD',
                'originating_depository_financial_institution_branch_country': 'US',
                'originating_depository_financial_institution_id': '091000019',
                'originating_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'originating_depository_financial_institution_name': 'WELLS FARGO BANK',
                'originator_city': 'BERLIN',
                'originator_company_entry_description': 'RETRY PYMT',
                'originator_country': 'DE',
                'originator_identification': '770510487A',
                'originator_name': 'BERGHAIN',
                'originator_postal_code': '50825',
                'originator_state_or_province': None,
                'originator_street_address': 'Ruedersdorferstr. 7',
                'payment_related_information': None,
                'payment_related_information2': None,
                'receiver_city': 'BEVERLY HILLS',
                'receiver_country': 'US',
                'receiver_identification_number': '1018790279274',
                'receiver_postal_code': '90210',
                'receiver_state_or_province': 'CA',
                'receiver_street_address': '123 FAKE ST',
                'receiving_company_or_individual_name': 'IAN CREASE',
                'receiving_depository_financial_institution_country': 'US',
                'receiving_depository_financial_institution_id': '101050001',
                'receiving_depository_financial_institution_id_qualifier': 'national_clearing_system_number',
                'receiving_depository_financial_institution_name': 'BLUE RIDGE BANK, NATIONAL ASSOCIATI',
                'trace_number': '010202909100090',
            }
        ],
        title='Inbound International ACH Transfer',
    )
    inbound_real_time_payments_transfer_confirmation: (
        InboundRealTimePaymentsTransferConfirmation3
    ) = Field(
        ...,
        description='A Inbound Real Time Payments Transfer Confirmation object. This field will be present in the JSON response if and only if `category` is equal to `inbound_real_time_payments_transfer_confirmation`.',
        examples=[
            {
                'amount': 100,
                'creditor_name': 'Ian Crease',
                'currency': 'USD',
                'debtor_account_number': '987654321',
                'debtor_name': 'National Phonograph Company',
                'debtor_routing_number': '101050001',
                'remittance_information': 'Invoice 29582',
                'transaction_identification': '20220501234567891T1BSLZO01745013025',
            }
        ],
        title='Inbound Real Time Payments Transfer Confirmation',
    )
    inbound_wire_drawdown_payment: InboundWireDrawdownPayment = Field(
        ...,
        description='A Inbound Wire Drawdown Payment object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment`.',
        examples=[
            {
                'amount': 100,
                'beneficiary_address_line1': None,
                'beneficiary_address_line2': None,
                'beneficiary_address_line3': None,
                'beneficiary_name': None,
                'beneficiary_reference': None,
                'description': 'Inbound wire drawdown payment',
                'input_message_accountability_data': None,
                'originator_address_line1': None,
                'originator_address_line2': None,
                'originator_address_line3': None,
                'originator_name': None,
                'originator_to_beneficiary_information': None,
            }
        ],
        title='Inbound Wire Drawdown Payment',
    )
    inbound_wire_drawdown_payment_reversal: InboundWireDrawdownPaymentReversal = Field(
        ...,
        description='A Inbound Wire Drawdown Payment Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_drawdown_payment_reversal`.',
        examples=[
            {
                'amount': 12345,
                'description': 'Inbound wire reversal 2022021100335128',
                'input_cycle_date': '2022-02-11',
                'input_message_accountability_data': '20220211B6B7HU2R011023',
                'input_sequence_number': '11023',
                'input_source': 'B6B7HU2R',
                'previous_message_input_cycle_date': '2022-02-10',
                'previous_message_input_message_accountability_data': '20220210MMQFMP0P000007',
                'previous_message_input_sequence_number': '3',
                'previous_message_input_source': 'MMQFMP0P',
            }
        ],
        title='Inbound Wire Drawdown Payment Reversal',
    )
    inbound_wire_reversal: InboundWireReversal = Field(
        ...,
        description='A Inbound Wire Reversal object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_reversal`.',
        examples=[
            {
                'amount': 12345,
                'description': 'Inbound wire reversal 2022021100335128',
                'financial_institution_to_financial_institution_information': None,
                'input_cycle_date': '2022-02-11',
                'input_message_accountability_data': '20220211B6B7HU2R011023',
                'input_sequence_number': '11023',
                'input_source': 'B6B7HU2R',
                'previous_message_input_cycle_date': '2022-02-10',
                'previous_message_input_message_accountability_data': '20220210MMQFMP0P000007',
                'previous_message_input_sequence_number': '3',
                'previous_message_input_source': 'MMQFMP0P',
                'receiver_financial_institution_information': None,
            }
        ],
        title='Inbound Wire Reversal',
    )
    inbound_wire_transfer: InboundWireTransfer = Field(
        ...,
        description='A Inbound Wire Transfer object. This field will be present in the JSON response if and only if `category` is equal to `inbound_wire_transfer`.',
        examples=[
            {
                'amount': 100,
                'beneficiary_address_line1': None,
                'beneficiary_address_line2': None,
                'beneficiary_address_line3': None,
                'beneficiary_name': None,
                'beneficiary_reference': None,
                'description': 'Inbound wire transfer',
                'input_message_accountability_data': None,
                'originator_address_line1': None,
                'originator_address_line2': None,
                'originator_address_line3': None,
                'originator_name': None,
                'originator_to_beneficiary_information': None,
                'originator_to_beneficiary_information_line1': None,
                'originator_to_beneficiary_information_line2': None,
                'originator_to_beneficiary_information_line3': None,
                'originator_to_beneficiary_information_line4': None,
            }
        ],
        title='Inbound Wire Transfer',
    )
    interest_payment: InterestPayment3 = Field(
        ...,
        description='A Interest Payment object. This field will be present in the JSON response if and only if `category` is equal to `interest_payment`.',
        examples=[
            {
                'accrued_on_account_id': 'account_in71c4amph0vgo2qllky',
                'amount': 100,
                'currency': 'USD',
                'period_end': '2023-03-31T23:59:59Z',
                'period_start': '2023-03-01T00:00:00Z',
            }
        ],
        title='Interest Payment',
    )
    internal_source: InternalSource3 = Field(
        ...,
        description='A Internal Source object. This field will be present in the JSON response if and only if `category` is equal to `internal_source`.',
        examples=[{'amount': 100, 'currency': 'USD', 'reason': 'sample_funds'}],
        title='Internal Source',
    )
    sample_funds: SampleFunds = Field(
        ...,
        description='A Sample Funds object. This field will be present in the JSON response if and only if `category` is equal to `sample_funds`.',
        examples=[{'originator': 'dashboard'}],
        title='Sample Funds',
    )
    wire_drawdown_payment_intention: WireDrawdownPaymentIntention = Field(
        ...,
        description='A Wire Drawdown Payment Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
                'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u',
            }
        ],
        title='Wire Drawdown Payment Intention',
    )
    wire_drawdown_payment_rejection: WireDrawdownPaymentRejection = Field(
        ...,
        description='A Wire Drawdown Payment Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_drawdown_payment_rejection`.',
        examples=[{'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u'}],
        title='Wire Drawdown Payment Rejection',
    )
    wire_transfer_intention: WireTransferIntention = Field(
        ...,
        description='A Wire Transfer Intention object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_intention`.',
        examples=[
            {
                'account_number': '987654321',
                'amount': 100,
                'message_to_recipient': 'HELLO',
                'routing_number': '101050001',
                'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u',
            }
        ],
        title='Wire Transfer Intention',
    )
    wire_transfer_rejection: WireTransferRejection = Field(
        ...,
        description='A Wire Transfer Rejection object. This field will be present in the JSON response if and only if `category` is equal to `wire_transfer_rejection`.',
        examples=[{'transfer_id': 'wire_transfer_5akynk7dqsq25qwk9q2u'}],
        title='Wire Transfer Rejection',
    )


class Type67(Enum):
    transaction = 'transaction'


class Transaction3(BaseModel):
    account_id: str = Field(
        ..., description='The identifier for the Account the Transaction belongs to.'
    )
    amount: int = Field(
        ...,
        description='The Transaction amount in the minor unit of its currency. For dollars, for example, this is cents.',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date on which the Transaction occured.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the Transaction's currency. This will match the currency on the Transcation's Account.",
    )
    description: str = Field(
        ...,
        description='For a Transaction related to a transfer, this is the description you provide. For a Transaction related to a payment, this is the description the vendor provides.',
    )
    id: str = Field(..., description='The Transaction identifier.')
    route_id: str = Field(
        ...,
        description='The identifier for the route this Transaction came through. Routes are things like cards and ACH details.',
    )
    route_type: str = Field(
        ..., description='The type of the route this Transaction came through.'
    )
    source: Source9 = Field(
        ...,
        description='This is an object giving more details on the network-level event that caused the Transaction. Note that for backwards compatibility reasons, additional undocumented keys may appear in this object. These should be treated as deprecated and will be removed in the future.',
        examples=[
            {
                'category': 'inbound_ach_transfer',
                'inbound_ach_transfer': {
                    'amount': 100,
                    'originator_company_descriptive_date': None,
                    'originator_company_discretionary_data': None,
                    'originator_company_entry_description': 'RESERVE',
                    'originator_company_id': '0987654321',
                    'originator_company_name': 'BIG BANK',
                    'receiver_id_number': '12345678900',
                    'receiver_name': 'IAN CREASE',
                    'trace_number': '021000038461022',
                },
            }
        ],
        title='Transaction Source',
    )
    type: Type67 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `transaction`.",
    )


class TransactionList(BaseModel):
    data: List[Transaction3] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class DigitalWallet4(BaseModel):
    card_profile_id: Optional[str] = Field(
        None,
        description='The card profile assigned to this digital card. Card profiles may also be assigned at the program level.',
    )
    email: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='An email address that can be used to verify the cardholder via one-time passcode over email.',
    )
    phone: Optional[constr(min_length=1, max_length=200)] = Field(
        None,
        description='A phone number that can be used to verify the cardholder via one-time passcode over SMS.',
    )


class Status35(Enum):
    active = 'active'
    disabled = 'disabled'
    canceled = 'canceled'


class UpdateACardParameters(BaseModel):
    billing_address: Optional[BillingAddress1] = Field(
        None, description="The card's updated billing address."
    )
    description: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The description you choose to give the card.'
    )
    digital_wallet: Optional[DigitalWallet4] = Field(
        None,
        description='The contact information used in the two-factor steps for digital wallet card creation. At least one field must be present to complete the digital wallet steps.',
    )
    status: Optional[Status35] = Field(
        None, description='The status to update the Card with.'
    )


class Status36(Enum):
    inactive = 'inactive'
    active = 'active'


class UpdateALimitParameters(BaseModel):
    status: Status36 = Field(..., description='The status to update the limit with.')


class Status37(Enum):
    active = 'active'
    disabled = 'disabled'
    canceled = 'canceled'


class UpdateAnAccountNumberParameters(BaseModel):
    name: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The name you choose for the Account Number.'
    )
    status: Optional[Status37] = Field(
        None,
        description='This indicates if transfers can be made to the Account Number.',
    )


class UpdateAnAccountParameters(BaseModel):
    name: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The new name of the Account.'
    )


class Status38(Enum):
    active = 'active'
    disabled = 'disabled'
    deleted = 'deleted'


class UpdateAnEventSubscriptionParameters(BaseModel):
    status: Optional[Status38] = Field(
        None, description='The status to update the Event Subscription with.'
    )


class Status39(Enum):
    active = 'active'
    archived = 'archived'


class UpdateAnExternalAccountParameters(BaseModel):
    description: Optional[constr(min_length=1, max_length=200)] = Field(
        None, description='The description you choose to give the external account.'
    )
    status: Optional[Status39] = Field(
        None, description='The status of the External Account.'
    )


class Status40(Enum):
    pending_submission = 'pending_submission'
    pending_response = 'pending_response'
    fulfilled = 'fulfilled'
    refused = 'refused'


class Submission3(BaseModel):
    input_message_accountability_data: str = Field(
        ...,
        description='The input message accountability data (IMAD) uniquely identifying the submission with Fedwire.',
    )


class Type68(Enum):
    wire_drawdown_request = 'wire_drawdown_request'


class WireDrawdownRequest(BaseModel):
    account_number_id: str = Field(
        ...,
        description='The Account Number to which the recipient of this request is being requested to send funds.',
    )
    amount: int = Field(..., description='The amount being requested in cents.')
    currency: str = Field(
        ...,
        description='The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the amount being requested. Will always be "USD".',
    )
    fulfillment_transaction_id: str = Field(
        ...,
        description='If the recipient fulfills the drawdown request by sending funds, then this will be the identifier of the corresponding Transaction.',
    )
    id: str = Field(..., description='The Wire drawdown request identifier.')
    message_to_recipient: str = Field(
        ...,
        description='The message the recipient will see as part of the drawdown request.',
    )
    recipient_account_number: str = Field(
        ..., description="The drawdown request's recipient's account number."
    )
    recipient_address_line1: str = Field(
        ..., description="Line 1 of the drawdown request's recipient's address."
    )
    recipient_address_line2: str = Field(
        ..., description="Line 2 of the drawdown request's recipient's address."
    )
    recipient_address_line3: str = Field(
        ..., description="Line 3 of the drawdown request's recipient's address."
    )
    recipient_name: str = Field(
        ..., description="The drawdown request's recipient's name."
    )
    recipient_routing_number: str = Field(
        ..., description="The drawdown request's recipient's routing number."
    )
    status: Status40 = Field(
        ..., description='The lifecycle status of the drawdown request.'
    )
    submission: Submission3 = Field(
        ...,
        description='After the drawdown request is submitted to Fedwire, this will contain supplemental details.',
        examples=[{'input_message_accountability_data': '20220118MMQFMP0P000003'}],
        title='Wire Drawdown Request Submission',
    )
    type: Type68 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `wire_drawdown_request`.",
    )


class WireDrawdownRequestList(BaseModel):
    data: List[WireDrawdownRequest] = Field(
        ..., description='The contents of the list.'
    )
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Approval3(BaseModel):
    approved_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was approved.',
    )


class Network9(Enum):
    wire = 'wire'


class Reversal(BaseModel):
    amount: int = Field(..., description='The amount that was reversed.')
    description: str = Field(
        ..., description='The description on the reversal message from Fedwire.'
    )
    financial_institution_to_financial_institution_information: str = Field(
        ...,
        description='Additional financial institution information included in the wire reversal.',
    )
    input_cycle_date: date = Field(
        ..., description='The Fedwire cycle date for the wire reversal.'
    )
    input_message_accountability_data: str = Field(
        ..., description='The Fedwire transaction identifier.'
    )
    input_sequence_number: str = Field(..., description='The Fedwire sequence number.')
    input_source: str = Field(..., description='The Fedwire input source identifier.')
    previous_message_input_cycle_date: date = Field(
        ...,
        description='The Fedwire cycle date for the wire transfer that was reversed.',
    )
    previous_message_input_message_accountability_data: str = Field(
        ...,
        description='The Fedwire transaction identifier for the wire transfer that was reversed.',
    )
    previous_message_input_sequence_number: str = Field(
        ...,
        description='The Fedwire sequence number for the wire transfer that was reversed.',
    )
    previous_message_input_source: str = Field(
        ...,
        description='The Fedwire input source identifier for the wire transfer that was reversed.',
    )
    receiver_financial_institution_information: str = Field(
        ...,
        description='Information included in the wire reversal for the receiving financial institution.',
    )


class Status41(Enum):
    canceled = 'canceled'
    requires_attention = 'requires_attention'
    pending_approval = 'pending_approval'
    rejected = 'rejected'
    reversed = 'reversed'
    complete = 'complete'
    pending_creating = 'pending_creating'


class Submission4(BaseModel):
    input_message_accountability_data: str = Field(
        ..., description='The accountability data for the submission.'
    )
    submitted_at: datetime = Field(
        ..., description='When this wire transfer was submitted to Fedwire.'
    )


class Type69(Enum):
    wire_transfer = 'wire_transfer'


class WireTransfer(BaseModel):
    account_id: str = Field(
        ..., description='The Account to which the transfer belongs.'
    )
    account_number: str = Field(..., description='The destination account number.')
    amount: int = Field(..., description='The transfer amount in USD cents.')
    approval: Approval3 = Field(
        ...,
        description='If your account requires approvals for transfers and the transfer was approved, this will contain details of the approval.',
        examples=[{'approved_at': '2020-01-31T23:59:59Z'}],
        title='Transfer Approval',
    )
    beneficiary_address_line1: str = Field(
        ..., description="The beneficiary's address line 1."
    )
    beneficiary_address_line2: str = Field(
        ..., description="The beneficiary's address line 2."
    )
    beneficiary_address_line3: str = Field(
        ..., description="The beneficiary's address line 3."
    )
    beneficiary_name: str = Field(..., description="The beneficiary's name.")
    cancellation: Cancellation = Field(
        ...,
        description='If your account requires approvals for transfers and the transfer was not approved, this will contain details of the cancellation.',
        examples=[{'canceled_at': '2020-01-31T23:59:59Z'}],
        title='Transfer Cancellation',
    )
    created_at: datetime = Field(
        ...,
        description='The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date and time at which the transfer was created.',
    )
    currency: Currency = Field(
        ...,
        description="The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) code for the transfer's currency. For wire transfers this is always equal to `usd`.",
    )
    external_account_id: str = Field(
        ...,
        description='The identifier of the External Account the transfer was made to, if any.',
    )
    id: str = Field(..., description="The wire transfer's identifier.")
    message_to_recipient: str = Field(
        ..., description="The message that will show on the recipient's bank statement."
    )
    network: Network9 = Field(..., description="The transfer's network.")
    reversal: Reversal = Field(
        ...,
        description='If your transfer is reversed, this will contain details of the reversal.',
        examples=[
            {
                'amount': 12345,
                'description': 'Inbound wire reversal 2022021100335128',
                'financial_institution_to_financial_institution_information': None,
                'input_cycle_date': '2022-02-11',
                'input_message_accountability_data': '20220211B6B7HU2R011023',
                'input_sequence_number': '11023',
                'input_source': 'B6B7HU2R',
                'previous_message_input_cycle_date': '2022-02-10',
                'previous_message_input_message_accountability_data': '20220210MMQFMP0P000007',
                'previous_message_input_sequence_number': '3',
                'previous_message_input_source': 'MMQFMP0P',
                'receiver_financial_institution_information': None,
            }
        ],
        title='Inbound Wire Reversal',
    )
    routing_number: str = Field(
        ...,
        description="The American Bankers' Association (ABA) Routing Transit Number (RTN).",
    )
    status: Status41 = Field(..., description='The lifecycle status of the transfer.')
    submission: Submission4 = Field(
        ...,
        description='After the transfer is submitted to Fedwire, this will contain supplemental details.',
        examples=[
            {
                'input_message_accountability_data': '20220118MMQFMP0P000002',
                'submitted_at': '2020-01-31T23:59:59Z',
            }
        ],
        title='Wire Transfer Submission',
    )
    template_id: str = Field(
        ...,
        description="If the transfer was created from a template, this will be the template's ID.",
    )
    transaction_id: str = Field(
        ..., description='The ID for the transaction funding the transfer.'
    )
    type: Type69 = Field(
        ...,
        description="A constant representing the object's type. For this resource it will always be `wire_transfer`.",
    )


class WireTransferList(BaseModel):
    data: List[WireTransfer] = Field(..., description='The contents of the list.')
    next_cursor: str = Field(..., description='A pointer to a place in the list.')


class Status42(Enum):
    active = 'active'
    disabled = 'disabled'
    canceled = 'canceled'


class Status44(Enum):
    open = 'open'
    closed = 'closed'


class StatusInEnum(Enum):
    pending_reviewing = 'pending_reviewing'
    accepted = 'accepted'
    rejected = 'rejected'


class StatusIn(RootModel[List[StatusInEnum]]):
    root: List[StatusInEnum] = Field(
        ...,
        description='Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.',
    )


class StatusInEnum2(Enum):
    pending = 'pending'
    rejected = 'rejected'
    active = 'active'
    archived = 'archived'


class StatusIn1(RootModel[List[StatusInEnum2]]):
    root: List[StatusInEnum2] = Field(
        ...,
        description='Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.',
    )


class CategoryInEnum(Enum):
    form_1099_int = 'form_1099_int'


class CategoryIn(RootModel[List[CategoryInEnum]]):
    root: List[CategoryInEnum] = Field(
        ...,
        description='Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.',
    )


class CategoryInEnum2(Enum):
    account_created = 'account.created'
    account_updated = 'account.updated'
    account_number_created = 'account_number.created'
    account_number_updated = 'account_number.updated'
    account_statement_created = 'account_statement.created'
    account_transfer_created = 'account_transfer.created'
    account_transfer_updated = 'account_transfer.updated'
    ach_prenotification_created = 'ach_prenotification.created'
    ach_prenotification_updated = 'ach_prenotification.updated'
    ach_transfer_created = 'ach_transfer.created'
    ach_transfer_updated = 'ach_transfer.updated'
    card_created = 'card.created'
    card_updated = 'card.updated'
    card_dispute_created = 'card_dispute.created'
    card_dispute_updated = 'card_dispute.updated'
    check_deposit_created = 'check_deposit.created'
    check_deposit_updated = 'check_deposit.updated'
    check_transfer_created = 'check_transfer.created'
    check_transfer_updated = 'check_transfer.updated'
    declined_transaction_created = 'declined_transaction.created'
    digital_wallet_token_created = 'digital_wallet_token.created'
    digital_wallet_token_updated = 'digital_wallet_token.updated'
    document_created = 'document.created'
    entity_created = 'entity.created'
    entity_updated = 'entity.updated'
    external_account_created = 'external_account.created'
    file_created = 'file.created'
    group_updated = 'group.updated'
    group_heartbeat = 'group.heartbeat'
    inbound_ach_transfer_return_created = 'inbound_ach_transfer_return.created'
    inbound_ach_transfer_return_updated = 'inbound_ach_transfer_return.updated'
    inbound_wire_drawdown_request_created = 'inbound_wire_drawdown_request.created'
    oauth_connection_created = 'oauth_connection.created'
    oauth_connection_deactivated = 'oauth_connection.deactivated'
    pending_transaction_created = 'pending_transaction.created'
    pending_transaction_updated = 'pending_transaction.updated'
    real_time_decision_card_authorization_requested = (
        'real_time_decision.card_authorization_requested'
    )
    real_time_decision_digital_wallet_token_requested = (
        'real_time_decision.digital_wallet_token_requested'
    )
    real_time_decision_digital_wallet_authentication_requested = (
        'real_time_decision.digital_wallet_authentication_requested'
    )
    real_time_payments_transfer_created = 'real_time_payments_transfer.created'
    real_time_payments_transfer_updated = 'real_time_payments_transfer.updated'
    real_time_payments_request_for_payment_created = (
        'real_time_payments_request_for_payment.created'
    )
    real_time_payments_request_for_payment_updated = (
        'real_time_payments_request_for_payment.updated'
    )
    transaction_created = 'transaction.created'
    wire_drawdown_request_created = 'wire_drawdown_request.created'
    wire_drawdown_request_updated = 'wire_drawdown_request.updated'
    wire_transfer_created = 'wire_transfer.created'
    wire_transfer_updated = 'wire_transfer.updated'


class CategoryIn1(RootModel[List[CategoryInEnum2]]):
    root: List[CategoryInEnum2] = Field(
        ...,
        description='Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.',
    )


class StatusInEnum4(Enum):
    active = 'active'
    archived = 'archived'


class StatusIn2(RootModel[List[StatusInEnum4]]):
    root: List[StatusInEnum4] = Field(
        ...,
        description='Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.',
    )


class PurposeInEnum(Enum):
    check_image_front = 'check_image_front'
    check_image_back = 'check_image_back'
    form_1099_int = 'form_1099_int'
    form_ss_4 = 'form_ss_4'
    identity_document = 'identity_document'
    increase_statement = 'increase_statement'
    other = 'other'
    trust_formation_document = 'trust_formation_document'
    digital_wallet_artwork = 'digital_wallet_artwork'
    digital_wallet_app_icon = 'digital_wallet_app_icon'
    entity_supplemental_document = 'entity_supplemental_document'


class PurposeIn(RootModel[List[PurposeInEnum]]):
    root: List[PurposeInEnum] = Field(
        ...,
        description='Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.',
    )


class StatusInEnum6(Enum):
    pending = 'pending'
    complete = 'complete'


class StatusIn3(RootModel[List[StatusInEnum6]]):
    root: List[StatusInEnum6] = Field(
        ...,
        description='Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.',
    )


class CategoryInEnum4(Enum):
    account_transfer_intention = 'account_transfer_intention'
    ach_check_conversion_return = 'ach_check_conversion_return'
    ach_check_conversion = 'ach_check_conversion'
    ach_transfer_intention = 'ach_transfer_intention'
    ach_transfer_rejection = 'ach_transfer_rejection'
    ach_transfer_return = 'ach_transfer_return'
    card_dispute_acceptance = 'card_dispute_acceptance'
    card_refund = 'card_refund'
    card_settlement = 'card_settlement'
    check_deposit_acceptance = 'check_deposit_acceptance'
    check_deposit_return = 'check_deposit_return'
    check_transfer_intention = 'check_transfer_intention'
    check_transfer_return = 'check_transfer_return'
    check_transfer_rejection = 'check_transfer_rejection'
    check_transfer_stop_payment_request = 'check_transfer_stop_payment_request'
    dispute_resolution = 'dispute_resolution'
    empyreal_cash_deposit = 'empyreal_cash_deposit'
    inbound_ach_transfer = 'inbound_ach_transfer'
    inbound_ach_transfer_return_intention = 'inbound_ach_transfer_return_intention'
    inbound_check = 'inbound_check'
    inbound_international_ach_transfer = 'inbound_international_ach_transfer'
    inbound_real_time_payments_transfer_confirmation = (
        'inbound_real_time_payments_transfer_confirmation'
    )
    inbound_wire_drawdown_payment_reversal = 'inbound_wire_drawdown_payment_reversal'
    inbound_wire_drawdown_payment = 'inbound_wire_drawdown_payment'
    inbound_wire_reversal = 'inbound_wire_reversal'
    inbound_wire_transfer = 'inbound_wire_transfer'
    interest_payment = 'interest_payment'
    internal_general_ledger_transaction = 'internal_general_ledger_transaction'
    internal_source = 'internal_source'
    card_route_refund = 'card_route_refund'
    card_route_settlement = 'card_route_settlement'
    real_time_payments_transfer_acknowledgement = (
        'real_time_payments_transfer_acknowledgement'
    )
    sample_funds = 'sample_funds'
    wire_drawdown_payment_intention = 'wire_drawdown_payment_intention'
    wire_drawdown_payment_rejection = 'wire_drawdown_payment_rejection'
    wire_transfer_intention = 'wire_transfer_intention'
    wire_transfer_rejection = 'wire_transfer_rejection'
    other = 'other'


class CategoryIn2(RootModel[List[CategoryInEnum4]]):
    root: List[CategoryInEnum4] = Field(
        ...,
        description='Return results whose value is in the provided list. For GET requests, this should be encoded as a comma-delimited string, such as `?in=one,two,three`.',
    )
